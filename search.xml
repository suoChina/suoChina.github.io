<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/10/06/linux%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2025/10/06/linux%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MCP使用教程 - 模型上下文协议从入门到精通</title>
      <link href="//mcp-tutorial/"/>
      <url>//mcp-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="MCP使用教程-模型上下文协议从入门到精通-🚀"><a href="#MCP使用教程-模型上下文协议从入门到精通-🚀" class="headerlink" title="MCP使用教程 - 模型上下文协议从入门到精通 🚀"></a>MCP使用教程 - 模型上下文协议从入门到精通 🚀</h1><blockquote><p>2025年是智能体的元年，也注定是智能体集中爆发的一年！MCP（Model Context Protocol）作为连接AI与外部世界的桥梁，正在革命性地改变我们与AI交互的方式。本教程将带您深入了解MCP的核心概念、应用场景和实战技巧。🤖</p></blockquote><p><img src="/images/mcp/LLM%E4%B8%8EMCP.png" alt="MCP概览"></p><h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><ul><li><p><a href="#1-mcp%E7%AE%80%E4%BB%8B%E4%B8%8E%E6%A6%82%E8%BF%B0">1. MCP简介与概述</a></p><ul><li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AFmcp">1.1 什么是MCP</a></li><li><a href="#12-%E6%A0%B8%E5%BF%83%E4%BB%B7%E5%80%BC">1.2 核心价值</a></li><li><a href="#13-%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B">1.3 发展历程</a></li></ul></li><li><p><a href="#2-mcp%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">2. MCP应用场景</a></p><ul><li><a href="#21-%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">2.1 程序员应用场景</a></li><li><a href="#22-%E5%A4%A7%E4%BC%97%E7%94%A8%E6%88%B7%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">2.2 大众用户应用场景</a></li><li><a href="#23-%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA">2.3 实际案例展示</a></li></ul></li><li><p><a href="#3-mcp%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86">3. MCP技术原理</a></p><ul><li><a href="#31-%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6">3.1 通信机制</a></li><li><a href="#32-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1">3.2 架构设计</a></li><li><a href="#33-%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83">3.3 协议规范</a></li></ul></li><li><p><a href="#4-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AE%89%E8%A3%85">4. 环境配置与安装</a></p><ul><li><a href="#41-%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">4.1 本地环境准备</a></li><li><a href="#42-%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E9%80%89%E6%8B%A9">4.2 通信方式选择</a></li><li><a href="#43-%E5%B9%B3%E5%8F%B0%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5">4.3 平台支持情况</a></li></ul></li><li><p><a href="#5-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C">5. 实战案例：数据库操作</a></p><ul><li><a href="#51-%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87">5.1 项目准备</a></li><li><a href="#52-%E9%85%8D%E7%BD%AEmcp%E6%9C%8D%E5%8A%A1">5.2 配置MCP服务</a></li><li><a href="#53-%E5%8A%9F%E8%83%BD%E9%AA%8C%E8%AF%81">5.3 功能验证</a></li></ul></li><li><p><a href="#6-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8Bexa-mcp-server">6. 实战案例：Exa MCP Server</a></p><ul><li><a href="#61-exa-mcp-server%E7%AE%80%E4%BB%8B">6.1 Exa MCP Server简介</a></li><li><a href="#62-cursor%E8%BF%9C%E7%A8%8B%E9%85%8D%E7%BD%AE">6.2 Cursor远程配置</a></li><li><a href="#63-%E5%8A%9F%E8%83%BD%E9%AA%8C%E8%AF%81">6.3 功能验证</a></li></ul></li><li><p><a href="#7-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8Bmcp%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%99%A8">7. 实战案例：MCP文件系统服务器</a></p><ul><li><a href="#71-mcp%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E4%BB%8B">7.1 MCP文件系统服务器简介</a></li><li><a href="#72-cursor%E9%85%8D%E7%BD%AE">7.2 Cursor配置</a></li><li><a href="#73-%E5%8A%9F%E8%83%BD%E9%AA%8C%E8%AF%81">7.3 功能验证</a></li></ul></li><li><p><a href="#8-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8Bmcp-git%E6%9C%8D%E5%8A%A1%E5%99%A8">8. 实战案例：MCP Git服务器</a></p><ul><li><a href="#81-mcp-git%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E4%BB%8B">8.1 MCP Git服务器简介</a></li><li><a href="#82-cursor%E9%85%8D%E7%BD%AE">8.2 Cursor配置</a></li><li><a href="#83-%E5%8A%9F%E8%83%BD%E9%AA%8C%E8%AF%81">8.3 功能验证</a></li></ul></li><li><p><a href="#9-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%B8%8E%E8%BF%9B%E9%98%B6%E6%8A%80%E5%B7%A7">9. 最佳实践与进阶技巧</a></p><ul><li><a href="#91-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">9.1 性能优化</a></li><li><a href="#92-%E5%AE%89%E5%85%A8%E8%80%83%E8%99%91">9.2 安全考虑</a></li><li><a href="#93-%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4">9.3 故障排除</a></li></ul></li></ul><h2 id="1-MCP简介与概述-🎯"><a href="#1-MCP简介与概述-🎯" class="headerlink" title="1. MCP简介与概述 🎯"></a>1. MCP简介与概述 🎯</h2><h3 id="1-1-什么是MCP"><a href="#1-1-什么是MCP" class="headerlink" title="1.1 什么是MCP"></a>1.1 什么是MCP</h3><p>MCP（Model Context Protocol，模型上下文协议）是由Anthropic在2024年11月底推出的一种开放标准。它旨在为大语言模型（LLM）提供统一的、标准化方式与外部数据源和工具之间进行通信。</p><p><img src="/images/mcp/MCP%E7%90%86%E8%A7%A3.png" alt="MCP理解"></p><p><strong>核心特点：</strong></p><ul><li>🔗 <strong>统一接口</strong>：提供标准化的连接方式</li><li>🚀 <strong>简化集成</strong>：大幅降低AI应用开发复杂度</li><li>🌐 <strong>开放标准</strong>：支持多种平台和服务</li><li>⚡ <strong>高效通信</strong>：优化的数据传输机制</li></ul><h3 id="1-2-核心价值"><a href="#1-2-核心价值" class="headerlink" title="1.2 核心价值"></a>1.2 核心价值</h3><h4 id="1-2-1-解决传统AI集成问题"><a href="#1-2-1-解决传统AI集成问题" class="headerlink" title="1.2.1 解决传统AI集成问题"></a>1.2.1 解决传统AI集成问题</h4><p><img src="/images/mcp/%E6%9C%89%E6%97%A0MCP%E5%AF%B9%E6%AF%94.png" alt="有无MCP对比"></p><p><strong>传统方式的问题：</strong></p><ul><li>架构碎片化，难以扩展</li><li>每个数据源需要独立连接</li><li>限制了AI获取必要上下文信息的能力</li><li>开发成本高，维护困难</li></ul><p><strong>MCP解决方案：</strong></p><ul><li>提供统一且可靠的数据访问方式</li><li>克服了以往集成方法的局限性</li><li>大幅简化开发流程</li><li>提高系统可维护性</li></ul><h4 id="1-2-2-技术优势"><a href="#1-2-2-技术优势" class="headerlink" title="1.2.2 技术优势"></a>1.2.2 技术优势</h4><p><img src="/images/mcp/MCP%E5%AF%B9%E6%AF%94.png" alt="MCP对比"></p><table><thead><tr><th><strong>对比维度</strong></th><th><strong>传统方式</strong></th><th><strong>MCP方式</strong></th></tr></thead><tbody><tr><td><strong>集成复杂度</strong></td><td>高（M×N问题）</td><td>低（统一协议）</td></tr><tr><td><strong>开发效率</strong></td><td>慢</td><td>快</td></tr><tr><td><strong>维护成本</strong></td><td>高</td><td>低</td></tr><tr><td><strong>扩展性</strong></td><td>差</td><td>优秀</td></tr><tr><td><strong>标准化</strong></td><td>无</td><td>有</td></tr></tbody></table><h3 id="1-3-发展历程"><a href="#1-3-发展历程" class="headerlink" title="1.3 发展历程"></a>1.3 发展历程</h3><p><strong>重要时间节点：</strong></p><ul><li><strong>2024年11月底</strong>：Anthropic推出MCP标准</li><li><strong>2025年2月</strong>：Cursor正式宣布支持MCP功能</li><li><strong>2025年3月27日</strong>：OpenAI智能体支持MCP</li></ul><blockquote><p>💡 <strong>感慨一句</strong>：没想到千帆过境的大模型之争，竟然被一个MCP标准协议统一了。</p></blockquote><h2 id="2-MCP应用场景-🌟"><a href="#2-MCP应用场景-🌟" class="headerlink" title="2. MCP应用场景 🌟"></a>2. MCP应用场景 🌟</h2><h3 id="2-1-程序员应用场景"><a href="#2-1-程序员应用场景" class="headerlink" title="2.1 程序员应用场景"></a>2.1 程序员应用场景</h3><h4 id="2-1-1-开发部署场景"><a href="#2-1-1-开发部署场景" class="headerlink" title="2.1.1 开发部署场景"></a>2.1.1 开发部署场景</h4><p><strong>智能CI&#x2F;CD流水线</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java语言 + Spring AI / LangChain / LangChain4J + MCP ==&gt; AI智能落地项目</span><br></pre></td></tr></table></figure><p><strong>实际案例：</strong><br>开发者通过自然语言指令”部署新版本到测试环境”，触发MCP链式调用：</p><ul><li>GitLab API（代码合并）</li><li>Jenkins API（构建镜像）</li><li>Slack API（通知团队）</li></ul><h4 id="2-1-2-数据库操作场景"><a href="#2-1-2-数据库操作场景" class="headerlink" title="2.1.2 数据库操作场景"></a>2.1.2 数据库操作场景</h4><p><strong>智能SQL查询</strong></p><ul><li>开发者通过自然语言输入：”查询某集团部门上个季度销售额”</li><li>MCP自动转换为精准SQL语句并执行</li><li>结合大模型进行智能分析和回答</li></ul><h4 id="2-1-3-智能体开发场景"><a href="#2-1-3-智能体开发场景" class="headerlink" title="2.1.3 智能体开发场景"></a>2.1.3 智能体开发场景</h4><p><strong>Manus智能体案例</strong><br>Manus的每一次任务处理都需要调用：</p><ul><li>网页搜索</li><li>网页访问</li><li>网页信息获取</li><li>本地文件创建</li><li>代码解释器</li><li>等几十个外部工具</li></ul><p><strong>暴露的问题：</strong></p><ol><li>可供大模型调用的工具不足</li><li>调用工作量很大</li></ol><p><strong>MCP解决方案：</strong><br>借助MCP，只要支持了该协议，就能轻松将各种数据源和工具连接到LLM。</p><h3 id="2-2-大众用户应用场景"><a href="#2-2-大众用户应用场景" class="headerlink" title="2.2 大众用户应用场景"></a>2.2 大众用户应用场景</h3><h4 id="2-2-1-旅游规划场景"><a href="#2-2-1-旅游规划场景" class="headerlink" title="2.2.1 旅游规划场景"></a>2.2.1 旅游规划场景</h4><p><strong>智能行程规划</strong><br>当用户要旅行时，旅行规划助手通过MCP同时调用：</p><ul><li>天气API（获取目的地气象）</li><li>交通API（查询航班动态）</li><li>地图API（规划路线）</li></ul><p>AI自动生成带实时数据的行程方案。</p><h4 id="2-2-2-联网搜索场景"><a href="#2-2-2-联网搜索场景" class="headerlink" title="2.2.2 联网搜索场景"></a>2.2.2 联网搜索场景</h4><p><strong>问题分析：</strong><br><img src="/images/mcp/%E6%97%A0MCP%E6%83%85%E5%86%B5.png" alt="无MCP情况"></p><p><strong>传统方式的问题：</strong></p><ol><li>并非所有聊天机器人都支持联网功能</li><li>即使支持联网，也可能不包含你习惯使用的搜索引擎</li><li>用户只能等待开发者添加特定搜索引擎的支持</li></ol><p><strong>MCP解决方案：</strong><br><img src="/images/mcp/%E6%9C%89MCP%E6%83%85%E5%86%B5.png" alt="有MCP情况"></p><p>有了MCP后，只需简单配置，就能将所需服务接入当前使用的聊天机器人。</p><h4 id="2-2-3-业务查询场景"><a href="#2-2-3-业务查询场景" class="headerlink" title="2.2.3 业务查询场景"></a>2.2.3 业务查询场景</h4><p><strong>业绩查询案例</strong><br>用户询问”查询上季度营业额”，MCP自动组合调用：</p><ul><li>CRM系统API（获取客户数据）</li><li>财务系统API（调取报表）</li><li>邮件API（发送总结报告）</li></ul><h3 id="2-3-实际案例展示"><a href="#2-3-实际案例展示" class="headerlink" title="2.3 实际案例展示"></a>2.3 实际案例展示</h3><p><img src="/images/mcp/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt="应用场景"></p><p><strong>各行业应用场景：</strong></p><p><strong>电商场景：</strong></p><ul><li>智能推荐系统：商品推荐、用户行为分析、个性化推送</li><li>智能客服与订单管理：自动问答、订单信息捕捉、需求分析</li><li>库存预测与动态定价：库存监控、需求预测、价格策略优化</li></ul><p><strong>社交场景：</strong></p><ul><li>内容审核与情感分析：敏感词过滤、图片&#x2F;视频违规检测、用户情绪识别</li><li>社交关系推荐：好友推荐、社群匹配、兴趣聚类</li><li>聊天机器人：自动回复、上下文理解、多轮对话</li></ul><p><strong>物流场景：</strong></p><ul><li>智能仓储管理：库存分拣、路径规划、异常检测</li><li>配送路线优化：实时路径计算、交通预测、成本控制</li><li>需求预测与资源调度：运力分配、仓库选址、峰值预测</li></ul><p><strong>金融场景：</strong></p><ul><li>风险评估与信贷审批：信用评分、反欺诈、贷款决策</li><li>智能投顾与财富管理：资产配置、市场预测、个性化理财建议</li><li>交易监控与反洗钱：异常交易检测、合规审查、模式识别</li></ul><h2 id="3-MCP技术原理-🔧"><a href="#3-MCP技术原理-🔧" class="headerlink" title="3. MCP技术原理 🔧"></a>3. MCP技术原理 🔧</h2><h3 id="3-1-通信机制"><a href="#3-1-通信机制" class="headerlink" title="3.1 通信机制"></a>3.1 通信机制</h3><p>根据MCP的规范，当前支持两种通信机制（传输方式）：</p><h4 id="3-1-1-stdio（标准输入输出）"><a href="#3-1-1-stdio（标准输入输出）" class="headerlink" title="3.1.1 stdio（标准输入输出）"></a>3.1.1 stdio（标准输入输出）</h4><p><strong>适用场景：</strong></p><ul><li>主要用在本地服务上</li><li>操作本地软件或本地文件</li><li>如Blender等本地应用</li><li>MCP默认通信方式</li></ul><p><strong>优点：</strong></p><ul><li>适用于客户端和服务器在同一台机器上运行的场景</li><li>无需外部网络依赖，通信速度快</li><li>可靠性高，且易于调试</li></ul><p><strong>缺点：</strong></p><ul><li>配置比较复杂，需要提前安装命令行工具</li><li>单进程通信，无法并行处理多个客户端请求</li><li>进程资源开销较大，不适合在本地运行大量服务</li></ul><h4 id="3-1-2-SSE（Server-Sent-Events）"><a href="#3-1-2-SSE（Server-Sent-Events）" class="headerlink" title="3.1.2 SSE（Server-Sent Events）"></a>3.1.2 SSE（Server-Sent Events）</h4><p><strong>适用场景：</strong></p><ul><li>主要用在远程通信服务上</li><li>服务本身有在线API</li><li>如访问谷歌邮件、天气情况等</li></ul><p><strong>优点：</strong></p><ul><li>配置方式非常简单，基本上就一个链接就行</li><li>适用于客户端和服务器位于不同物理位置的场景</li><li>适用于实时数据更新、消息推送、轻量级监控和实时日志流等场景</li></ul><h3 id="3-2-架构设计"><a href="#3-2-架构设计" class="headerlink" title="3.2 架构设计"></a>3.2 架构设计</h3><p><img src="/images/mcp/MCP%E4%BD%9C%E4%B8%BA%E5%80%9F%E5%8F%A3.png" alt="MCP作为接口"></p><p><strong>架构特点：</strong></p><ul><li>标准化协议层</li><li>统一的数据交换格式</li><li>可扩展的服务接口</li><li>安全的数据传输机制</li></ul><h3 id="3-3-协议规范"><a href="#3-3-协议规范" class="headerlink" title="3.3 协议规范"></a>3.3 协议规范</h3><p><strong>官方文档：</strong> <a href="https://modelcontextprotocol.io/introduction">https://modelcontextprotocol.io/introduction</a></p><p><strong>核心规范：</strong></p><ul><li>标准化的消息格式</li><li>统一的错误处理机制</li><li>可扩展的元数据支持</li><li>安全认证和授权机制</li></ul><h2 id="4-环境配置与安装-⚙️"><a href="#4-环境配置与安装-⚙️" class="headerlink" title="4. 环境配置与安装 ⚙️"></a>4. 环境配置与安装 ⚙️</h2><h3 id="4-1-本地环境准备"><a href="#4-1-本地环境准备" class="headerlink" title="4.1 本地环境准备"></a>4.1 本地环境准备</h3><h4 id="4-1-1-Python环境（uvx）"><a href="#4-1-1-Python环境（uvx）" class="headerlink" title="4.1.1 Python环境（uvx）"></a>4.1.1 Python环境（uvx）</h4><p><strong>安装方式1：</strong> 若已配置Python环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uv</span><br></pre></td></tr></table></figure><p><strong>安装方式2：</strong> Windows PowerShell安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-ExecutionPolicy</span> ByPass <span class="literal">-c</span> <span class="string">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4-1-2-TypeScript环境（npx）"><a href="#4-1-2-TypeScript环境（npx）" class="headerlink" title="4.1.2 TypeScript环境（npx）"></a>4.1.2 TypeScript环境（npx）</h4><p><strong>前置条件：</strong></p><ul><li>安装Node.js环境</li><li>确保npm可用</li></ul><p><strong>使用方式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx -y @package-name</span><br></pre></td></tr></table></figure><h3 id="4-2-通信方式选择"><a href="#4-2-通信方式选择" class="headerlink" title="4.2 通信方式选择"></a>4.2 通信方式选择</h3><p><strong>选择建议：</strong></p><table><thead><tr><th><strong>场景</strong></th><th><strong>推荐方式</strong></th><th><strong>原因</strong></th></tr></thead><tbody><tr><td><strong>本地开发</strong></td><td>stdio</td><td>速度快，调试方便</td></tr><tr><td><strong>远程服务</strong></td><td>SSE</td><td>配置简单，支持分布式</td></tr><tr><td><strong>混合环境</strong></td><td>根据具体需求选择</td><td>灵活配置</td></tr></tbody></table><h3 id="4-3-平台支持情况"><a href="#4-3-平台支持情况" class="headerlink" title="4.3 平台支持情况"></a>4.3 平台支持情况</h3><p><img src="/images/mcp/%E6%94%AF%E6%8C%81MCP.png" alt="支持MCP"></p><p><strong>主要平台支持：</strong></p><p><strong>官方资源：</strong></p><ul><li>MCP官方资源：<a href="https://github.com/modelcontextprotocol/servers">https://github.com/modelcontextprotocol/servers</a></li><li>MCP热门资源：<a href="https://github.com/punkpeye/awesome-mcp-servers">https://github.com/punkpeye/awesome-mcp-servers</a></li></ul><p><strong>其他平台：</strong></p><ul><li>Glama：<a href="https://glama.ai/mcp/servers">https://glama.ai/mcp/servers</a></li><li>Smithery：<a href="https://smithery.ai/">https://smithery.ai</a></li><li>Cursor：<a href="https://cursor.directory/">https://cursor.directory</a></li><li>MCP.so：<a href="https://mcp.so/zh">https://mcp.so/zh</a></li><li>阿里云百炼：<a href="https://bailian.console.aliyun.com/?tab=mcp#/mcp-market">https://bailian.console.aliyun.com/?tab=mcp#/mcp-market</a></li></ul><h2 id="5-实战案例：数据库操作-🗄️"><a href="#5-实战案例：数据库操作-🗄️" class="headerlink" title="5. 实战案例：数据库操作 🗄️"></a>5. 实战案例：数据库操作 🗄️</h2><h3 id="5-1-项目准备"><a href="#5-1-项目准备" class="headerlink" title="5.1 项目准备"></a>5.1 项目准备</h3><h4 id="5-1-1-查找MCP服务"><a href="#5-1-1-查找MCP服务" class="headerlink" title="5.1.1 查找MCP服务"></a>5.1.1 查找MCP服务</h4><p><strong>步骤1：</strong> 访问Smithery平台</p><ul><li>网址：<a href="https://smithery.ai/server/@f4ww4z/mcp-mysql-server">https://smithery.ai/server/@f4ww4z/mcp-mysql-server</a></li><li>查找MySQL相关的MCP服务</li></ul><p><img src="/images/mcp/mysql_server.png" alt="MySQL服务"></p><h4 id="5-1-2-查看官方文档"><a href="#5-1-2-查看官方文档" class="headerlink" title="5.1.2 查看官方文档"></a>5.1.2 查看官方文档</h4><p><strong>步骤2：</strong> 查询GitHub官方文档<br><strong>GitHub仓库：</strong> <a href="https://github.com/f4ww4z/mcp-mysql-server">exa-labs&#x2F;exa-mcp-server</a><br><img src="/images/mcp/%E6%9F%A5%E8%AF%A2%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3.png" alt="查询官方文档"></p><p>了解如何设置和配置MySQL MCP服务。</p><h3 id="5-2-配置MCP服务"><a href="#5-2-配置MCP服务" class="headerlink" title="5.2 配置MCP服务"></a>5.2 配置MCP服务</h3><h4 id="5-2-1-安装MCP服务"><a href="#5-2-1-安装MCP服务" class="headerlink" title="5.2.1 安装MCP服务"></a>5.2.1 安装MCP服务</h4><p><strong>执行安装命令：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx -y @smithery/cli install @f4ww4z/mcp-mysql-server --client claude</span><br></pre></td></tr></table></figure><h4 id="5-2-2-配置数据库连接"><a href="#5-2-2-配置数据库连接" class="headerlink" title="5.2.2 配置数据库连接"></a>5.2.2 配置数据库连接</h4><p><strong>配置Cursor的MCP：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mysql&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-y&quot;</span><span class="punctuation">,</span> <span class="string">&quot;@f4ww4z/mcp-mysql-server&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;MYSQL_HOST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_host&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MYSQL_USER&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_username&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MYSQL_PASSWORD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_password&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MYSQL_DATABASE&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_database&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-3-功能验证"><a href="#5-3-功能验证" class="headerlink" title="5.3 功能验证"></a>5.3 功能验证</h3><h4 id="5-3-1-查询数据库表"><a href="#5-3-1-查询数据库表" class="headerlink" title="5.3.1 查询数据库表"></a>5.3.1 查询数据库表</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我查下目前数据库中有多少张表</span><br></pre></td></tr></table></figure><p><img src="/images/mcp/%E6%9F%A5%E8%A1%A8%E4%BF%A1%E6%81%AF1png.png" alt="查表信息1"></p><h4 id="5-3-2-插入数据记录"><a href="#5-3-2-插入数据记录" class="headerlink" title="5.3.2 插入数据记录"></a>5.3.2 插入数据记录</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_data_address 这个表插入一条记录</span><br></pre></td></tr></table></figure><p><img src="/images/mcp/%E6%9F%A5%E8%A1%A8%E4%BF%A1%E6%81%AF2.png" alt="查表信息2"></p><h2 id="6-实战案例：Exa-MCP-Server-🔍"><a href="#6-实战案例：Exa-MCP-Server-🔍" class="headerlink" title="6. 实战案例：Exa MCP Server 🔍"></a>6. 实战案例：Exa MCP Server 🔍</h2><h3 id="6-1-Exa-MCP-Server简介"><a href="#6-1-Exa-MCP-Server简介" class="headerlink" title="6.1 Exa MCP Server简介"></a>6.1 Exa MCP Server简介</h3><p>Exa MCP Server是一个强大的MCP服务器，专门为AI助手提供网络搜索和网页爬取功能。它基于Exa AI的搜索能力，为开发者提供了丰富的工具集。</p><p><img src="/images/mcp/exa-mcp-server.png" alt="Exa MCP Server"></p><p><strong>核心特性：</strong></p><ul><li>🔍 <strong>智能网络搜索</strong>：实时网络搜索，优化结果和内容提取</li><li>💻 <strong>代码搜索</strong>：搜索GitHub仓库、文档页面、Stack Overflow等代码资源</li><li>🏢 <strong>公司研究</strong>：全面的公司研究工具，爬取公司网站获取详细信息</li><li>🔗 <strong>LinkedIn搜索</strong>：使用Exa AI搜索LinkedIn上的公司和人员</li><li>🧠 <strong>深度研究</strong>：智能AI研究员，进行复杂问题的深度研究</li></ul><p><strong>GitHub仓库：</strong> <a href="https://github.com/exa-labs/exa-mcp-server">exa-labs&#x2F;exa-mcp-server</a></p><h3 id="6-2-Cursor远程配置"><a href="#6-2-Cursor远程配置" class="headerlink" title="6.2 Cursor远程配置"></a>6.2 Cursor远程配置</h3><h4 id="6-2-1-无需API密钥（推荐）"><a href="#6-2-1-无需API密钥（推荐）" class="headerlink" title="6.2.1 无需API密钥（推荐）"></a>6.2.1 无需API密钥（推荐）</h4><p><strong>最简单的方式：</strong> 直接使用远程MCP服务，无需注册或获取API密钥</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.exa.ai/mcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Remove-Me&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Disable web_search_exa tool if you&#x27;re just coding. To 100% call exa-code, say &#x27;use exa-code&#x27;.&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>配置说明：</strong></p><ul><li><code>type: &quot;http&quot;</code>：使用HTTP通信方式</li><li><code>url</code>：远程MCP服务地址，无需API密钥</li><li><code>headers</code>：可选头部信息，用于禁用特定工具</li></ul><h4 id="6-2-2-使用API密钥（可选）"><a href="#6-2-2-使用API密钥（可选）" class="headerlink" title="6.2.2 使用API密钥（可选）"></a>6.2.2 使用API密钥（可选）</h4><p><strong>如果您需要更高的使用限制或更多功能，可以获取API密钥：</strong></p><p><strong>步骤1：</strong> 访问Exa AI控制台</p><ul><li>网址：<a href="https://dashboard.exa.ai/api-keys">https://dashboard.exa.ai/api-keys</a></li><li>注册账号并获取API密钥</li></ul><p><strong>步骤2：</strong> 在配置中添加API密钥</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.exa.ai/mcp?exaApiKey=YOUR_API_KEY&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Remove-Me&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Disable web_search_exa tool if you&#x27;re just coding. To 100% call exa-code, say &#x27;use exa-code&#x27;.&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-3-指定工具配置"><a href="#6-2-3-指定工具配置" class="headerlink" title="6.2.3 指定工具配置"></a>6.2.3 指定工具配置</h4><p>如果您只想启用特定工具，可以在URL中添加<code>enabledTools</code>参数：</p><p><strong>无需API密钥：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.exa.ai/mcp?enabledTools=%5B%22get_code_context_exa%22%2C%22web_search_exa%22%5D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>使用API密钥：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.exa.ai/mcp?exaApiKey=YOUR_API_KEY&amp;enabledTools=%5B%22get_code_context_exa%22%2C%22web_search_exa%22%5D&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>可用工具列表：</strong></p><ul><li><code>get_code_context_exa</code>：代码搜索</li><li><code>web_search_exa</code>：网络搜索</li><li><code>company_research</code>：公司研究</li><li><code>crawling</code>：网页爬取</li><li><code>linkedin_search</code>：LinkedIn搜索</li><li><code>deep_researcher_start</code>：深度研究开始</li><li><code>deep_researcher_check</code>：深度研究检查</li></ul><h4 id="6-2-4-使用区别说明"><a href="#6-2-4-使用区别说明" class="headerlink" title="6.2.4 使用区别说明"></a>6.2.4 使用区别说明</h4><blockquote><p>⚠️ <strong>重要说明</strong>：Exa官方文档中未明确说明使用API密钥和不使用API密钥的具体区别。以下信息基于官方提供的配置方式。</p></blockquote><p><strong>两种配置方式：</strong></p><p><strong>无需API密钥：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.exa.ai/mcp&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>使用API密钥：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;exa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.exa.ai/mcp?exaApiKey=YOUR_API_KEY&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>建议使用策略：</strong></p><ol><li><strong>先试用免费方式</strong>：直接使用 <code>https://mcp.exa.ai/mcp</code> 进行测试</li><li><strong>根据实际体验决定</strong>：如果使用过程中遇到限制或问题，再考虑获取API密钥</li><li><strong>获取API密钥</strong>：访问 <a href="https://dashboard.exa.ai/api-keys">https://dashboard.exa.ai/api-keys</a> 注册获取</li></ol><blockquote><p>💡 <strong>提示</strong>：由于官方文档未明确说明具体区别，建议用户先尝试无需API密钥的方式，根据实际使用体验来决定是否需要获取API密钥。</p></blockquote><h3 id="6-3-功能验证"><a href="#6-3-功能验证" class="headerlink" title="6.3 功能验证"></a>6.3 功能验证</h3><h4 id="6-3-1-网络搜索功能"><a href="#6-3-1-网络搜索功能" class="headerlink" title="6.3.1 网络搜索功能"></a>6.3.1 网络搜索功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我搜索最新的React 18新特性</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>获取最新的React 18相关信息</li><li>包含官方文档链接和社区讨论</li><li>提供详细的技术特性说明</li></ul><h4 id="6-3-2-代码搜索功能"><a href="#6-3-2-代码搜索功能" class="headerlink" title="6.3.2 代码搜索功能"></a>6.3.2 代码搜索功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exa-code 搜索如何在Python中使用Exa搜索API</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>找到相关的代码示例</li><li>提供完整的API使用教程</li><li>包含最佳实践和注意事项</li></ul><h4 id="6-3-3-公司研究功能"><a href="#6-3-3-公司研究功能" class="headerlink" title="6.3.3 公司研究功能"></a>6.3.3 公司研究功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请研究一下OpenAI公司的基本信息</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>获取公司官网信息</li><li>包含公司简介、产品服务</li><li>提供联系方式和最新动态</li></ul><h4 id="6-3-4-深度研究功能"><a href="#6-3-4-深度研究功能" class="headerlink" title="6.3.4 深度研究功能"></a>6.3.4 深度研究功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开始深度研究：人工智能在医疗领域的应用现状和未来趋势</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>启动智能研究任务</li><li>自动搜索多个相关资源</li><li>生成综合研究报告</li></ul><p><strong>检查研究进度：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">检查深度研究任务的完成情况</span><br></pre></td></tr></table></figure><h2 id="7-实战案例：MCP文件系统服务器-📁"><a href="#7-实战案例：MCP文件系统服务器-📁" class="headerlink" title="7. 实战案例：MCP文件系统服务器 📁"></a>7. 实战案例：MCP文件系统服务器 📁</h2><h3 id="7-1-MCP文件系统服务器简介"><a href="#7-1-MCP文件系统服务器简介" class="headerlink" title="7.1 MCP文件系统服务器简介"></a>7.1 MCP文件系统服务器简介</h3><p>MCP文件系统服务器是一个强大的MCP服务器，专门为AI助手提供本地文件系统操作功能。它允许AI直接读写、管理本地文件和文件夹，极大提升了AI助手在文件管理方面的能力。</p><p><img src="/images/mcp/filesystem-server.png" alt="MCP文件系统服务器"></p><p><strong>核心特性：</strong></p><ul><li>📖 <strong>文件读取</strong>：读取任意文件的内容</li><li>✏️ <strong>文件写入</strong>：创建和编辑文件</li><li>📁 <strong>目录管理</strong>：列出、创建、管理目录</li><li>🔍 <strong>文件搜索</strong>：根据模式搜索文件</li><li>📊 <strong>文件信息</strong>：获取文件详细信息和统计</li><li>🖼️ <strong>图片处理</strong>：读取和处理图片文件</li><li>🔄 <strong>文件操作</strong>：移动、重命名、删除文件</li></ul><p><strong>GitHub仓库：</strong> <a href="https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem">modelcontextprotocol&#x2F;servers&#x2F;filesystem</a></p><h3 id="7-2-Cursor配置"><a href="#7-2-Cursor配置" class="headerlink" title="7.2 Cursor配置"></a>7.2 Cursor配置</h3><h4 id="7-2-1-基础配置"><a href="#7-2-1-基础配置" class="headerlink" title="7.2.1 基础配置"></a>7.2.1 基础配置</h4><p>在Cursor的MCP配置中添加文件系统服务器：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;filesystem&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-y&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@modelcontextprotocol/server-filesystem&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;D:\\&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>配置说明：</strong></p><ul><li><code>command: &quot;npx&quot;</code>：使用npx运行MCP服务器</li><li><code>&quot;-y&quot;</code>：自动确认安装，无需手动确认</li><li><code>&quot;@modelcontextprotocol/server-filesystem&quot;</code>：MCP文件系统服务器包名</li><li><code>&quot;D:\\&quot;</code>：指定允许访问的目录路径</li></ul><h4 id="7-2-2-安全配置建议"><a href="#7-2-2-安全配置建议" class="headerlink" title="7.2.2 安全配置建议"></a>7.2.2 安全配置建议</h4><p><strong>访问整个D盘：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;filesystem&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-y&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@modelcontextprotocol/server-filesystem&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;D:\\&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>限制访问特定目录：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;filesystem&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-y&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@modelcontextprotocol/server-filesystem&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;D:\\Projects&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>多目录访问：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;filesystem&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-y&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@modelcontextprotocol/server-filesystem&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;D:\\Projects&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;D:\\Documents&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;D:\\Downloads&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-3-功能验证"><a href="#7-3-功能验证" class="headerlink" title="7.3 功能验证"></a>7.3 功能验证</h3><h4 id="7-3-1-目录浏览功能"><a href="#7-3-1-目录浏览功能" class="headerlink" title="7.3.1 目录浏览功能"></a>7.3.1 目录浏览功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我列出D盘根目录的所有文件夹</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>显示D盘根目录下的所有文件夹</li><li>包含文件夹名称、大小、修改时间等信息</li><li>提供详细的目录结构</li></ul><h4 id="7-3-2-文件读取功能"><a href="#7-3-2-文件读取功能" class="headerlink" title="7.3.2 文件读取功能"></a>7.3.2 文件读取功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我读取D:\某个文件.txt的内容</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>成功读取指定文件的内容</li><li>显示文件的完整文本内容</li><li>提供文件的基本信息</li></ul><h4 id="7-3-3-文件搜索功能"><a href="#7-3-3-文件搜索功能" class="headerlink" title="7.3.3 文件搜索功能"></a>7.3.3 文件搜索功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我搜索D盘中所有包含&quot;config&quot;的文件</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>找到所有包含”config”关键词的文件</li><li>显示文件路径和匹配内容</li><li>提供搜索结果统计</li></ul><h4 id="7-3-4-文件创建功能"><a href="#7-3-4-文件创建功能" class="headerlink" title="7.3.4 文件创建功能"></a>7.3.4 文件创建功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我在D:\test目录下创建一个名为&quot;example.txt&quot;的文件，内容为&quot;Hello World&quot;</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>成功创建指定文件</li><li>文件内容正确写入</li><li>确认文件创建成功</li></ul><h4 id="7-3-5-目录管理功能"><a href="#7-3-5-目录管理功能" class="headerlink" title="7.3.5 目录管理功能"></a>7.3.5 目录管理功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我在D盘创建一个名为&quot;AI_Projects&quot;的新文件夹</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>成功创建新目录</li><li>确认目录创建成功</li><li>可以继续在该目录下操作</li></ul><h4 id="7-3-6-文件信息获取"><a href="#7-3-6-文件信息获取" class="headerlink" title="7.3.6 文件信息获取"></a>7.3.6 文件信息获取</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我获取D:\某个文件夹的大小和文件数量统计</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>显示文件夹的总大小</li><li>统计文件数量</li><li>提供详细的存储信息</li></ul><h3 id="7-4-实际应用场景"><a href="#7-4-实际应用场景" class="headerlink" title="7.4 实际应用场景"></a>7.4 实际应用场景</h3><h4 id="7-4-1-代码项目管理"><a href="#7-4-1-代码项目管理" class="headerlink" title="7.4.1 代码项目管理"></a>7.4.1 代码项目管理</h4><p><strong>项目文件整理：</strong></p><ul><li>自动整理项目文件结构</li><li>批量重命名文件</li><li>搜索和替换代码内容</li><li>生成项目文档</li></ul><p><strong>代码分析：</strong></p><ul><li>统计代码行数</li><li>分析文件依赖关系</li><li>查找重复代码</li><li>生成代码报告</li></ul><h4 id="7-4-2-文档管理"><a href="#7-4-2-文档管理" class="headerlink" title="7.4.2 文档管理"></a>7.4.2 文档管理</h4><p><strong>文档处理：</strong></p><ul><li>批量处理markdown文件</li><li>自动生成目录结构</li><li>文档格式转换</li><li>内容批量替换</li></ul><p><strong>文件组织：</strong></p><ul><li>按类型分类文件</li><li>创建标准目录结构</li><li>批量移动文件</li><li>清理重复文件</li></ul><h4 id="7-4-3-数据处理"><a href="#7-4-3-数据处理" class="headerlink" title="7.4.3 数据处理"></a>7.4.3 数据处理</h4><p><strong>数据文件操作：</strong></p><ul><li>读取CSV、JSON等数据文件</li><li>批量处理数据文件</li><li>数据格式转换</li><li>生成数据报告</li></ul><p><strong>文件备份：</strong></p><ul><li>自动备份重要文件</li><li>创建文件快照</li><li>同步文件到不同位置</li><li>清理临时文件</li></ul><h3 id="7-5-高级使用技巧"><a href="#7-5-高级使用技巧" class="headerlink" title="7.5 高级使用技巧"></a>7.5 高级使用技巧</h3><h4 id="7-5-1-批量操作"><a href="#7-5-1-批量操作" class="headerlink" title="7.5.1 批量操作"></a>7.5.1 批量操作</h4><p><strong>批量文件处理：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请帮我批量重命名D:\photos目录下所有.jpg文件，添加&quot;2024_&quot;前缀</span><br><span class="line">请帮我统计D:\code目录下所有.py文件的总行数</span><br><span class="line">请帮我查找D:\documents目录下所有包含&quot;重要&quot;的文档</span><br></pre></td></tr></table></figure><h4 id="7-5-2-智能文件管理"><a href="#7-5-2-智能文件管理" class="headerlink" title="7.5.2 智能文件管理"></a>7.5.2 智能文件管理</h4><p><strong>自动分类：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请帮我将D:\downloads目录下的文件按类型分类到不同文件夹</span><br><span class="line">请帮我清理D:\temp目录下超过30天的临时文件</span><br><span class="line">请帮我整理D:\photos目录下的照片，按日期创建子文件夹</span><br></pre></td></tr></table></figure><h4 id="7-5-3-项目自动化"><a href="#7-5-3-项目自动化" class="headerlink" title="7.5.3 项目自动化"></a>7.5.3 项目自动化</h4><p><strong>项目初始化：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请帮我创建一个新的React项目目录结构</span><br><span class="line">请帮我生成项目的README.md文件</span><br><span class="line">请帮我设置项目的.gitignore文件</span><br></pre></td></tr></table></figure><h3 id="7-6-安全注意事项"><a href="#7-6-安全注意事项" class="headerlink" title="7.6 安全注意事项"></a>7.6 安全注意事项</h3><h4 id="7-6-1-权限管理"><a href="#7-6-1-权限管理" class="headerlink" title="7.6.1 权限管理"></a>7.6.1 权限管理</h4><p><strong>重要提醒：</strong></p><ul><li>确保Cursor有足够的文件系统权限</li><li>避免访问系统敏感目录</li><li>定期检查AI对文件的操作记录</li><li>重要文件操作前先备份</li></ul><h4 id="7-6-2-最佳实践"><a href="#7-6-2-最佳实践" class="headerlink" title="7.6.2 最佳实践"></a>7.6.2 最佳实践</h4><p><strong>安全建议：</strong></p><ul><li>从特定项目目录开始，逐步扩大访问范围</li><li>使用相对路径而非绝对路径</li><li>定期清理AI创建的文件</li><li>设置文件操作日志记录</li></ul><h2 id="8-实战案例：MCP-Git服务器-🌿"><a href="#8-实战案例：MCP-Git服务器-🌿" class="headerlink" title="8. 实战案例：MCP Git服务器 🌿"></a>8. 实战案例：MCP Git服务器 🌿</h2><h3 id="8-1-MCP-Git服务器简介"><a href="#8-1-MCP-Git服务器简介" class="headerlink" title="8.1 MCP Git服务器简介"></a>8.1 MCP Git服务器简介</h3><p>MCP Git服务器是一个强大的MCP服务器，专门为AI助手提供Git版本控制操作功能。它允许AI直接与Git仓库交互，执行各种版本控制操作，极大提升了开发者在Git管理方面的效率。</p><p><img src="/images/mcp/git-server.png" alt="MCP Git服务器"></p><p><strong>核心特性：</strong></p><ul><li>📝 <strong>提交管理</strong>：创建、查看、修改、撤销提交</li><li>🌿 <strong>分支管理</strong>：创建、切换、合并、删除分支</li><li>📊 <strong>状态查看</strong>：查看仓库状态、差异、历史记录</li><li>🔄 <strong>远程操作</strong>：推送、拉取、同步远程仓库</li><li>🏷️ <strong>标签管理</strong>：创建、删除、管理版本标签</li><li>📋 <strong>日志分析</strong>：查看提交历史、文件变更记录</li><li>🔍 <strong>差异对比</strong>：比较不同版本间的差异</li></ul><p><strong>GitHub仓库：</strong> <a href="https://github.com/modelcontextprotocol/servers/tree/main/src/git">modelcontextprotocol&#x2F;servers&#x2F;git</a></p><h3 id="8-2-Cursor配置"><a href="#8-2-Cursor配置" class="headerlink" title="8.2 Cursor配置"></a>8.2 Cursor配置</h3><h4 id="8-2-1-基础配置"><a href="#8-2-1-基础配置" class="headerlink" title="8.2.1 基础配置"></a>8.2.1 基础配置</h4><p>在Cursor的MCP配置中添加Git服务器：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;git&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uvx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;mcp-server-git&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>配置说明：</strong></p><ul><li><code>command: &quot;uvx&quot;</code>：使用uvx运行MCP服务器（Python包运行工具）</li><li><code>args: [&quot;mcp-server-git&quot;]</code>：指定要运行的MCP Git服务器包</li></ul><h4 id="8-2-2-前置条件"><a href="#8-2-2-前置条件" class="headerlink" title="8.2.2 前置条件"></a>8.2.2 前置条件</h4><p><strong>安装uvx（如果系统没有）：</strong></p><p><strong>Windows PowerShell：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-ExecutionPolicy</span> ByPass <span class="literal">-c</span> <span class="string">&quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span><br></pre></td></tr></table></figure><p><strong>或者使用pip安装：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uv</span><br></pre></td></tr></table></figure><p><strong>验证安装：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvx --version</span><br></pre></td></tr></table></figure><h4 id="8-2-3-备选配置方案"><a href="#8-2-3-备选配置方案" class="headerlink" title="8.2.3 备选配置方案"></a>8.2.3 备选配置方案</h4><p><strong>Docker安装方式：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;git&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--rm&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-i&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--mount&quot;</span><span class="punctuation">,</span> <span class="string">&quot;type=bind,src=$&#123;workspaceFolder&#125;,dst=/workspace&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mcp/git&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>如果uvx不可用，可以使用npx：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;git&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;-y&quot;</span><span class="punctuation">,</span> <span class="string">&quot;@modelcontextprotocol/server-git&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-功能验证"><a href="#8-3-功能验证" class="headerlink" title="8.3 功能验证"></a>8.3 功能验证</h3><h4 id="8-3-1-仓库状态查看"><a href="#8-3-1-仓库状态查看" class="headerlink" title="8.3.1 仓库状态查看"></a>8.3.1 仓库状态查看</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我查看当前Git仓库的状态</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>显示当前分支信息</li><li>列出已修改、已暂存、未跟踪的文件</li><li>提供仓库状态概览</li></ul><h4 id="8-3-2-分支管理功能"><a href="#8-3-2-分支管理功能" class="headerlink" title="8.3.2 分支管理功能"></a>8.3.2 分支管理功能</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我列出所有分支</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>显示本地和远程分支列表</li><li>标识当前所在分支</li><li>提供分支详细信息</li></ul><h4 id="8-3-3-提交历史查看"><a href="#8-3-3-提交历史查看" class="headerlink" title="8.3.3 提交历史查看"></a>8.3.3 提交历史查看</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我查看最近的提交历史</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>显示最近的提交记录</li><li>包含提交哈希、作者、时间、提交信息</li><li>提供提交的详细变更信息</li></ul><h4 id="8-3-4-文件差异对比"><a href="#8-3-4-文件差异对比" class="headerlink" title="8.3.4 文件差异对比"></a>8.3.4 文件差异对比</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我查看当前工作区与上次提交的差异</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>显示文件的具体变更内容</li><li>标识新增、删除、修改的行</li><li>提供详细的差异对比</li></ul><h4 id="8-3-5-提交操作"><a href="#8-3-5-提交操作" class="headerlink" title="8.3.5 提交操作"></a>8.3.5 提交操作</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我提交所有更改，提交信息为&quot;添加新功能&quot;</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>成功暂存所有更改</li><li>创建新的提交记录</li><li>确认提交成功</li></ul><h4 id="8-3-6-分支创建和切换"><a href="#8-3-6-分支创建和切换" class="headerlink" title="8.3.6 分支创建和切换"></a>8.3.6 分支创建和切换</h4><p><strong>测试命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请帮我创建一个名为&quot;feature-new&quot;的新分支并切换到该分支</span><br></pre></td></tr></table></figure><p><strong>预期结果：</strong></p><ul><li>成功创建新分支</li><li>切换到新分支</li><li>确认分支操作成功</li></ul><h3 id="8-4-实际应用场景"><a href="#8-4-实际应用场景" class="headerlink" title="8.4 实际应用场景"></a>8.4 实际应用场景</h3><h4 id="8-4-1-代码开发流程"><a href="#8-4-1-代码开发流程" class="headerlink" title="8.4.1 代码开发流程"></a>8.4.1 代码开发流程</h4><p><strong>日常开发操作：</strong></p><ul><li>自动生成规范的提交信息</li><li>智能分支命名建议</li><li>代码变更影响分析</li><li>自动解决简单冲突</li></ul><p><strong>代码审查：</strong></p><ul><li>生成变更摘要报告</li><li>分析代码质量指标</li><li>检查代码规范合规性</li><li>提供改进建议</li></ul><h4 id="8-4-2-版本管理"><a href="#8-4-2-版本管理" class="headerlink" title="8.4.2 版本管理"></a>8.4.2 版本管理</h4><p><strong>发布管理：</strong></p><ul><li>自动创建版本标签</li><li>生成发布说明</li><li>管理发布分支</li><li>版本回滚操作</li></ul><p><strong>分支策略：</strong></p><ul><li>智能合并策略建议</li><li>分支保护规则设置</li><li>代码审查流程管理</li><li>发布流程自动化</li></ul><h4 id="8-4-3-团队协作"><a href="#8-4-3-团队协作" class="headerlink" title="8.4.3 团队协作"></a>8.4.3 团队协作</h4><p><strong>协作流程：</strong></p><ul><li>同步团队代码变更</li><li>管理Pull Request</li><li>代码审查流程优化</li><li>冲突解决建议</li></ul><p><strong>项目管理：</strong></p><ul><li>项目进度跟踪</li><li>代码贡献统计</li><li>团队协作分析</li><li>项目健康度监控</li></ul><h3 id="8-5-高级使用技巧"><a href="#8-5-高级使用技巧" class="headerlink" title="8.5 高级使用技巧"></a>8.5 高级使用技巧</h3><h4 id="8-5-1-智能提交"><a href="#8-5-1-智能提交" class="headerlink" title="8.5.1 智能提交"></a>8.5.1 智能提交</h4><p><strong>自动提交信息生成：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请帮我分析代码变更并生成合适的提交信息</span><br><span class="line">请帮我将多个小提交合并为一个有意义的提交</span><br><span class="line">请帮我修改最后一次提交的信息</span><br></pre></td></tr></table></figure><h4 id="8-5-2-分支管理"><a href="#8-5-2-分支管理" class="headerlink" title="8.5.2 分支管理"></a>8.5.2 分支管理</h4><p><strong>智能分支操作：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请帮我创建一个基于main分支的新功能分支</span><br><span class="line">请帮我将feature分支合并到main分支</span><br><span class="line">请帮我清理已合并的本地分支</span><br><span class="line">请帮我同步远程分支信息</span><br></pre></td></tr></table></figure><h4 id="8-5-3-历史分析"><a href="#8-5-3-历史分析" class="headerlink" title="8.5.3 历史分析"></a>8.5.3 历史分析</h4><p><strong>代码历史分析：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请帮我分析某个文件的修改历史</span><br><span class="line">请帮我找出引入bug的提交</span><br><span class="line">请帮我统计代码贡献情况</span><br><span class="line">请帮我生成项目变更报告</span><br></pre></td></tr></table></figure><h3 id="8-6-安全注意事项"><a href="#8-6-安全注意事项" class="headerlink" title="8.6 安全注意事项"></a>8.6 安全注意事项</h3><h4 id="8-6-1-操作安全"><a href="#8-6-1-操作安全" class="headerlink" title="8.6.1 操作安全"></a>8.6.1 操作安全</h4><p><strong>重要提醒：</strong></p><ul><li>谨慎使用强制推送操作</li><li>重要操作前先备份仓库</li><li>避免在共享分支上直接操作</li><li>定期检查Git操作日志</li></ul><h4 id="8-6-2-最佳实践"><a href="#8-6-2-最佳实践" class="headerlink" title="8.6.2 最佳实践"></a>8.6.2 最佳实践</h4><p><strong>安全建议：</strong></p><ul><li>使用描述性的提交信息</li><li>保持分支命名规范</li><li>定期同步远程仓库</li><li>设置合适的Git钩子</li></ul><p><strong>权限管理：</strong></p><ul><li>确保有足够的仓库权限</li><li>避免在敏感仓库中使用</li><li>定期检查访问权限</li><li>使用SSH密钥认证</li></ul><h3 id="8-7-故障排除"><a href="#8-7-故障排除" class="headerlink" title="8.7 故障排除"></a>8.7 故障排除</h3><h4 id="8-7-1-常见问题"><a href="#8-7-1-常见问题" class="headerlink" title="8.7.1 常见问题"></a>8.7.1 常见问题</h4><p><strong>配置问题：</strong></p><ul><li>uvx命令不可用：安装uv或使用npx备选方案</li><li>权限不足：检查Git仓库访问权限</li><li>网络问题：确保可以访问包仓库</li><li>路径错误：验证Git仓库路径</li></ul><h4 id="8-7-2-调试技巧"><a href="#8-7-2-调试技巧" class="headerlink" title="8.7.2 调试技巧"></a>8.7.2 调试技巧</h4><p><strong>问题排查：</strong></p><ul><li>检查Cursor的MCP服务器状态</li><li>验证Git和Python环境</li><li>测试基本的Git命令</li><li>查看MCP服务器日志</li></ul><p><strong>性能优化：</strong></p><ul><li>避免在大型仓库中频繁操作</li><li>使用合适的Git配置</li><li>定期清理Git对象</li><li>优化仓库大小</li></ul><h2 id="9-最佳实践与进阶技巧-🚀"><a href="#9-最佳实践与进阶技巧-🚀" class="headerlink" title="9. 最佳实践与进阶技巧 🚀"></a>9. 最佳实践与进阶技巧 🚀</h2><h3 id="9-1-性能优化"><a href="#9-1-性能优化" class="headerlink" title="9.1 性能优化"></a>9.1 性能优化</h3><h4 id="9-1-1-连接池管理"><a href="#9-1-1-连接池管理" class="headerlink" title="9.1.1 连接池管理"></a>9.1.1 连接池管理</h4><ul><li>合理配置连接池大小</li><li>及时释放不用的连接</li><li>监控连接使用情况</li></ul><h4 id="9-1-2-缓存策略"><a href="#9-1-2-缓存策略" class="headerlink" title="9.1.2 缓存策略"></a>9.1.2 缓存策略</h4><ul><li>对频繁访问的数据进行缓存</li><li>设置合理的缓存过期时间</li><li>使用分布式缓存提高性能</li></ul><h4 id="9-1-3-异步处理"><a href="#9-1-3-异步处理" class="headerlink" title="9.1.3 异步处理"></a>9.1.3 异步处理</h4><ul><li>使用异步方式处理耗时操作</li><li>避免阻塞主线程</li><li>合理设置超时时间</li></ul><h3 id="9-2-安全考虑"><a href="#9-2-安全考虑" class="headerlink" title="9.2 安全考虑"></a>9.2 安全考虑</h3><h4 id="9-2-1-数据安全"><a href="#9-2-1-数据安全" class="headerlink" title="9.2.1 数据安全"></a>9.2.1 数据安全</h4><ul><li>敏感信息加密存储</li><li>使用HTTPS传输</li><li>定期更新API密钥</li></ul><h4 id="9-2-2-访问控制"><a href="#9-2-2-访问控制" class="headerlink" title="9.2.2 访问控制"></a>9.2.2 访问控制</h4><ul><li>实施严格的权限管理</li><li>使用OAuth等标准认证</li><li>记录所有访问日志</li></ul><h4 id="9-2-3-输入验证"><a href="#9-2-3-输入验证" class="headerlink" title="9.2.3 输入验证"></a>9.2.3 输入验证</h4><ul><li>验证所有输入参数</li><li>防止SQL注入等攻击</li><li>限制输入长度和格式</li></ul><h3 id="9-3-故障排除"><a href="#9-3-故障排除" class="headerlink" title="9.3 故障排除"></a>9.3 故障排除</h3><h4 id="9-3-1-常见问题"><a href="#9-3-1-常见问题" class="headerlink" title="9.3.1 常见问题"></a>9.3.1 常见问题</h4><ul><li>连接超时：检查网络和服务器状态</li><li>认证失败：验证API密钥和权限</li><li>数据格式错误：检查数据结构和类型</li></ul><h4 id="9-3-2-调试技巧"><a href="#9-3-2-调试技巧" class="headerlink" title="9.3.2 调试技巧"></a>9.3.2 调试技巧</h4><ul><li>启用详细日志记录</li><li>使用测试环境验证</li><li>分步骤排查问题</li></ul><h4 id="9-3-3-监控告警"><a href="#9-3-3-监控告警" class="headerlink" title="9.3.3 监控告警"></a>9.3.3 监控告警</h4><ul><li>设置关键指标监控</li><li>配置异常告警机制</li><li>定期检查系统健康状态</li></ul><h2 id="📚-延伸阅读"><a href="#📚-延伸阅读" class="headerlink" title="📚 延伸阅读"></a>📚 延伸阅读</h2><ul><li><a href="/cursor-tutorial/">Cursor使用教程</a> - 学习AI编程助手的使用</li><li><a href="/git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/">Git操作指南</a> - 掌握版本控制基础</li><li><a href="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/">函数式编程</a> - 提升代码质量和可维护性</li></ul><h2 id="💡-学习建议"><a href="#💡-学习建议" class="headerlink" title="💡 学习建议"></a>💡 学习建议</h2><ol><li><p><strong>循序渐进</strong></p><ul><li>先理解MCP的基本概念</li><li>再学习通信机制和协议规范</li><li>最后进行实战项目练习</li></ul></li><li><p><strong>实践为主</strong></p><ul><li>多动手配置和测试</li><li>从简单的本地服务开始</li><li>逐步尝试复杂的远程服务</li></ul></li><li><p><strong>关注更新</strong></p><ul><li>定期查看官方文档更新</li><li>关注新平台的支持情况</li><li>参与社区讨论和分享</li></ul></li><li><p><strong>安全第一</strong></p><ul><li>始终考虑安全性</li><li>使用最佳实践</li><li>定期进行安全审计</li></ul></li></ol><h2 id="🔗-相关资源"><a href="#🔗-相关资源" class="headerlink" title="🔗 相关资源"></a>🔗 相关资源</h2><ol><li><p><strong>官方资源</strong></p><ul><li><a href="https://modelcontextprotocol.io/">MCP官方网站</a></li><li><a href="https://github.com/modelcontextprotocol">GitHub仓库</a></li><li><a href="https://modelcontextprotocol.io/docs">官方文档</a></li></ul></li><li><p><strong>社区资源</strong></p><ul><li><a href="https://discord.gg/modelcontextprotocol">Discord社区</a></li><li><a href="https://www.reddit.com/r/MCP/">Reddit论坛</a></li><li><a href="https://stackoverflow.com/questions/tagged/mcp">Stack Overflow</a></li></ul></li><li><p><strong>中文资源</strong></p><ul><li><a href="https://juejin.cn/tag/MCP">掘金专栏</a></li><li><a href="https://www.zhihu.com/topic/mcp">知乎话题</a></li><li><a href="https://search.bilibili.com/all?keyword=mcp%20ai">B站教程</a></li></ul></li></ol><h2 id="📝-更新记录"><a href="#📝-更新记录" class="headerlink" title="📝 更新记录"></a>📝 更新记录</h2><ul><li>2025-10-04: 初始版本发布</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> AI编程 </tag>
            
            <tag> MCP </tag>
            
            <tag> 智能体 </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursor使用教程 - AI编程助手从入门到精通</title>
      <link href="//cursor-tutorial/"/>
      <url>//cursor-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="Cursor使用教程-AI编程助手从入门到精通-🚀"><a href="#Cursor使用教程-AI编程助手从入门到精通-🚀" class="headerlink" title="Cursor使用教程 - AI编程助手从入门到精通 🚀"></a>Cursor使用教程 - AI编程助手从入门到精通 🚀</h1><blockquote><p>简单工作不想做？复杂工作不会做？出现错误不会解决？后端程序员不会写前端？前端程序员不会写后端？可爱的大学生要写期末作业？Cursor来帮你！本教程将带您从零开始，全面掌握这款革命性的AI编程助手。📚</p></blockquote><p><img src="/images/cursor/1749179465178.png" alt="Cursor概览"></p><h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><ul><li><p><a href="#1-cursor%E7%AE%80%E4%BB%8B%E4%B8%8E%E6%A6%82%E8%BF%B0">1. Cursor简介与概述</a></p><ul><li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AFcursor">1.1 什么是Cursor</a></li><li><a href="#12-%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E7%89%B9%E7%82%B9">1.2 核心功能特点</a></li><li><a href="#13-%E5%AF%B9%E6%AF%94%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7">1.3 对比其他工具</a></li></ul></li><li><p><a href="#2-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE">2. 安装与配置</a></p><ul><li><a href="#21-%E5%AE%89%E8%A3%85%E5%92%8C%E7%99%BB%E5%BD%95-%F0%9F%92%BF">2.1 安装和登录 💿</a></li><li><a href="#22-%E6%97%A0%E9%99%90%E7%BB%AD%E6%9D%AF%E6%8A%80%E5%B7%A7-%E2%99%BE%EF%B8%8F">2.2 无限续杯技巧 ♾️</a></li><li><a href="#23-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E-%E2%9A%99%EF%B8%8F">2.3 基础配置说明 ⚙️</a></li><li><a href="#24-vs-code%E9%85%8D%E7%BD%AE%E8%BF%81%E7%A7%BB-%F0%9F%94%84">2.4 VS Code配置迁移 🔄</a></li><li><a href="#25-java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-%E2%98%95">2.5 Java环境配置 ☕</a></li></ul></li><li><p><a href="#3-%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD">3. 三大核心功能</a></p><ul><li><a href="#31-tab%E9%94%AE%E6%99%BA%E8%83%BD%E8%A1%A5%E5%85%A8-%E2%8C%A8%EF%B8%8F">3.1 Tab键智能补全 ⌨️</a></li><li><a href="#32-chat%E5%AF%B9%E8%AF%9D%E6%A8%A1%E5%BC%8F-%F0%9F%92%AC">3.2 Chat对话模式 💬</a></li><li><a href="#33-ctrlk%E5%86%85%E8%81%94%E7%BC%96%E8%BE%91-%E2%9C%8F%EF%B8%8F">3.3 Ctrl+K内联编辑 ✏️</a></li></ul></li><li><p><a href="#4-%E7%B2%BE%E5%87%86%E4%B8%8A%E4%B8%8B%E6%96%87%E6%8C%87%E5%AE%9A">4. 精准上下文指定</a></p><ul><li><a href="#41-%E4%BB%A3%E7%A0%81%E5%BA%93%E7%B4%A2%E5%BC%95-%F0%9F%93%9A">4.1 代码库索引 📚</a></li><li><a href="#42-rules%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE-%F0%9F%93%8B">4.2 Rules规则配置 📋</a></li><li><a href="#43-%E7%AC%A6%E5%8F%B7%E4%BD%BF%E7%94%A8-%F0%9F%94%8D">4.3 @符号使用 🔍</a></li></ul></li><li><p><a href="#5-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8Bchrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91">5. 实战案例：Chrome插件开发</a></p><ul><li><a href="#51-%E6%8F%92%E4%BB%B6%E8%AE%BE%E8%AE%A1-%F0%9F%8E%A8">5.1 插件设计 🎨</a></li><li><a href="#52-%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0-%E2%9A%A1">5.2 功能实现 ⚡</a></li><li><a href="#53-%E8%B0%83%E8%AF%95%E4%B8%8E%E5%8F%91%E5%B8%83-%F0%9F%9A%80">5.3 调试与发布 🚀</a></li></ul></li></ul><h2 id="1-Cursor简介与概述-🎯"><a href="#1-Cursor简介与概述-🎯" class="headerlink" title="1. Cursor简介与概述 🎯"></a>1. Cursor简介与概述 🎯</h2><h3 id="1-1-什么是Cursor"><a href="#1-1-什么是Cursor" class="headerlink" title="1.1 什么是Cursor"></a>1.1 什么是Cursor</h3><p>Cursor 是一款功能强大的 AI 优先代码编辑器，可增强我们的开发工作流程。主要提供三个核心方向，这些功能可以无缝地协同工作，从而提高工作效率：</p><ul><li>🤖 <strong>深度集成AI模型</strong>：不是简单地接入模型，而是让AI充当了编译器的核心交互方式。支持代码块对话、项目级对话、模型自由选择。</li><li>💬 <strong>强上下文理解</strong>：可以自动识别项目文件、代码块、错误信息等等，提供更直观准确的AI修改能力。</li><li>📚 <strong>对话式开发体验</strong>：仅需用自然语言沟通，Cursor就会根据指令完成布置的任务，使用者可以轻松扮演产品经理，让Cursor理解你的命令自行工作。</li></ul><h3 id="1-2-核心功能特点"><a href="#1-2-核心功能特点" class="headerlink" title="1.2 核心功能特点"></a>1.2 核心功能特点</h3><ol><li><p><strong>智能代码补全（Tab）</strong></p><ul><li>单行&#x2F;多行代码智能补全</li><li>代码重构和优化建议</li><li>多行协同优化能力</li><li>智能光标位置预测</li></ul></li><li><p><strong>AI对话助手（Chat）</strong></p><ul><li>Agent代理模式：自主探索和修改代码</li><li>Ask问答模式：获取解释和建议</li><li>Manual手动模式：精准编辑控制</li><li>支持多种上下文引用</li></ul></li><li><p><strong>内联编辑（Ctrl+K）</strong></p><ul><li>快速代码生成和修改</li><li>自然语言描述转代码</li><li>终端命令智能生成</li><li>实时编辑预览</li></ul></li></ol><h3 id="1-3-对比其他工具"><a href="#1-3-对比其他工具" class="headerlink" title="1.3 对比其他工具"></a>1.3 对比其他工具</h3><p><strong>对比VS Code</strong></p><ul><li>基于Visual Studio Code打造而成的AI编程工具</li><li>界面和基础操作与VS Code高度相似，无缝衔接</li><li>增加了强大的AI功能，提升开发效率</li></ul><p><strong>对比JetBrains IDEA</strong></p><ul><li>提供AI驱动的现代编码体验</li><li>可以取代JetBrains IDE的大部分功能</li><li>更轻量级，启动更快，资源占用更少</li></ul><p><strong>对比其他AI工具</strong></p><ul><li>原生集成，无需额外配置</li><li>支持多种编程语言和框架</li><li>强大的上下文管理能力</li><li>灵活的规则配置系统</li></ul><h2 id="2-安装与配置-⚙️"><a href="#2-安装与配置-⚙️" class="headerlink" title="2. 安装与配置 ⚙️"></a>2. 安装与配置 ⚙️</h2><h3 id="2-1-安装和登录-💿"><a href="#2-1-安装和登录-💿" class="headerlink" title="2.1 安装和登录 💿"></a>2.1 安装和登录 💿</h3><h4 id="2-1-1-安装步骤"><a href="#2-1-1-安装步骤" class="headerlink" title="2.1.1 安装步骤"></a>2.1.1 安装步骤</h4><ol><li><strong>下载安装包</strong><ul><li>访问 <a href="https://cursor.com/">cursor.com</a> 并点击 “下载” 按钮</li><li>选择对应操作系统版本：</li></ul></li></ol><ul><li>Windows: cursor-setup.exe</li><li>macOS: cursor.dmg</li><li>Linux: cursor.AppImage</li></ul><ol start="2"><li><strong>安装过程</strong><ul><li>运行安装程序并等待安装完成</li><li>通过桌面快捷方式或从应用菜单启动Cursor</li></ul></li></ol><h4 id="2-1-2-登录账号"><a href="#2-1-2-登录账号" class="headerlink" title="2.1.2 登录账号"></a>2.1.2 登录账号</h4><ol><li><p><strong>账号注册</strong></p><ul><li>点击 “注册” 或 “登录” 按钮</li><li>可以选择使用邮件，或者注册Google或GitHub账号</li><li>新用户将获得14天免费试用期</li></ul></li><li><p><strong>账号验证</strong></p><ul><li>验证邮箱地址</li><li>完成初始设置向导</li><li>开始使用Cursor</li></ul></li></ol><h3 id="2-2-基础配置说明-⚙️"><a href="#2-2-基础配置说明-⚙️" class="headerlink" title="2.2 基础配置说明 ⚙️"></a>2.2 基础配置说明 ⚙️</h3><h4 id="2-2-1-配置入口对比"><a href="#2-2-1-配置入口对比" class="headerlink" title="2.2.1 配置入口对比"></a>2.2.1 配置入口对比</h4><table><thead><tr><th><strong>对比项</strong></th><th><strong>Cursor Settings</strong></th><th><strong>Editor Settings</strong></th></tr></thead><tbody><tr><td><strong>功能定位</strong></td><td>管理 AI 相关功能和 Cursor 特有设置</td><td>调整编辑器基础行为和外观</td></tr><tr><td><strong>继承性</strong></td><td>与 VS Code 差异较大（Cursor 独有功能）</td><td>大部分继承自 VS Code（如主题设置）</td></tr><tr><td><strong>影响范围</strong></td><td>影响 AI 代码生成、分析、对话的效果</td><td>影响代码编辑体验（如排版、颜色）</td></tr><tr><td><strong>典型配置示例</strong></td><td>调整 AI 模型参数、代码库索引路径</td><td>修改字体、启用自动保存、更改主题</td></tr></tbody></table><h4 id="2-2-2-Cursor-AI相关设置"><a href="#2-2-2-Cursor-AI相关设置" class="headerlink" title="2.2.2 Cursor AI相关设置"></a>2.2.2 Cursor AI相关设置</h4><p>通过齿轮图标或 <code>Cmd/Ctrl + Shift + J</code> 开启Cursor设置，可进行以下配置：</p><ol><li><p><strong>General（常规）</strong></p><ul><li>账户相关设置和配置同步</li><li>VS Code配置导入</li><li>隐私配置管理</li></ul></li><li><p><strong>Features（功能）</strong></p><ul><li>AI代码补全开关</li><li>对话模式（Ask、Edit、Agent）设置</li><li>功能参数微调</li></ul></li><li><p><strong>Models（模型）</strong></p><ul><li>AI模型选择（Claude 3.5 Sonnet）</li><li>API Key配置</li><li>模型参数调整</li></ul></li><li><p><strong>Rules（规则）</strong></p><ul><li>代码检查规则</li><li>代码格式规范</li><li>操作规则设置</li></ul></li><li><p><strong>Indexing（索引)</strong></p><ul><li>代码库索引路径</li><li>排除规则设置</li><li>索引优化配置</li></ul></li></ol><h4 id="2-2-3-编辑器基础设置"><a href="#2-2-3-编辑器基础设置" class="headerlink" title="2.2.3 编辑器基础设置"></a>2.2.3 编辑器基础设置</h4><ol><li><p><strong>访问设置</strong></p><ul><li>通过命令面板：<code>Cmd/Ctrl + Shift + P</code></li><li>输入：”Preferences: Open Settings (UI)”</li><li>或直接使用快捷键：<code>Cmd/Ctrl + ,</code></li></ul></li><li><p><strong>常用设置项</strong><br><img src="/images/cursor/1748935489544.png" alt="编辑器设置"></p><ul><li>主题和外观</li><li>字体和颜色</li><li>编辑器行为</li><li>文件处理</li></ul></li><li><p><strong>设置作用域</strong></p><ul><li><strong>User（用户）</strong>：全局性设置，适用于所有工作空间</li><li><strong>Workspace（工作空间）</strong>：仅对当前项目生效</li></ul></li></ol><h3 id="2-3-VS-Code配置迁移-🔄"><a href="#2-3-VS-Code配置迁移-🔄" class="headerlink" title="2.3 VS Code配置迁移 🔄"></a>2.3 VS Code配置迁移 🔄</h3><h4 id="2-3-1-一键导入配置"><a href="#2-3-1-一键导入配置" class="headerlink" title="2.3.1 一键导入配置"></a>2.3.1 一键导入配置</h4><ol><li><p><strong>导入步骤</strong></p><ul><li>打开Cursor设置（<code>Cmd/Ctrl + Shift + J</code>）</li><li>导航到：常规 &gt; 帐户</li><li>点击”VS Code Import”下的”导入”按钮<br><img src="/images/cursor/1748919880700.png" alt="VS Code导入"></li></ul></li><li><p><strong>导入内容</strong></p><ul><li>Extensions（扩展）</li><li>Themes（主题）</li><li>Settings（设置）</li><li>Keybindings（键绑定）</li></ul></li></ol><blockquote><p><strong>注意</strong>：并非所有VS Code扩展都与Cursor兼容。一些依赖VS Code特定API的插件可能导致导入失败。</p></blockquote><h4 id="2-3-2-手动配置迁移"><a href="#2-3-2-手动配置迁移" class="headerlink" title="2.3.2 手动配置迁移"></a>2.3.2 手动配置迁移</h4><ol><li><p><strong>导出VS Code配置</strong></p><ul><li>打开命令面板：<code>Cmd/Ctrl + Shift + P</code></li><li>搜索：”Preferences: Open Profiles (UI)”</li><li>选择要导出的配置文件</li><li>导出到本地或GitHub Gist</li></ul></li><li><p><strong>导入到Cursor</strong></p><ul><li>打开命令面板：<code>Cmd/Ctrl + Shift + P</code></li><li>搜索：”Preferences: Open Profiles (UI)”</li><li>选择”Import Profile”</li><li>选择本地文件或粘贴Gist URL</li></ul></li></ol><h3 id="2-4-Java环境配置-☕"><a href="#2-4-Java环境配置-☕" class="headerlink" title="2.4 Java环境配置 ☕"></a>2.4 Java环境配置 ☕</h3><h4 id="2-4-1-环境配置方式"><a href="#2-4-1-环境配置方式" class="headerlink" title="2.4.1 环境配置方式"></a>2.4.1 环境配置方式</h4><ol><li><p><strong>自动读取配置</strong></p><ul><li>系统环境变量中的<code>JAVA_HOME</code>和<code>MAVEN_HOME</code></li><li>自动识别并应用配置</li><li>用于代码编译和项目构建</li></ul></li><li><p><strong>手动配置</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;java.home&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/Program Files/Java/jdk-17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;java.configuration.maven.userSettings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:/maven/apache-maven-3.8.8-bin/apache-maven-3.8.8/conf/settings.xml&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-4-2-Java开发插件"><a href="#2-4-2-Java开发插件" class="headerlink" title="2.4.2 Java开发插件"></a>2.4.2 Java开发插件</h4><ol><li><p><strong>安装方式</strong><br><img src="/images/cursor/1748938160832.png" alt="Java插件"></p><ul><li>按<code>Ctrl + Shift + X</code>打开扩展面板</li><li>搜索并安装”Extension Pack for Java”</li></ul></li><li><p><strong>包含插件</strong></p><ul><li>Language Support for Java(TM) by Red Hat</li><li>Debugger for Java</li><li>Maven for Java</li><li>Test Runner for Java</li><li>Project Manager for Java</li><li>Gradle for Java</li></ul></li></ol><h2 id="3-三大核心功能-🚀"><a href="#3-三大核心功能-🚀" class="headerlink" title="3. 三大核心功能 🚀"></a>3. 三大核心功能 🚀</h2><h3 id="3-1-Tab键智能补全-⌨️"><a href="#3-1-Tab键智能补全-⌨️" class="headerlink" title="3.1 Tab键智能补全 ⌨️"></a>3.1 Tab键智能补全 ⌨️</h3><h4 id="3-1-1-功能概述"><a href="#3-1-1-功能概述" class="headerlink" title="3.1.1 功能概述"></a>3.1.1 功能概述</h4><p>Tab键在Cursor中具有强大的代码自动补全功能，基于选定模型，能根据代码上下文自动预测并生成代码补全建议和代码修复重构。</p><blockquote><p>提示：<code>Tab</code>键接受建议，<code>Esc</code>键拒绝建议。要逐字部分接受建议，请按<code>Ctrl/⌘ + →</code>。</p></blockquote><h4 id="3-1-2-主要功能"><a href="#3-1-2-主要功能" class="headerlink" title="3.1.2 主要功能"></a>3.1.2 主要功能</h4><ol><li><p><strong>单行&#x2F;多行代码补全</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求：写一个工具类计算数组平均值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 按tab会完成补全</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补全后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        System.out.println(average(nums));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) sum / nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>智能代码重写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Stream重构</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">List&lt;Integer&gt; evenNumbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : numbers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        evenNumbers.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; evenNumbers = numbers.stream()</span><br><span class="line">    .filter(num -&gt; num % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></li><li><p><strong>多行协同优化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> count; <span class="comment">// 普通变量</span></span><br><span class="line">String name; <span class="comment">// 姓名</span></span><br><span class="line"><span class="type">boolean</span> isValid; <span class="comment">// 是否有效</span></span><br><span class="line"><span class="type">double</span> price; <span class="comment">// 价格</span></span><br><span class="line"><span class="comment">//tab 会继续联想变量类型</span></span><br></pre></td></tr></table></figure></li><li><p><strong>光标位置预测</strong><br><img src="/images/cursor/1749222927512.png" alt="光标预测"></p></li></ol><h4 id="3-1-3-Tab相关配置"><a href="#3-1-3-Tab相关配置" class="headerlink" title="3.1.3 Tab相关配置"></a>3.1.3 Tab相关配置</h4><p>配置位置：<code>cursor settings &gt; features &gt; tab</code></p><ol><li><p><strong>基础功能开关</strong></p><ul><li>启用&#x2F;禁用Cursor Tab功能</li><li>控制是否在注释中提供建议</li><li>显示空白建议的控制</li></ul></li><li><p><strong>接受方式设置</strong></p><ul><li>完整接受：<code>Tab</code>键</li><li>部分接受：<code>Ctrl+→</code></li><li>拒绝建议：<code>Esc</code>键</li></ul></li><li><p><strong>特殊功能配置</strong></p><ul><li>TypeScript自动导入</li><li>Python自动导入（测试版）</li><li>空白建议显示控制</li></ul></li></ol><h3 id="3-2-Chat对话模式-💬"><a href="#3-2-Chat对话模式-💬" class="headerlink" title="3.2 Chat对话模式 💬"></a>3.2 Chat对话模式 💬</h3><h4 id="3-2-1-功能概述"><a href="#3-2-1-功能概述" class="headerlink" title="3.2.1 功能概述"></a>3.2.1 功能概述</h4><p>Chat是Cursor的AI助手，位于侧边栏中，可让您通过自然语言与代码库进行交互。您可以提出问题、请求代码编辑、获取终端命令建议等。</p><p><img src="/images/cursor/overview.mp4" alt="Chat概览"></p><p><strong>主要功能：</strong></p><ul><li>深入理解代码库并进行修改</li><li>帮助重构和优化代码</li><li>从零开始搭建项目</li><li>错误定位和修复</li></ul><h4 id="3-2-2-两种对话模式"><a href="#3-2-2-两种对话模式" class="headerlink" title="3.2.2 两种对话模式"></a>3.2.2 两种对话模式</h4><ol><li><p><strong>Agent代理模式（默认）</strong><br><img src="/images/cursor/agent.png" alt="Agent模式"></p><ul><li>自主探索和理解项目代码</li><li>可以直接进行代码修改</li><li>启用所有工具权限</li><li>识别完整项目结构</li></ul></li><li><p><strong>Ask问答模式</strong><br><img src="/images/cursor/ask.png" alt="Ask模式"></p><ul><li>“只读”模式，不修改代码</li><li>获取代码解释和建议</li><li>理解项目结构</li><li>适合学习和探索</li></ul></li></ol><h4 id="3-2-3-使用技巧"><a href="#3-2-3-使用技巧" class="headerlink" title="3.2.3 使用技巧"></a>3.2.3 使用技巧</h4><ol><li><p><strong>快速访问</strong></p><ul><li>使用<code>⌘+L</code>（Mac）或<code>Ctrl+L</code>（Windows&#x2F;Linux）</li><li>使用自然语言描述需求</li><li>提供清晰的上下文信息</li></ul></li><li><p><strong>代码编辑选项</strong></p><ul><li><p><strong>Review</strong>：查看差异<br><img src="/images/cursor/1749005624183.png" alt="差异查看"></p></li><li><p><strong>Apply</strong>：应用更改<br><img src="/images/cursor/1749005659532.png" alt="应用更改"></p></li><li><p><strong>Accept&#x2F;Reject</strong>：确认或放弃<br><img src="/images/cursor/1749005825535.png" alt="确认修改"></p></li></ul></li><li><p><strong>历史和检查点</strong></p><ul><li><p>查看历史记录<br><img src="/images/cursor/1749006388841.png" alt="历史记录"></p></li><li><p>创建新会话<br><img src="/images/cursor/1749006447983.png" alt="新会话"></p></li><li><p>恢复检查点<br><img src="/images/cursor/1749006156466.png" alt="检查点"></p></li></ul></li></ol><h4 id="3-2-4-配置说明"><a href="#3-2-4-配置说明" class="headerlink" title="3.2.4 配置说明"></a>3.2.4 配置说明</h4><ol><li><p><strong>基础设置</strong></p><ul><li>默认对话模式选择</li><li>文字大小调整</li><li>自动刷新和滚动</li></ul></li><li><p><strong>Agent模式设置</strong></p><ul><li>自动运行命令</li><li>文件保护机制</li><li>命令白名单&#x2F;黑名单</li></ul></li><li><p><strong>安全设置</strong></p><ul><li>文件删除保护</li><li>工作区外保护</li><li>点文件保护</li></ul></li></ol><h3 id="3-3-Ctrl-K内联编辑-✏️"><a href="#3-3-Ctrl-K内联编辑-✏️" class="headerlink" title="3.3 Ctrl+K内联编辑 ✏️"></a>3.3 Ctrl+K内联编辑 ✏️</h3><h4 id="3-3-1-功能概述"><a href="#3-3-1-功能概述" class="headerlink" title="3.3.1 功能概述"></a>3.3.1 功能概述</h4><p>内联编辑（Cmd&#x2F;Ctrl+K）允许直接在编辑器窗口中生成新代码或编辑现有代码，特别适合已知并需要精准修改文件内容的场景。</p><p><img src="/images/cursor/regular.png" alt="内联编辑"></p><h4 id="3-3-2-使用模式"><a href="#3-3-2-使用模式" class="headerlink" title="3.3.2 使用模式"></a>3.3.2 使用模式</h4><ol><li><p><strong>内联生成</strong></p><ul><li>无选中代码时按<code>Ctrl/Cmd K</code></li><li>在提示栏输入需求</li><li>AI直接生成相应代码</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生成一个带点击动画的按钮组件，用JavaScript实现，点击后控制台打印次数</span><br></pre></td></tr></table></figure><p><img src="/images/cursor/1749009173764.png" alt="生成效果"></p></li><li><p><strong>内联编辑</strong></p><ul><li>选中要修改的代码</li><li>按<code>Ctrl/Cmd K</code></li><li>在提示栏描述修改需求</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法添加注释和每行代码添加注释说明</span><br></pre></td></tr></table></figure><p><img src="/images/cursor/1749009465994.png" alt="编辑前"><br><img src="/images/cursor/1749009494441.png" alt="编辑后"></p></li></ol><h4 id="3-3-3-终端命令生成"><a href="#3-3-3-终端命令生成" class="headerlink" title="3.3.3 终端命令生成"></a>3.3.3 终端命令生成</h4><p>在Cursor终端中使用<code>Cmd/Ctrl K</code>可以：</p><ul><li>通过自然语言生成命令</li><li>按<code>Esc</code>接受命令</li><li>使用<code>Ctrl/⌘ + Enter</code>直接运行</li></ul><p><img src="/images/cursor/1749009824073.png" alt="终端命令"></p><h4 id="3-3-4-最佳实践"><a href="#3-3-4-最佳实践" class="headerlink" title="3.3.4 最佳实践"></a>3.3.4 最佳实践</h4><ol><li><p><strong>提示词技巧</strong></p><ul><li>提供明确的任务类型</li><li>包含具体的技术要求</li><li>说明代码风格偏好</li><li>指定性能或其他约束</li></ul></li><li><p><strong>使用场景</strong></p><ul><li>生成新的代码片段</li><li>重构现有代码</li><li>添加注释和文档</li><li>修复代码问题</li><li>优化代码性能</li></ul></li><li><p><strong>注意事项</strong></p><ul><li>检查生成代码的正确性</li><li>确保代码风格一致性</li><li>验证功能完整性</li><li>考虑性能影响</li></ul></li></ol><h2 id="4-精准上下文指定-🎯"><a href="#4-精准上下文指定-🎯" class="headerlink" title="4. 精准上下文指定 🎯"></a>4. 精准上下文指定 🎯</h2><h3 id="4-1-代码库索引-📚"><a href="#4-1-代码库索引-📚" class="headerlink" title="4.1 代码库索引 📚"></a>4.1 代码库索引 📚</h3><h4 id="4-1-1-概念和作用"><a href="#4-1-1-概念和作用" class="headerlink" title="4.1.1 概念和作用"></a>4.1.1 概念和作用</h4><p>代码库索引是Cursor理解项目的基础。每个Cursor实例在打开项目时都会初始化该工作区的索引，并在添加新文件时自动更新索引。</p><p>主要作用：</p><ul><li>快速”读懂”项目结构</li><li>定位相关代码</li><li>理解代码关系</li><li>生成更贴合项目的代码</li></ul><h4 id="4-1-2-索引配置"><a href="#4-1-2-索引配置" class="headerlink" title="4.1.2 索引配置"></a>4.1.2 索引配置</h4><p><img src="/images/cursor/codebase-indexing.png" alt="索引配置"></p><p>配置位置：<code>cursor settings &gt; indexing</code></p><p>使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看当前项目结构，并使用文字图形形式罗列出来！</span><br></pre></td></tr></table></figure><p><img src="/images/cursor/1749018096565.png" alt="索引效果"></p><h4 id="4-1-3-忽略文件配置"><a href="#4-1-3-忽略文件配置" class="headerlink" title="4.1.3 忽略文件配置"></a>4.1.3 忽略文件配置</h4><ol><li><p><strong>配置方式</strong></p><ul><li>创建<code>.cursorignore</code>文件</li><li>使用配置界面创建<br><img src="/images/cursor/1749020017720.png" alt="忽略配置"></li></ul></li><li><p><strong>配置示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Add directories or file patterns to ignore during indexing</span><br><span class="line">index.html</span><br><span class="line">style.css</span><br><span class="line">main.js</span><br></pre></td></tr></table></figure></li><li><p><strong>效果验证</strong><br><img src="/images/cursor/1749020220373.png" alt="忽略效果"></p></li></ol><h3 id="4-2-Rules规则配置-📋"><a href="#4-2-Rules规则配置-📋" class="headerlink" title="4.2 Rules规则配置 📋"></a>4.2 Rules规则配置 📋</h3><h4 id="4-2-1-规则介绍"><a href="#4-2-1-规则介绍" class="headerlink" title="4.2.1 规则介绍"></a>4.2.1 规则介绍</h4><p>Rules用于给Cursor AI功能添加规则和限制，确保生成的代码符合团队规范。</p><p><strong>主要作用：</strong></p><ul><li>约束代码风格</li><li>限定技术选型</li><li>指定核心参数</li></ul><p><strong>规则类型对比：</strong></p><table><thead><tr><th><strong>维度</strong></th><th><strong>项目规则（Project Rules）</strong></th><th><strong>用户规则（User Rules）</strong></th></tr></thead><tbody><tr><td><strong>作用范围</strong></td><td>仅对当前项目生效，团队成员共享相同规则</td><td>对所有项目生效，个人专属配置</td></tr><tr><td><strong>存储位置</strong></td><td>项目根目录下的 <code>.cursor/rules/随意.mdc</code> 文件</td><td>用户配置目录（如 <code>~/.cursor/rules</code>）</td></tr><tr><td><strong>同步方式</strong></td><td>随项目代码提交到版本库（如 Git），团队共享</td><td>仅本地生效，不随项目同步</td></tr><tr><td><strong>适用场景</strong></td><td>统一团队编码规范（如函数注释格式、依赖版本）</td><td>个人习惯（如快捷键、AI 响应风格）</td></tr></tbody></table><h4 id="4-2-2-规则配置示例"><a href="#4-2-2-规则配置示例" class="headerlink" title="4.2.2 规则配置示例"></a>4.2.2 规则配置示例</h4><ol><li><p><strong>创建规则文件</strong><br><img src="/images/cursor/1749025679441.png" alt="创建规则"></p></li><li><p><strong>编写规则内容</strong></p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">description: &quot;团队前端项目规范&quot;</span><br><span class="line"><span class="section">priority: 1000</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 代码风格</span></span><br><span class="line"><span class="bullet">1.</span> 函数必须包含 JSDoc 注释</span><br><span class="line"><span class="bullet">2.</span> 禁止使用 <span class="code">`var`</span>，统一用 <span class="code">`const`</span>/<span class="code">`let`</span></span><br><span class="line"><span class="bullet">3.</span> 函数命名必须添加 zwf<span class="emphasis">_前缀， 例如：zwf_</span>login</span><br><span class="line"></span><br><span class="line"><span class="section"># 依赖管理</span></span><br><span class="line"><span class="bullet">-</span> 优先使用项目内已有的工具函数</span><br><span class="line"><span class="bullet">-</span> 禁止引入低版本的 lodash（&lt;4.0.0）</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>规则生效效果</strong><br><img src="/images/cursor/1749026002745.png" alt="规则效果"></li></ol><h4 id="4-2-3-RIPER-5-高级规则框架"><a href="#4-2-3-RIPER-5-高级规则框架" class="headerlink" title="4.2.3 RIPER-5 高级规则框架"></a>4.2.3 RIPER-5 高级规则框架</h4><p><strong>RIPER-5</strong> 是一套为高级AI助手设计的严格行为协议和工作流框架，特别适合在Cursor中使用。它通过强制性的、分阶段的流程来约束AI的行为，确保执行复杂编码任务时的每一步操作都安全、可控且符合预期。</p><p><strong>GitHub仓库：</strong> <a href="https://github.com/NeekChaw/RIPER-5">NeekChaw&#x2F;RIPER-5</a></p><p><strong>核心特点：</strong></p><ul><li>🎯 <strong>行为约束</strong>：通过严格的工作流约束AI行为</li><li>🔒 <strong>安全可控</strong>：确保AI操作的安全性和可预测性</li><li>📋 <strong>分阶段执行</strong>：将复杂任务分解为可管理的步骤</li><li>🛡️ <strong>错误预防</strong>：避免AI随意创建文件、忽视现有架构等问题</li></ul><p><strong>RIPER-5 规则配置示例：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">description: &quot;RIPER-5 AI编码行为协议&quot;</span><br><span class="line"><span class="section">priority: 2000</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># RIPER-5 行为协议</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 核心原则</span></span><br><span class="line"><span class="bullet">1.</span> 在执行任何编码任务前，必须先进行需求分析和架构设计</span><br><span class="line"><span class="bullet">2.</span> 严格遵循五阶段工作流：分析(Research) → 规划(Plan) → 实施(Implement) → 验证(Verify) → 优化(Optimize)</span><br><span class="line"><span class="bullet">3.</span> 禁止随意创建新文件，必须先检查现有代码结构</span><br><span class="line"><span class="bullet">4.</span> 所有代码修改必须包含详细的注释和文档</span><br><span class="line"></span><br><span class="line"><span class="section">## 工作流要求</span></span><br><span class="line"><span class="bullet">-</span> 分析阶段：深入理解需求和现有代码结构</span><br><span class="line"><span class="bullet">-</span> 规划阶段：制定详细的实施计划和技术方案</span><br><span class="line"><span class="bullet">-</span> 实施阶段：严格按照规划执行，避免偏离目标</span><br><span class="line"><span class="bullet">-</span> 验证阶段：全面测试和代码审查</span><br><span class="line"><span class="bullet">-</span> 优化阶段：性能优化和代码重构</span><br><span class="line"></span><br><span class="line"><span class="section">## 代码规范</span></span><br><span class="line"><span class="bullet">-</span> 所有函数必须包含JSDoc注释</span><br><span class="line"><span class="bullet">-</span> 变量命名必须具有描述性</span><br><span class="line"><span class="bullet">-</span> 代码结构必须清晰，避免过度嵌套</span><br><span class="line"><span class="bullet">-</span> 必须考虑错误处理和边界情况</span><br></pre></td></tr></table></figure><p><strong>Claude Code 专用提示词集合：</strong></p><p>RIPER-5仓库还包含多个针对特定场景的优化提示词：</p><table><thead><tr><th>模块</th><th>描述</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Kiro需求收集与规划</strong></td><td>三阶段工作流，将模糊想法转化为完整开发文档</td><td>项目规划和需求分析</td></tr><tr><td><strong>Linux之父帮你重构代码</strong></td><td>模拟Linus Torvalds的思维模式审查代码</td><td>代码审查和重构</td></tr><tr><td><strong>让Claude更靠谱的Workflow</strong></td><td>五步工作流约束AI行为</td><td>日常开发任务</td></tr><tr><td><strong>专业高效提交Git</strong></td><td>Commit-as-Prompt理念，结构化提交信息</td><td>Git版本管理</td></tr><tr><td><strong>超深度思考</strong></td><td>多代理协作工作流，模拟专家团队</td><td>复杂问题解决</td></tr></tbody></table><p><strong>使用建议：</strong></p><ol><li>将RIPER-5规则设置为项目规则，确保团队统一使用</li><li>根据具体任务选择合适的Claude Code提示词</li><li>定期更新和优化规则内容</li><li>结合团队实际情况调整规则细节</li></ol><h3 id="4-3-符号使用-🔍"><a href="#4-3-符号使用-🔍" class="headerlink" title="4.3 @符号使用 🔍"></a>4.3 @符号使用 🔍</h3><h4 id="4-3-1-符号类型"><a href="#4-3-1-符号类型" class="headerlink" title="4.3.1 符号类型"></a>4.3.1 符号类型</h4><p><img src="/images/cursor/@-symbols-basics.png" alt="符号基础"></p><p>支持的@符号：</p><ul><li>@Files - 引用特定文件</li><li>@Folders - 引用整个文件夹</li><li>@Code - 引用代码片段</li><li>@Docs - 访问文档</li><li>@Git - 访问git历史</li><li>@Web - 参考网络资源</li><li>@Lint Errors - 引用lint错误</li></ul><h4 id="4-3-2-使用示例"><a href="#4-3-2-使用示例" class="headerlink" title="4.3.2 使用示例"></a>4.3.2 使用示例</h4><ol><li><p><strong>@Files使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">帮我总结下 @main.js 中包含哪些方法？</span><br></pre></td></tr></table></figure><p><img src="/images/cursor/1749032749858.png" alt="Files使用"></p></li><li><p><strong>@Code使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">帮我逐行解释下 @zwf_register 代码的含义！</span><br></pre></td></tr></table></figure><p><img src="/images/cursor/1749033073362.png" alt="Code使用"></p></li><li><p><strong>@Docs使用</strong><br><img src="/images/cursor/@docs-add.png" alt="Docs配置"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基于 @MyBatis-plus 查询下乐观锁插件如何使用</span><br></pre></td></tr></table></figure><p><img src="/images/cursor/1749088442648.png" alt="Docs使用"></p></li><li><p><strong>@Web使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Web React 19 的最新性能优化</span><br></pre></td></tr></table></figure><p><img src="/images/cursor/1749089800111.png" alt="Web使用"></p></li></ol><h4 id="4-3-3-最佳实践"><a href="#4-3-3-最佳实践" class="headerlink" title="4.3.3 最佳实践"></a>4.3.3 最佳实践</h4><ol><li><p><strong>选择合适的符号</strong></p><ul><li>@Files：需要访问完整文件</li><li>@Code：引用特定代码片段</li><li>@Docs：查询官方文档</li><li>@Web：获取最新信息</li></ul></li><li><p><strong>提供准确上下文</strong></p><ul><li>指定正确的文件路径</li><li>选择相关的代码片段</li><li>引用适当的文档</li><li>使用精确的搜索词</li></ul></li><li><p><strong>组合使用技巧</strong></p><ul><li>多个符号配合使用</li><li>按需提供上下文</li><li>避免过度引用</li><li>保持提示简洁</li></ul></li></ol><h2 id="5-实战案例：Chrome插件开发-🚀"><a href="#5-实战案例：Chrome插件开发-🚀" class="headerlink" title="5. 实战案例：Chrome插件开发 🚀"></a>5. 实战案例：Chrome插件开发 🚀</h2><h3 id="5-1-插件设计-🎨"><a href="#5-1-插件设计-🎨" class="headerlink" title="5.1 插件设计 🎨"></a>5.1 插件设计 🎨</h3><h4 id="5-1-1-需求分析"><a href="#5-1-1-需求分析" class="headerlink" title="5.1.1 需求分析"></a>5.1.1 需求分析</h4><p><strong>功能需求：</strong></p><ol><li>解释选中的段落或关键词</li><li>翻译选中的段落或关键词（中英互译）</li><li>朗读选中的段落或关键字</li><li>润色和替换选中的文本文案</li></ol><p><strong>细节要求：</strong></p><ol><li>选中文本时显示悬浮插件</li><li>结果显示在悬浮窗口下方</li><li>翻译支持语言选择</li><li>润色结果可编辑和替换</li><li>使用Kimi API实现核心功能</li><li>使用Chrome内置API实现朗读</li></ol><h4 id="5-1-2-UI设计"><a href="#5-1-2-UI设计" class="headerlink" title="5.1.2 UI设计"></a>5.1.2 UI设计</h4><p><strong>基础悬浮菜单：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">|     功能按钮组         |</span><br><span class="line">+------------------------+</span><br><span class="line">| [解释] [翻译] [朗读] [润色] |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><p><strong>功能展示区域：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">|     功能按钮组         |</span><br><span class="line">+------------------------+</span><br><span class="line">| [解释] [翻译] [朗读] [润色] |</span><br><span class="line">+------------------------+</span><br><span class="line">|     结果展示区域        |</span><br><span class="line">|                        |</span><br><span class="line">|                        |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><h3 id="5-2-功能实现-⚡"><a href="#5-2-功能实现-⚡" class="headerlink" title="5.2 功能实现 ⚡"></a>5.2 功能实现 ⚡</h3><h4 id="5-2-1-项目初始化"><a href="#5-2-1-项目初始化" class="headerlink" title="5.2.1 项目初始化"></a>5.2.1 项目初始化</h4><ol><li><p><strong>创建项目结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chrome-plugin/</span><br><span class="line">├── manifest.json</span><br><span class="line">├── popup/</span><br><span class="line">│   ├── popup.html</span><br><span class="line">│   ├── popup.css</span><br><span class="line">│   └── popup.js</span><br><span class="line">├── content/</span><br><span class="line">│   ├── content.css</span><br><span class="line">│   └── content.js</span><br><span class="line">├── background/</span><br><span class="line">│   └── background.js</span><br><span class="line">└── config.js</span><br></pre></td></tr></table></figure></li><li><p><strong>配置manifest.json</strong></p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AI文本助手&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一款强大的文本处理Chrome插件&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;activeTab&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;storage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup/popup.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;all_urls&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;css&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;content/content.css&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;content/content.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;service_worker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;background/background.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-核心功能实现"><a href="#5-2-2-核心功能实现" class="headerlink" title="5.2.2 核心功能实现"></a>5.2.2 核心功能实现</h4><ol><li><p><strong>Kimi API配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">kimi</span>: &#123;</span><br><span class="line">        <span class="attr">apiUrl</span>: <span class="string">&#x27;https://api.moonshot.cn/v1&#x27;</span>,</span><br><span class="line">        <span class="attr">apiKey</span>: <span class="string">&#x27;YOUR_KIMI_API_KEY&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">defaults</span>: &#123;</span><br><span class="line">        <span class="attr">translationTarget</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">        <span class="attr">speechLanguage</span>: <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>文本选择监听</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> selectedText = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>().<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (selectedText) &#123;</span><br><span class="line">        <span class="title function_">showToolbar</span>(e.<span class="property">pageX</span>, e.<span class="property">pageY</span>, selectedText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>功能实现示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本解释</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">explainText</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;config.kimi.apiUrl&#125;</span>/explain`</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">`Bearer <span class="subst">$&#123;config.kimi.apiKey&#125;</span>`</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; text &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3-调试与发布-🚀"><a href="#5-3-调试与发布-🚀" class="headerlink" title="5.3 调试与发布 🚀"></a>5.3 调试与发布 🚀</h3><h4 id="5-3-1-本地调试"><a href="#5-3-1-本地调试" class="headerlink" title="5.3.1 本地调试"></a>5.3.1 本地调试</h4><ol><li><p><strong>加载插件</strong></p><ul><li>打开Chrome扩展程序页面</li><li>启用开发者模式</li><li>加载已解压的扩展程序</li><li>选择插件目录</li></ul></li><li><p><strong>调试技巧</strong></p><ul><li>使用Chrome DevTools</li><li>查看Console输出</li><li>测试各项功能</li><li>检查API响应</li></ul></li></ol><h4 id="5-3-2-问题修复"><a href="#5-3-2-问题修复" class="headerlink" title="5.3.2 问题修复"></a>5.3.2 问题修复</h4><ol><li><p><strong>图片资源问题</strong><br><img src="/images/cursor/1749113898720.png" alt="图片错误"></p><ul><li>添加必要的图标文件</li><li>确保路径正确</li></ul></li><li><p><strong>模块导入错误</strong><br><img src="/images/cursor/1749114738303.png" alt="导入错误"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改为</span></span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&#x27;./config.js&#x27;</span>;</span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="variable language_">window</span>.<span class="property">config</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>功能验证</strong><br><img src="/images/cursor/1749114867360.png" alt="功能测试"></p><ul><li>测试文本选择</li><li>验证API调用</li><li>检查UI显示</li><li>确认功能正常</li></ul></li></ol><h2 id="📚-延伸阅读"><a href="#📚-延伸阅读" class="headerlink" title="📚 延伸阅读"></a>📚 延伸阅读</h2><ul><li><a href="/git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/">Git操作指南</a> - 学习版本控制基础</li><li><a href="/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/">函数式编程</a> - 提升代码质量和可维护性</li><li><a href="/20251002%E8%BF%91%E6%9C%9F%E8%A7%84%E5%88%92_%E6%96%B0/">近期规划</a> - 了解学习路线图</li></ul><h2 id="💡-学习建议"><a href="#💡-学习建议" class="headerlink" title="💡 学习建议"></a>💡 学习建议</h2><ol><li><p><strong>循序渐进</strong></p><ul><li>先掌握基础功能(Tab补全、Chat对话)</li><li>再学习高级特性(Rules、@符号)</li><li>最后尝试实战项目</li></ul></li><li><p><strong>实践为主</strong></p><ul><li>在日常开发中多使用</li><li>从简单任务开始</li><li>逐步挑战复杂项目</li></ul></li><li><p><strong>善用文档</strong></p><ul><li>经常查阅官方文档</li><li>关注版本更新</li><li>参与社区讨论</li></ul></li><li><p><strong>知识整合</strong></p><ul><li>结合版本控制(Git)</li><li>配合函数式编程思想</li><li>融入开发工作流</li></ul></li></ol><h2 id="🔗-相关资源"><a href="#🔗-相关资源" class="headerlink" title="🔗 相关资源"></a>🔗 相关资源</h2><ol><li><p><strong>官方资源</strong></p><ul><li><a href="https://cursor.sh/">Cursor官网</a></li><li><a href="https://cursor.sh/docs">Cursor文档</a></li><li><a href="https://github.com/getcursor/cursor">GitHub仓库</a></li></ul></li><li><p><strong>社区资源</strong></p><ul><li><a href="https://discord.gg/cursor">Discord社区</a></li><li><a href="https://www.reddit.com/r/cursor">Reddit论坛</a></li><li><a href="https://stackoverflow.com/questions/tagged/cursor-editor">Stack Overflow</a></li></ul></li><li><p><strong>中文资源</strong></p><ul><li><a href="https://juejin.cn/tag/Cursor">掘金专栏</a></li><li><a href="https://www.zhihu.com/topic/cursor">知乎话题</a></li><li><a href="https://search.bilibili.com/all?keyword=cursor%20ai">B站教程</a></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> AI工具教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 开发工具 </tag>
            
            <tag> Cursor </tag>
            
            <tag> AI编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java函数式编程详解：从Lambda到Stream的完整指南</title>
      <link href="//java-functional-programming-guide/"/>
      <url>//java-functional-programming-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="📚-参考资源"><a href="#📚-参考资源" class="headerlink" title="📚 参考资源"></a>📚 参考资源</h1><p>本文档在编写过程中参考了以下优质资源，感谢这些作者和平台的分享：</p><h2 id="🎥-视频教程"><a href="#🎥-视频教程" class="headerlink" title="🎥 视频教程"></a>🎥 视频教程</h2><ul><li><strong><a href="https://www.bilibili.com/video/BV1fz421C7tj/?spm_id_from=333.337.search-card.all.click&vd_source=2d617d5367ab8a8bf8a5ed469356eb71">Java函数式编程完整教程</a></strong> - B站优质Java函数式编程教程，系统讲解了Lambda表达式和Stream API的使用</li></ul><h2 id="📖-技术博客"><a href="#📖-技术博客" class="headerlink" title="📖 技术博客"></a>📖 技术博客</h2><ul><li><strong><a href="https://mofan212.github.io/posts/Java-Lambda-Expression-And-Functional-Programming/index.html">Java Lambda Expression And Functional Programming</a></strong> - 默烦的技术博客，深入分析了Lambda表达式的底层实现原理</li></ul><h2 id="📚-推荐阅读"><a href="#📚-推荐阅读" class="headerlink" title="📚 推荐阅读"></a>📚 推荐阅读</h2><h2 id="🔗-相关链接"><a href="#🔗-相关链接" class="headerlink" title="🔗 相关链接"></a>🔗 相关链接</h2><ul><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">Oracle官方Lambda表达式教程</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html">Oracle官方Stream API文档</a></li><li><a href="https://tech.meituan.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html">美团技术团队函数式编程系列</a></li></ul><hr><h1 id="🚀-函数式编程基础"><a href="#🚀-函数式编程基础" class="headerlink" title="🚀 函数式编程基础"></a>🚀 函数式编程基础</h1><h2 id="📖-什么是函数"><a href="#📖-什么是函数" class="headerlink" title="📖 什么是函数"></a>📖 什么是函数</h2><p>函数即规则。在数学上，函数是一种映射关系，将输入值映射到输出值。</p><h3 id="🔢-数学函数示例"><a href="#🔢-数学函数示例" class="headerlink" title="🔢 数学函数示例"></a>🔢 数学函数示例</h3><p>考虑函数 $f(x) &#x3D; x^2$：</p><table><thead><tr><th>INPUT</th><th>f(x) &#x3D; x²</th><th>OUTPUT</th></tr></thead><tbody><tr><td>1</td><td>1²</td><td>1</td></tr><tr><td>2</td><td>2²</td><td>4</td></tr><tr><td>3</td><td>3²</td><td>9</td></tr><tr><td>4</td><td>4²</td><td>16</td></tr><tr><td>5</td><td>5²</td><td>25</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="函数的核心特性"><a href="#函数的核心特性" class="headerlink" title="函数的核心特性"></a>函数的核心特性</h3><ol><li><strong>确定性</strong>：相同的输入总是产生相同的输出</li><li><strong>无副作用</strong>：函数执行不会改变外部状态</li><li><strong>不变性</strong>：函数的执行规则永远不变</li></ol><blockquote><p>💡 <strong>编程启示</strong>：在Java中，方法本质上也是函数，但绑定在对象之上。函数式编程强调不变性，这在多线程编程中意味着线程安全。</p></blockquote><h1 id="🎯-Lambda表达式与函数式接口"><a href="#🎯-Lambda表达式与函数式接口" class="headerlink" title="🎯 Lambda表达式与函数式接口"></a>🎯 Lambda表达式与函数式接口</h1><h2 id="📝-Lambda表达式基础"><a href="#📝-Lambda表达式基础" class="headerlink" title="📝 Lambda表达式基础"></a>📝 Lambda表达式基础</h2><p>在Java中，Lambda表达式是函数式编程的核心语法，它允许我们将函数作为参数传递。</p><h3 id="🔄-Lambda表达式的两种形式"><a href="#🔄-Lambda表达式的两种形式" class="headerlink" title="🔄 Lambda表达式的两种形式"></a>🔄 Lambda表达式的两种形式</h3><ol><li><strong>Lambda表达式</strong>：<code>(参数) -&gt; 表达式</code></li><li><strong>方法引用</strong>：<code>类名::方法名</code> 或 <code>对象::方法名</code></li></ol><h3 id="📋-Lambda表达式语法规则"><a href="#📋-Lambda表达式语法规则" class="headerlink" title="📋 Lambda表达式语法规则"></a>📋 Lambda表达式语法规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 单行表达式，可以省略大括号和return</span></span><br><span class="line">(<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 多行代码，必须使用大括号和return</span></span><br><span class="line">(<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 参数类型可以省略（类型推断）</span></span><br><span class="line">(a, b) -&gt; a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 单个参数可以省略括号</span></span><br><span class="line">a -&gt; a * <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="🔌-函数式接口"><a href="#🔌-函数式接口" class="headerlink" title="🔌 函数式接口"></a>🔌 函数式接口</h3><p>Lambda表达式的类型由<strong>函数式接口</strong>决定。函数式接口是只包含一个抽象方法的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="💻-实际代码示例"><a href="#💻-实际代码示例" class="headerlink" title="💻 实际代码示例"></a>💻 实际代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaExamples</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义函数式接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntCalculator</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DoubleCalculator</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 明确指定参数类型</span></span><br><span class="line">        <span class="type">IntCalculator</span> <span class="variable">lambda1</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 使用类型推断（推荐）</span></span><br><span class="line">        <span class="type">IntCalculator</span> <span class="variable">lambda2</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 多行代码</span></span><br><span class="line">        <span class="type">IntCalculator</span> <span class="variable">lambda3</span> <span class="operator">=</span> (a, b) -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">        <span class="keyword">return</span> c + <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 不同返回类型</span></span><br><span class="line">        <span class="type">DoubleCalculator</span> <span class="variable">lambda4</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(lambda1.calculate(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 8</span></span><br><span class="line">        System.out.println(lambda2.calculate(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 8</span></span><br><span class="line">        System.out.println(lambda3.calculate(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 9</span></span><br><span class="line">        System.out.println(lambda4.calculate(<span class="number">5.5</span>, <span class="number">3.2</span>)); <span class="comment">// 输出: 8.7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔗-方法引用"><a href="#🔗-方法引用" class="headerlink" title="🔗 方法引用"></a>🔗 方法引用</h2><p>方法引用是Lambda表达式的简化写法，当Lambda表达式只是调用一个已存在的方法时，可以使用方法引用。</p><h3 id="📚-方法引用的四种类型"><a href="#📚-方法引用的四种类型" class="headerlink" title="📚 方法引用的四种类型"></a>📚 方法引用的四种类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferenceExamples</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 学生类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String sex;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String sex)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 类名::静态方法</span></span><br><span class="line">        <span class="type">IntBinaryOperator</span> <span class="variable">max</span> <span class="operator">=</span> Math::max;</span><br><span class="line">        System.out.println(max.applyAsInt(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 5</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 类名::实例方法</span></span><br><span class="line">        Function&lt;Student, String&gt; getName = Student::getName;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        System.out.println(getName.apply(student)); <span class="comment">// 输出: 张三</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 对象::实例方法</span></span><br><span class="line">        Consumer&lt;String&gt; printer = System.out::println;</span><br><span class="line">        printer.accept(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">// 输出: Hello World</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 类名::new (构造方法引用)</span></span><br><span class="line">        Supplier&lt;Student&gt; studentCreator = Student::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">newStudent</span> <span class="operator">=</span> studentCreator.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⚖️-方法引用与Lambda表达式对比"><a href="#⚖️-方法引用与Lambda表达式对比" class="headerlink" title="⚖️ 方法引用与Lambda表达式对比"></a>⚖️ 方法引用与Lambda表达式对比</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferenceComparison</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法引用 vs Lambda表达式对比</span></span><br><span class="line">        <span class="comment">// 1. 静态方法引用</span></span><br><span class="line">        Supplier&lt;Double&gt; random1 = Math::random;           <span class="comment">// 方法引用</span></span><br><span class="line">        Supplier&lt;Double&gt; random2 = () -&gt; Math.random();  <span class="comment">// Lambda表达式</span></span><br><span class="line">        <span class="comment">// 2. 实例方法引用</span></span><br><span class="line">        Function&lt;Student, String&gt; getName1 = Student::getName;           <span class="comment">// 方法引用</span></span><br><span class="line">        Function&lt;Student, String&gt; getName2 = student -&gt; student.getName(); <span class="comment">// Lambda表达式</span></span><br><span class="line">        <span class="comment">// 3. 对象方法引用</span></span><br><span class="line">        Consumer&lt;String&gt; print1 = System.out::println;           <span class="comment">// 方法引用</span></span><br><span class="line">        Consumer&lt;String&gt; print2 = str -&gt; System.out.println(str); <span class="comment">// Lambda表达式</span></span><br><span class="line">        <span class="comment">// 4. 构造方法引用</span></span><br><span class="line">        Supplier&lt;Student&gt; create1 = Student::<span class="keyword">new</span>;           <span class="comment">// 方法引用</span></span><br><span class="line">        Supplier&lt;Student&gt; create2 = () -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>();     <span class="comment">// Lambda表达式        </span></span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(random1.get());</span><br><span class="line">        System.out.println(getName1.apply(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>)));</span><br><span class="line">        print1.accept(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(create1.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>选择建议</strong>：当Lambda表达式只是简单调用一个方法时，使用方法引用更简洁；当需要复杂逻辑时，使用Lambda表达式。</p></blockquote><h1 id="🛠️-Java内置函数式接口"><a href="#🛠️-Java内置函数式接口" class="headerlink" title="🛠️ Java内置函数式接口"></a>🛠️ Java内置函数式接口</h1><h2 id="🎨-自定义函数式接口"><a href="#🎨-自定义函数式接口" class="headerlink" title="🎨 自定义函数式接口"></a>🎨 自定义函数式接口</h2><p>在Java 8之前，我们需要自己定义函数式接口。现在虽然有了内置接口，但了解自定义接口有助于理解函数式编程的本质。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFunctionalInterfaces</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义函数式接口示例</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntPredicate</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntCalculator</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentExtractor</span>&lt;T&gt; &#123;</span><br><span class="line">        T <span class="title function_">getInfo</span><span class="params">(Student student)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TriFunction</span>&lt;T, U, V, R&gt; &#123;</span><br><span class="line">        R <span class="title function_">apply</span><span class="params">(T t, U u, V v)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IntPredicate</span> <span class="variable">isEven</span> <span class="operator">=</span> a -&gt; (a &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">        <span class="type">IntCalculator</span> <span class="variable">add</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line">        StudentExtractor&lt;String&gt; getName = Student::getName;</span><br><span class="line">        TriFunction&lt;Integer, Integer, Integer, Integer&gt; addThree = (a, b, c) -&gt; a + b + c;</span><br><span class="line">        </span><br><span class="line">        System.out.println(isEven.test(<span class="number">4</span>));        <span class="comment">// true</span></span><br><span class="line">        System.out.println(add.calculate(<span class="number">3</span>, <span class="number">5</span>));   <span class="comment">// 8</span></span><br><span class="line">        System.out.println(addThree.apply(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🏗️-Java内置函数式接口"><a href="#🏗️-Java内置函数式接口" class="headerlink" title="🏗️ Java内置函数式接口"></a>🏗️ Java内置函数式接口</h2><p>Java 8提供了丰富的内置函数式接口，我们不需要重复造轮子：</p><h3 id="⭐-核心函数式接口"><a href="#⭐-核心函数式接口" class="headerlink" title="⭐ 核心函数式接口"></a>⭐ 核心函数式接口</h3><table><thead><tr><th>接口</th><th>参数</th><th>返回值</th><th>用途</th><th>示例</th></tr></thead><tbody><tr><td><code>Function&lt;T,R&gt;</code></td><td>1个T</td><td>R</td><td>转换</td><td><code>Function&lt;String,Integer&gt; f = Integer::parseInt</code></td></tr><tr><td><code>BiFunction&lt;T,U,R&gt;</code></td><td>2个(T,U)</td><td>R</td><td>二元转换</td><td><code>BiFunction&lt;String,String,Integer&gt; f = (a,b) -&gt; a.length() + b.length()</code></td></tr><tr><td><code>Consumer&lt;T&gt;</code></td><td>1个T</td><td>void</td><td>消费</td><td><code>Consumer&lt;String&gt; c = System.out::println</code></td></tr><tr><td><code>BiConsumer&lt;T,U&gt;</code></td><td>2个(T,U)</td><td>void</td><td>二元消费</td><td><code>BiConsumer&lt;String,Integer&gt; c = (s,i) -&gt; System.out.println(s + i)</code></td></tr><tr><td><code>Predicate&lt;T&gt;</code></td><td>1个T</td><td>boolean</td><td>判断</td><td><code>Predicate&lt;String&gt; p = s -&gt; s.length() &gt; 5</code></td></tr><tr><td><code>BiPredicate&lt;T,U&gt;</code></td><td>2个(T,U)</td><td>boolean</td><td>二元判断</td><td><code>BiPredicate&lt;String,String&gt; p = (a,b) -&gt; a.equals(b)</code></td></tr><tr><td><code>Supplier&lt;T&gt;</code></td><td>无</td><td>T</td><td>提供</td><td><code>Supplier&lt;String&gt; s = () -&gt; &quot;Hello&quot;</code></td></tr></tbody></table><h3 id="🎯-特殊化接口"><a href="#🎯-特殊化接口" class="headerlink" title="🎯 特殊化接口"></a>🎯 特殊化接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuiltInFunctionalInterfaces</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Function系列 - 有参有返回值</span></span><br><span class="line">        Function&lt;String, Integer&gt; stringToInt = Integer::parseInt;</span><br><span class="line">        BiFunction&lt;String, String, Integer&gt; addLengths = (a, b) -&gt; a.length() + b.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. Consumer系列 - 有参无返回值</span></span><br><span class="line">        Consumer&lt;String&gt; printer = System.out::println;</span><br><span class="line">        BiConsumer&lt;String, Integer&gt; printWithNumber = (s, i) -&gt; System.out.println(s + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. Predicate系列 - 有参返回boolean</span></span><br><span class="line">        Predicate&lt;Integer&gt; isEven = n -&gt; n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">        BiPredicate&lt;String, String&gt; isEqual = String::equals;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. Supplier系列 - 无参有返回值</span></span><br><span class="line">        Supplier&lt;String&gt; greeting = () -&gt; <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        Supplier&lt;LocalDateTime&gt; now = LocalDateTime::now;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(stringToInt.apply(<span class="string">&quot;123&quot;</span>));     <span class="comment">// 123</span></span><br><span class="line">        System.out.println(addLengths.apply(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>)); <span class="comment">// 10</span></span><br><span class="line">        printer.accept(<span class="string">&quot;Hello&quot;</span>);                          <span class="comment">// Hello</span></span><br><span class="line">        printWithNumber.accept(<span class="string">&quot;Count&quot;</span>, <span class="number">5</span>);              <span class="comment">// Count: 5</span></span><br><span class="line">        System.out.println(isEven.test(<span class="number">4</span>));               <span class="comment">// true</span></span><br><span class="line">        System.out.println(isEqual.test(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(greeting.get());               <span class="comment">// Hello World</span></span><br><span class="line">        System.out.println(now.get());                   <span class="comment">// 当前时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🚀-原始类型特化接口"><a href="#🚀-原始类型特化接口" class="headerlink" title="🚀 原始类型特化接口"></a>🚀 原始类型特化接口</h3><p>Java还提供了原始类型的特化接口，避免装箱拆箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IntFunction, LongFunction, DoubleFunction</span></span><br><span class="line">IntFunction&lt;String&gt; intToString = String::valueOf;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntConsumer, LongConsumer, DoubleConsumer  </span></span><br><span class="line"><span class="type">IntConsumer</span> <span class="variable">intPrinter</span> <span class="operator">=</span> System.out::println;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntPredicate, LongPredicate, DoublePredicate</span></span><br><span class="line"><span class="type">IntPredicate</span> <span class="variable">isPositive</span> <span class="operator">=</span> n -&gt; n &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntSupplier, LongSupplier, DoubleSupplier</span></span><br><span class="line"><span class="type">IntSupplier</span> <span class="variable">randomInt</span> <span class="operator">=</span> () -&gt; <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="🎪-实际应用示例"><a href="#🎪-实际应用示例" class="headerlink" title="🎪 实际应用示例"></a>🎪 实际应用示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionalInterfaceExamples</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String sex;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String sex)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Student&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Predicate - 条件判断</span></span><br><span class="line">        Predicate&lt;Integer&gt; isEven = a -&gt; (a &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">        Predicate&lt;Integer&gt; isPrime = a -&gt; BigDecimal.valueOf(a).toBigInteger().isProbablePrime(<span class="number">100</span>);</span><br><span class="line">        Predicate&lt;Student&gt; isAdult = student -&gt; student.getAge() &gt; <span class="number">18</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. Function - 数据转换</span></span><br><span class="line">        Function&lt;Student, String&gt; getName = Student::getName;</span><br><span class="line">        Function&lt;Student, Integer&gt; getAge = Student::getAge;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. BiFunction - 二元操作</span></span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; add = Integer::sum;</span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; subtract = (a, b) -&gt; a - b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. TriFunction - 三元操作（自定义）</span></span><br><span class="line">        TriFunction&lt;Integer, Integer, Integer, Integer&gt; addThree = (a, b, c) -&gt; a + b + c;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. Supplier - 数据提供</span></span><br><span class="line">        Supplier&lt;Student&gt; studentSupplier = () -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        Supplier&lt;List&lt;Student&gt;&gt; studentListSupplier = () -&gt; &#123;</span><br><span class="line">            List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">            students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">            students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">16</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> students;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;偶数判断: &quot;</span> + isEven.test(<span class="number">4</span>));           <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;素数判断: &quot;</span> + isPrime.test(<span class="number">17</span>));         <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加法运算: &quot;</span> + add.apply(<span class="number">3</span>, <span class="number">5</span>));         <span class="comment">// 8</span></span><br><span class="line">        System.out.println(<span class="string">&quot;减法运算: &quot;</span> + subtract.apply(<span class="number">10</span>, <span class="number">3</span>));   <span class="comment">// 7</span></span><br><span class="line">        System.out.println(<span class="string">&quot;三元加法: &quot;</span> + addThree.apply(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentSupplier.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;学生信息: &quot;</span> + student);</span><br><span class="line">        System.out.println(<span class="string">&quot;学生姓名: &quot;</span> + getName.apply(student));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否成年: &quot;</span> + isAdult.test(student));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 高阶函数示例</span></span><br><span class="line">        List&lt;Student&gt; students = studentListSupplier.get();</span><br><span class="line">        students.stream()</span><br><span class="line">                .filter(isAdult)</span><br><span class="line">                .map(getName)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 高阶函数：接受函数作为参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPredicate</span><span class="params">(Student student, Predicate&lt;Student&gt; predicate)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(student)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;条件满足: &quot;</span> + student);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;条件不满足: &quot;</span> + student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 🔍 方法引用详解</span><br><span class="line"></span><br><span class="line">方法引用是Lambda表达式的简化形式，当Lambda表达式只是调用一个已存在的方法时，可以使用方法引用。</span><br><span class="line">## 🎭 六种方法引用类型</span><br><span class="line"></span><br><span class="line">### 1️⃣ 类名::静态方法</span><br><span class="line">调用类的静态方法，参数类型和数量必须匹配。</span><br><span class="line">```java</span><br><span class="line">public class StaticMethodReference &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // Math类的静态方法</span><br><span class="line">        Function&lt;Double, Double&gt; abs = Math::abs;</span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; max = Math::max;</span><br><span class="line">        </span><br><span class="line">        // 自定义静态方法</span><br><span class="line">        Function&lt;String, String&gt; toUpperCase = StringUtils::toUpperCase;</span><br><span class="line">        </span><br><span class="line">        System.out.println(abs.apply(-5.5));        // 5.5</span><br><span class="line">        System.out.println(max.apply(10, 20));      // 20</span><br><span class="line">        System.out.println(toUpperCase.apply(&quot;hello&quot;)); // HELLO</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static class StringUtils &#123;</span><br><span class="line">        public static String toUpperCase(String str) &#123;</span><br><span class="line">            return str.toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2️⃣-类名-实例方法"><a href="#2️⃣-类名-实例方法" class="headerlink" title="2️⃣ 类名::实例方法"></a>2️⃣ 类名::实例方法</h3><p>调用实例方法，第一个参数作为方法调用的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceMethodReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// String的实例方法</span></span><br><span class="line">        Function&lt;String, Integer&gt; getLength = String::length;</span><br><span class="line">        BiFunction&lt;String, String, String&gt; concat = String::concat;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自定义类的实例方法</span></span><br><span class="line">        Function&lt;Student, String&gt; getName = Student::getName;</span><br><span class="line">        </span><br><span class="line">        System.out.println(getLength.apply(<span class="string">&quot;Hello&quot;</span>));           <span class="comment">// 5</span></span><br><span class="line">        System.out.println(concat.apply(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>));     <span class="comment">// HelloWorld</span></span><br><span class="line">        System.out.println(getName.apply(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>))); <span class="comment">// 张三</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3️⃣-对象-实例方法"><a href="#3️⃣-对象-实例方法" class="headerlink" title="3️⃣ 对象::实例方法"></a>3️⃣ 对象::实例方法</h3><p>调用特定对象的实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectMethodReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// System.out的实例方法</span></span><br><span class="line">        Consumer&lt;String&gt; printer = System.out::println;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自定义对象的实例方法</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Consumer&lt;String&gt; append = sb::append;</span><br><span class="line">        </span><br><span class="line">        printer.accept(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// Hello World</span></span><br><span class="line">        append.accept(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        append.accept(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        append.accept(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString()); <span class="comment">// Hello World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4️⃣-类名-new-构造方法引用"><a href="#4️⃣-类名-new-构造方法引用" class="headerlink" title="4️⃣ 类名::new (构造方法引用)"></a>4️⃣ 类名::new (构造方法引用)</h3><p>调用构造方法创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 无参构造方法</span></span><br><span class="line">        Supplier&lt;Person&gt; createDefault = Person::<span class="keyword">new</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单参构造方法</span></span><br><span class="line">        Function&lt;String, Person&gt; createWithName = Person::<span class="keyword">new</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 双参构造方法</span></span><br><span class="line">        BiFunction&lt;String, Integer, Person&gt; createWithNameAndAge = Person::<span class="keyword">new</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(createDefault.get());                           <span class="comment">// Person&#123;name=&#x27;Unknown&#x27;, age=0&#125;</span></span><br><span class="line">        System.out.println(createWithName.apply(<span class="string">&quot;张三&quot;</span>));                 <span class="comment">// Person&#123;name=&#x27;张三&#x27;, age=0&#125;</span></span><br><span class="line">        System.out.println(createWithNameAndAge.apply(<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>));        <span class="comment">// Person&#123;name=&#x27;李四&#x27;, age=25&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5️⃣-this-实例方法"><a href="#5️⃣-this-实例方法" class="headerlink" title="5️⃣ this::实例方法"></a>5️⃣ this::实例方法</h3><p>在类内部引用当前对象的实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisMethodReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processStudents</span><span class="params">(List&lt;Student&gt; students)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用this::isAdult作为过滤器</span></span><br><span class="line">        students.stream()</span><br><span class="line">                .filter(<span class="built_in">this</span>::isAdult)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isAdult</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> student.getAge() &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThisMethodReference</span> <span class="variable">processor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThisMethodReference</span>();</span><br><span class="line">        List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">16</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        processor.processStudents(students);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6️⃣-super-实例方法"><a href="#6️⃣-super-实例方法" class="headerlink" title="6️⃣ super::实例方法"></a>6️⃣ super::实例方法</h3><p>在子类中引用父类的实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMethodReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Parent: &quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Child: &quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">(List&lt;String&gt; data)</span> &#123;</span><br><span class="line">            <span class="comment">// 使用super::printInfo调用父类方法</span></span><br><span class="line">            data.forEach(<span class="built_in">super</span>::printInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Child</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        List&lt;String&gt; data = Arrays.asList(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        child.processData(data);</span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">// Parent: Hello</span></span><br><span class="line">        <span class="comment">// Parent: World  </span></span><br><span class="line">        <span class="comment">// Parent: Java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📖-方法引用选择指南"><a href="#📖-方法引用选择指南" class="headerlink" title="📖 方法引用选择指南"></a>📖 方法引用选择指南</h2><table><thead><tr><th>场景</th><th>方法引用类型</th><th>示例</th></tr></thead><tbody><tr><td>调用静态方法</td><td><code>类名::静态方法</code></td><td><code>Math::max</code></td></tr><tr><td>调用实例方法</td><td><code>类名::实例方法</code></td><td><code>String::length</code></td></tr><tr><td>调用对象方法</td><td><code>对象::实例方法</code></td><td><code>System.out::println</code></td></tr><tr><td>创建对象</td><td><code>类名::new</code></td><td><code>ArrayList::new</code></td></tr><tr><td>类内部引用</td><td><code>this::方法</code></td><td><code>this::isValid</code></td></tr><tr><td>子类引用父类</td><td><code>super::方法</code></td><td><code>super::toString</code></td></tr></tbody></table><blockquote><p>💡 <strong>最佳实践</strong>：优先使用方法引用，它比Lambda表达式更简洁，意图更明确。</p></blockquote><h1 id="🔐-闭包与柯里化"><a href="#🔐-闭包与柯里化" class="headerlink" title="🔐 闭包与柯里化"></a>🔐 闭包与柯里化</h1><h2 id="🎪-闭包（Closure）"><a href="#🎪-闭包（Closure）" class="headerlink" title="🎪 闭包（Closure）"></a>🎪 闭包（Closure）</h2><p>闭包是指<strong>函数对象</strong>与<strong>外部变量</strong>绑定在一起形成的整体。在Java中，Lambda表达式可以捕获外部作用域的变量。</p><h3 id="🧩-闭包的基本概念"><a href="#🧩-闭包的基本概念" class="headerlink" title="🧩 闭包的基本概念"></a>🧩 闭包的基本概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 外部变量</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Lambda表达式捕获了外部变量x，形成闭包</span></span><br><span class="line">        Function&lt;Integer, Integer&gt; addX = y -&gt; x + y;</span><br><span class="line">        </span><br><span class="line">        System.out.println(addX.apply(<span class="number">5</span>)); <span class="comment">// 输出: 15</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⚠️-闭包的限制"><a href="#⚠️-闭包的限制" class="headerlink" title="⚠️ 闭包的限制"></a>⚠️ 闭包的限制</h3><p>Java中的闭包变量必须是<strong>final</strong>或<strong>effectively final</strong>的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureLimitations</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 显式final</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        Function&lt;Integer, Integer&gt; addA = y -&gt; a + y;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. effectively final（没有重新赋值）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        Function&lt;Integer, Integer&gt; addB = y -&gt; b + y;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 错误示例：不是effectively final</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="comment">// c = 40; // 如果取消注释，下面的代码会编译错误，体现了闭包不可变性和无副作用!</span></span><br><span class="line">        <span class="comment">// Function&lt;Integer, Integer&gt; addC = y -&gt; c + y; // 编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎯-闭包的实际应用"><a href="#🎯-闭包的实际应用" class="headerlink" title="🎯 闭包的实际应用"></a>🎯 闭包的实际应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureApplications</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建多个任务，每个任务有不同的编号</span></span><br><span class="line">        List&lt;Runnable&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">taskId</span> <span class="operator">=</span> i + <span class="number">1</span>; <span class="comment">// 每次循环创建新的变量</span></span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; System.out.println(</span><br><span class="line">                Thread.currentThread().getName() + <span class="string">&quot;: 执行任务&quot;</span> + taskId</span><br><span class="line">            );</span><br><span class="line">            tasks.add(task);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用虚拟线程执行任务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">        <span class="keyword">for</span> (Runnable task : tasks) &#123;</span><br><span class="line">            executor.submit(task);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🏗️-闭包与对象状态"><a href="#🏗️-闭包与对象状态" class="headerlink" title="🏗️ 闭包与对象状态"></a>🏗️ 闭包与对象状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureWithObjects</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Counter</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Lambda表达式捕获了counter对象引用</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">incrementTask</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            counter.increment();</span><br><span class="line">            System.out.println(<span class="string">&quot;当前计数: &quot;</span> + counter.getCount());</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行多次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            incrementTask.run();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">// 当前计数: 1</span></span><br><span class="line">        <span class="comment">// 当前计数: 2</span></span><br><span class="line">        <span class="comment">// 当前计数: 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🍛-柯里化（Currying）"><a href="#🍛-柯里化（Currying）" class="headerlink" title="🍛 柯里化（Currying）"></a>🍛 柯里化（Currying）</h2><p>柯里化是将接受多个参数的函数转换为一系列只接受一个参数的函数的技术。</p><h3 id="🔧-柯里化的基本概念"><a href="#🔧-柯里化的基本概念" class="headerlink" title="🔧 柯里化的基本概念"></a>🔧 柯里化的基本概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurryingExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 传统方式：接受两个参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 柯里化方式：返回一个函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Function&lt;Integer, Integer&gt; <span class="title function_">addCurried</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b -&gt; a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 传统调用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> add(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 8</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 柯里化调用</span></span><br><span class="line">        Function&lt;Integer, Integer&gt; add3 = addCurried(<span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> add3.apply(<span class="number">5</span>); <span class="comment">// 8</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;传统方式: &quot;</span> + result1);</span><br><span class="line">        System.out.println(<span class="string">&quot;柯里化方式: &quot;</span> + result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🚀-柯里化的高级应用"><a href="#🚀-柯里化的高级应用" class="headerlink" title="🚀 柯里化的高级应用"></a>🚀 柯里化的高级应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedCurrying</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义柯里化接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CurriedFunction</span>&lt;T, U, R&gt; &#123;</span><br><span class="line">        Function&lt;U, R&gt; <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 三元函数的柯里化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CurriedFunction&lt;Integer, Integer, Function&lt;Integer, Integer&gt;&gt; </span><br><span class="line">        <span class="title function_">addThreeCurried</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a -&gt; b -&gt; c -&gt; a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    含义：</span></span><br><span class="line"><span class="comment">    接受一个 Integer 参数 a</span></span><br><span class="line"><span class="comment">    返回一个 Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt;</span></span><br><span class="line"><span class="comment">    这个返回的函数接受 Integer 参数 b</span></span><br><span class="line"><span class="comment">    再返回一个 Function&lt;Integer, Integer&gt;</span></span><br><span class="line"><span class="comment">    最后这个函数接受 Integer 参数 c</span></span><br><span class="line"><span class="comment">    返回最终的 Integer 结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建柯里化函数</span></span><br><span class="line">        CurriedFunction&lt;Integer, Integer, Function&lt;Integer, Integer&gt;&gt; curriedAdd = </span><br><span class="line">            addThreeCurried();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分步应用参数</span></span><br><span class="line">        Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; add5 = curriedAdd.apply(<span class="number">5</span>);</span><br><span class="line">        Function&lt;Integer, Integer&gt; add5And3 = add5.apply(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> add5And3.apply(<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;结果: &quot;</span> + result); <span class="comment">// 10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 链式调用</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result2</span> <span class="operator">=</span> curriedAdd.apply(<span class="number">1</span>).apply(<span class="number">2</span>).apply(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;链式结果: &quot;</span> + result2); <span class="comment">// 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎪-柯里化的实际应用场景"><a href="#🎪-柯里化的实际应用场景" class="headerlink" title="🎪 柯里化的实际应用场景"></a>🎪 柯里化的实际应用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurryingApplications</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置函数：先设置配置，再处理数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Function&lt;String, String&gt; <span class="title function_">createFormatter</span><span class="params">(String prefix, String suffix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data -&gt; prefix + data + suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证函数：先设置规则，再验证数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;String&gt; <span class="title function_">createValidator</span><span class="params">(<span class="type">int</span> minLength, <span class="type">int</span> maxLength)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str -&gt; str.length() &gt;= minLength &amp;&amp; str.length() &lt;= maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建格式化器</span></span><br><span class="line">        Function&lt;String, String&gt; formatter = createFormatter(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(formatter.apply(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// [Hello]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建验证器</span></span><br><span class="line">        Predicate&lt;String&gt; validator = createValidator(<span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(validator.test(<span class="string">&quot;Hi&quot;</span>));     <span class="comment">// false</span></span><br><span class="line">        System.out.println(validator.test(<span class="string">&quot;Hello&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(validator.test(<span class="string">&quot;VeryLongString&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在Stream中使用</span></span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        words.stream()</span><br><span class="line">              .filter(validator)</span><br><span class="line">              .map(formatter)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">// [Hello]</span></span><br><span class="line">        <span class="comment">// [World]</span></span><br><span class="line">        <span class="comment">// [Java]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="✨-闭包与柯里化的优势"><a href="#✨-闭包与柯里化的优势" class="headerlink" title="✨ 闭包与柯里化的优势"></a>✨ 闭包与柯里化的优势</h2><h3 id="1️⃣-部分应用（Partial-Application）"><a href="#1️⃣-部分应用（Partial-Application）" class="headerlink" title="1️⃣ 部分应用（Partial Application）"></a>1️⃣ 部分应用（Partial Application）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先固定部分参数，后续再提供其他参数</span></span><br><span class="line">Function&lt;Integer, Integer&gt; add5 = addCurried(<span class="number">5</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> add5.apply(<span class="number">3</span>); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h3 id="2️⃣-函数组合"><a href="#2️⃣-函数组合" class="headerlink" title="2️⃣ 函数组合"></a>2️⃣ 函数组合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 便于创建可复用的函数</span></span><br><span class="line">Function&lt;Integer, Integer&gt; multiplyBy2 = x -&gt; x * <span class="number">2</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; add5AndMultiplyBy2 = addCurried(<span class="number">5</span>).andThen(multiplyBy2);</span><br></pre></td></tr></table></figure><h3 id="3️⃣-延迟计算"><a href="#3️⃣-延迟计算" class="headerlink" title="3️⃣ 延迟计算"></a>3️⃣ 延迟计算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以在需要时才计算最终结果</span></span><br><span class="line">Supplier&lt;Integer&gt; lazyCalculation = () -&gt; addCurried(<span class="number">10</span>).apply(<span class="number">20</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> lazyCalculation.get(); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>总结</strong>：闭包让函数可以携带外部状态，柯里化让函数可以分步执行，两者都是函数式编程的重要特性。</p></blockquote><h1 id="🌊-Stream-API详解"><a href="#🌊-Stream-API详解" class="headerlink" title="🌊 Stream API详解"></a>🌊 Stream API详解</h1><p>Stream API是Java 8引入的函数式编程核心，它提供了一种声明式的方式来处理数据集合。</p><blockquote><p>📋 <strong>Stream API速查表</strong>：为了方便查阅，我为您准备了一个详细的Stream API速查表，包含了所有常用操作的语法和说明：<a href="/stream.html" target="_blank">点击查看Stream API速查表</a></p></blockquote><h2 id="🌊-Stream基础概念"><a href="#🌊-Stream基础概念" class="headerlink" title="🌊 Stream基础概念"></a>🌊 Stream基础概念</h2><p>Stream是一个数据流，它支持顺序和并行聚合操作。Stream不是数据结构，而是对数据源的抽象。</p><h3 id="⚡-Stream的特性"><a href="#⚡-Stream的特性" class="headerlink" title="⚡ Stream的特性"></a>⚡ Stream的特性</h3><ol><li><strong>惰性求值</strong>：中间操作不会立即执行</li><li><strong>一次使用</strong>：Stream只能被消费一次</li><li><strong>函数式风格</strong>：支持链式调用</li><li><strong>并行处理</strong>：支持并行流</li></ol><h2 id="🎯-Stream操作分类"><a href="#🎯-Stream操作分类" class="headerlink" title="🎯 Stream操作分类"></a>🎯 Stream操作分类</h2><blockquote><p>💡 <strong>提示</strong>：如果您需要快速查阅Stream API的所有操作方法，可以参考我们的<a href="/stream.html" target="_blank">Stream API速查表</a>，它包含了完整的操作分类和语法说明。</p></blockquote><h3 id="1️⃣-创建Stream"><a href="#1️⃣-创建Stream" class="headerlink" title="1️⃣ 创建Stream"></a>1️⃣ 创建Stream</h3><h4 id="🏗️-基础创建方法"><a href="#🏗️-基础创建方法" class="headerlink" title="🏗️ 基础创建方法"></a>🏗️ 基础创建方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCreation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 从集合创建</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 从数组创建</span></span><br><span class="line">        String[] array = &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream2 = Arrays.stream(array);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 直接创建</span></span><br><span class="line">        Stream&lt;String&gt; stream3 = Stream.of(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 创建空流</span></span><br><span class="line">        Stream&lt;String&gt; emptyStream = Stream.empty();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 创建无限流</span></span><br><span class="line">        Stream&lt;Integer&gt; infiniteStream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 生成流</span></span><br><span class="line">        Stream&lt;Double&gt; randomStream = Stream.generate(Math::random);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 7. 并行流</span></span><br><span class="line">        Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔢-数值流创建"><a href="#🔢-数值流创建" class="headerlink" title="🔢 数值流创建"></a>🔢 数值流创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumericStreamCreation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// IntStream - 整数流</span></span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">intStream1</span> <span class="operator">=</span> IntStream.range(<span class="number">1</span>, <span class="number">5</span>);        <span class="comment">// 1,2,3,4 (不含5)</span></span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">intStream2</span> <span class="operator">=</span> IntStream.rangeClosed(<span class="number">1</span>, <span class="number">5</span>);  <span class="comment">// 1,2,3,4,5 (含5)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// LongStream - 长整型流</span></span><br><span class="line">        <span class="type">LongStream</span> <span class="variable">longStream</span> <span class="operator">=</span> LongStream.rangeClosed(<span class="number">1L</span>, <span class="number">1000000L</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// DoubleStream - 双精度流</span></span><br><span class="line">        <span class="type">DoubleStream</span> <span class="variable">doubleStream</span> <span class="operator">=</span> DoubleStream.of(<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从数组创建数值流</span></span><br><span class="line">        <span class="type">int</span>[] intArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">fromArray</span> <span class="operator">=</span> Arrays.stream(intArray);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从集合创建数值流</span></span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">fromCollection</span> <span class="operator">=</span> numbers.stream().mapToInt(Integer::intValue);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;IntStream range: &quot;</span> + Arrays.toString(intStream1.toArray()));</span><br><span class="line">        System.out.println(<span class="string">&quot;IntStream rangeClosed: &quot;</span> + Arrays.toString(intStream2.toArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔄-高级创建方法"><a href="#🔄-高级创建方法" class="headerlink" title="🔄 高级创建方法"></a>🔄 高级创建方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedStreamCreation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 迭代创建 - 生成斐波那契数列</span></span><br><span class="line">        Stream.iterate(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, t -&gt; <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;t[<span class="number">1</span>], t[<span class="number">0</span>] + t[<span class="number">1</span>]&#125;)</span><br><span class="line">              .limit(<span class="number">10</span>)</span><br><span class="line">              .map(t -&gt; t[<span class="number">0</span>])</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 生成器创建 - 随机数流</span></span><br><span class="line">        Stream.generate(() -&gt; (<span class="type">int</span>)(Math.random() * <span class="number">100</span>))</span><br><span class="line">              .limit(<span class="number">5</span>)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 合并流</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream2 = Stream.of(<span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; merged = Stream.concat(stream1, stream2);</span><br><span class="line">        merged.forEach(System.out::println); <span class="comment">// A B C X Y Z</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 构建器模式</span></span><br><span class="line">        Stream&lt;String&gt; builtStream = Stream.&lt;String&gt;builder()</span><br><span class="line">                .add(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">                .add(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">                .add(<span class="string">&quot;Java&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        builtStream.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2️⃣-中间操作（Intermediate-Operations）"><a href="#2️⃣-中间操作（Intermediate-Operations）" class="headerlink" title="2️⃣ 中间操作（Intermediate Operations）"></a>2️⃣ 中间操作（Intermediate Operations）</h3><p>中间操作返回新的Stream，支持链式调用。</p><h4 id="🔍-过滤（Filter）"><a href="#🔍-过滤（Filter）" class="headerlink" title="🔍 过滤（Filter）"></a>🔍 过滤（Filter）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamFilter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 过滤偶数</span></span><br><span class="line">        List&lt;Integer&gt; evenNumbers = numbers.stream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;偶数: &quot;</span> + evenNumbers); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 过滤大于5的数</span></span><br><span class="line">        List&lt;Integer&gt; greaterThan5 = numbers.stream()</span><br><span class="line">                .filter(n -&gt; n &gt; <span class="number">5</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;大于5的数: &quot;</span> + greaterThan5); <span class="comment">// [6, 7, 8, 9, 10]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 组合条件</span></span><br><span class="line">        List&lt;Integer&gt; result = numbers.stream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .filter(n -&gt; n &gt; <span class="number">5</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;偶数且大于5: &quot;</span> + result); <span class="comment">// [6, 8, 10]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用Predicate组合</span></span><br><span class="line">        Predicate&lt;Integer&gt; isEven = n -&gt; n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">        Predicate&lt;Integer&gt; isGreaterThan5 = n -&gt; n &gt; <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; combined = numbers.stream()</span><br><span class="line">                .filter(isEven.and(isGreaterThan5))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;组合条件: &quot;</span> + combined); <span class="comment">// [6, 8, 10]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="✂️-截取操作"><a href="#✂️-截取操作" class="headerlink" title="✂️ 截取操作"></a>✂️ 截取操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamSlicing</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;elderberry&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// skip - 跳过前n个元素</span></span><br><span class="line">        List&lt;String&gt; skipResult = words.stream()</span><br><span class="line">                .skip(<span class="number">2</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;跳过前2个: &quot;</span> + skipResult); <span class="comment">// [cherry, date, elderberry]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// limit - 限制元素数量</span></span><br><span class="line">        List&lt;String&gt; limitResult = words.stream()</span><br><span class="line">                .limit(<span class="number">3</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;限制3个: &quot;</span> + limitResult); <span class="comment">// [apple, banana, cherry]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// takeWhile - 取满足条件的元素（Java 9+）</span></span><br><span class="line">        List&lt;String&gt; takeWhileResult = words.stream()</span><br><span class="line">                .takeWhile(s -&gt; s.length() &lt; <span class="number">7</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;长度小于7: &quot;</span> + takeWhileResult); <span class="comment">// [apple, banana, cherry, date]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dropWhile - 丢弃满足条件的元素（Java 9+）</span></span><br><span class="line">        List&lt;String&gt; dropWhileResult = words.stream()</span><br><span class="line">                .dropWhile(s -&gt; s.length() &lt; <span class="number">7</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;丢弃长度小于7的: &quot;</span> + dropWhileResult); <span class="comment">// [elderberry]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔄-去重与排序"><a href="#🔄-去重与排序" class="headerlink" title="🔄 去重与排序"></a>🔄 去重与排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDistinctAndSort</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// distinct - 去重</span></span><br><span class="line">        List&lt;Integer&gt; distinct = numbers.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;去重: &quot;</span> + distinct); <span class="comment">// [3, 1, 4, 5, 9, 2, 6]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// sorted - 自然排序</span></span><br><span class="line">        List&lt;Integer&gt; sorted = numbers.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;排序: &quot;</span> + sorted); <span class="comment">// [1, 2, 3, 4, 5, 6, 9]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// sorted - 自定义排序</span></span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>);</span><br><span class="line">        List&lt;String&gt; customSorted = words.stream()</span><br><span class="line">                .sorted((a, b) -&gt; Integer.compare(a.length(), b.length()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;按长度排序: &quot;</span> + customSorted); <span class="comment">// [date, apple, banana, cherry]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// sorted - 方法引用</span></span><br><span class="line">        List&lt;String&gt; methodRefSorted = words.stream()</span><br><span class="line">                .sorted(Comparator.comparing(String::length))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">&quot;方法引用排序: &quot;</span> + methodRefSorted); <span class="comment">// [date, apple, banana, cherry]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🗺️-映射（Map）"><a href="#🗺️-映射（Map）" class="headerlink" title="🗺️ 映射（Map）"></a>🗺️ 映射（Map）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamMap</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;stream&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转换为大写</span></span><br><span class="line">        List&lt;String&gt; upperCase = words.stream()</span><br><span class="line">                .map(String::toUpperCase)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;大写: &quot;</span> + upperCase); <span class="comment">// [HELLO, WORLD, JAVA, STREAM]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取长度</span></span><br><span class="line">        List&lt;Integer&gt; lengths = words.stream()</span><br><span class="line">                .map(String::length)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;长度: &quot;</span> + lengths); <span class="comment">// [5, 5, 4, 6]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 复杂映射</span></span><br><span class="line">        List&lt;String&gt; result = words.stream()</span><br><span class="line">                .map(s -&gt; s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + s.substring(<span class="number">1</span>))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;首字母大写: &quot;</span> + result); <span class="comment">// [Hello, World, Java, Stream]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔄-数值流映射"><a href="#🔄-数值流映射" class="headerlink" title="🔄 数值流映射"></a>🔄 数值流映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumericStreamMapping</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; numbers = Arrays.asList(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// mapToInt - 转换为IntStream</span></span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .mapToInt(Integer::parseInt);</span><br><span class="line">        System.out.println(<span class="string">&quot;IntStream: &quot;</span> + Arrays.toString(intStream.toArray())); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// mapToLong - 转换为LongStream</span></span><br><span class="line">        <span class="type">LongStream</span> <span class="variable">longStream</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .mapToLong(Long::parseLong);</span><br><span class="line">        System.out.println(<span class="string">&quot;LongStream: &quot;</span> + Arrays.toString(longStream.toArray())); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// mapToDouble - 转换为DoubleStream</span></span><br><span class="line">        <span class="type">DoubleStream</span> <span class="variable">doubleStream</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .mapToDouble(Double::parseDouble);</span><br><span class="line">        System.out.println(<span class="string">&quot;DoubleStream: &quot;</span> + Arrays.toString(doubleStream.toArray())); <span class="comment">// [1.0, 2.0, 3.0, 4.0, 5.0]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 数值流操作</span></span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalLength</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .mapToInt(String::length)</span><br><span class="line">                .sum();</span><br><span class="line">        System.out.println(<span class="string">&quot;总长度: &quot;</span> + totalLength); <span class="comment">// 17</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 平均值</span></span><br><span class="line">        <span class="type">OptionalDouble</span> <span class="variable">avgLength</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .mapToInt(String::length)</span><br><span class="line">                .average();</span><br><span class="line">        avgLength.ifPresent(avg -&gt; System.out.println(<span class="string">&quot;平均长度: &quot;</span> + avg)); <span class="comment">// 5.67</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔍-调试操作"><a href="#🔍-调试操作" class="headerlink" title="🔍 调试操作"></a>🔍 调试操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDebugging</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// peek - 调试中间结果</span></span><br><span class="line">        List&lt;Integer&gt; result = numbers.stream()</span><br><span class="line">                .peek(n -&gt; System.out.println(<span class="string">&quot;原始: &quot;</span> + n))</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .peek(n -&gt; System.out.println(<span class="string">&quot;过滤后: &quot;</span> + n))</span><br><span class="line">                .map(n -&gt; n * <span class="number">2</span>)</span><br><span class="line">                .peek(n -&gt; System.out.println(<span class="string">&quot;映射后: &quot;</span> + n))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最终结果: &quot;</span> + result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// 原始: 1</span></span><br><span class="line">        <span class="comment">// 原始: 2</span></span><br><span class="line">        <span class="comment">// 过滤后: 2</span></span><br><span class="line">        <span class="comment">// 映射后: 4</span></span><br><span class="line">        <span class="comment">// 原始: 3</span></span><br><span class="line">        <span class="comment">// 原始: 4</span></span><br><span class="line">        <span class="comment">// 过滤后: 4</span></span><br><span class="line">        <span class="comment">// 映射后: 8</span></span><br><span class="line">        <span class="comment">// 原始: 5</span></span><br><span class="line">        <span class="comment">// 最终结果: [4, 8]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="📦-扁平化（FlatMap）"><a href="#📦-扁平化（FlatMap）" class="headerlink" title="📦 扁平化（FlatMap）"></a>📦 扁平化（FlatMap）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamFlatMap</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; nestedList = Arrays.asList(</span><br><span class="line">                Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>),</span><br><span class="line">                Arrays.asList(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>),</span><br><span class="line">                Arrays.asList(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 扁平化</span></span><br><span class="line">        List&lt;String&gt; flattened = nestedList.stream()</span><br><span class="line">                .flatMap(List::stream)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;扁平化结果: &quot;</span> + flattened); <span class="comment">// [a, b, c, d, e, f, g, h, i]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符串分割示例</span></span><br><span class="line">        List&lt;String&gt; sentences = Arrays.asList(<span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Java Stream&quot;</span>, <span class="string">&quot;Functional Programming&quot;</span>);</span><br><span class="line">        List&lt;String&gt; words = sentences.stream()</span><br><span class="line">                .flatMap(sentence -&gt; Arrays.stream(sentence.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;所有单词: &quot;</span> + words); <span class="comment">// [Hello, World, Java, Stream, Functional, Programming]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3️⃣-终结操作（Terminal-Operations）"><a href="#3️⃣-终结操作（Terminal-Operations）" class="headerlink" title="3️⃣ 终结操作（Terminal Operations）"></a>3️⃣ 终结操作（Terminal Operations）</h3><p>终结操作会触发Stream的执行，返回具体的结果。</p><h4 id="📥-收集（Collect）"><a href="#📥-收集（Collect）" class="headerlink" title="📥 收集（Collect）"></a>📥 收集（Collect）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCollect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;elderberry&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集到List</span></span><br><span class="line">        List&lt;String&gt; longWords = words.stream()</span><br><span class="line">                .filter(s -&gt; s.length() &gt; <span class="number">5</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集到Set</span></span><br><span class="line">        Set&lt;String&gt; uniqueWords = words.stream()</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集到Map</span></span><br><span class="line">        Map&lt;String, Integer&gt; wordLengthMap = words.stream()</span><br><span class="line">                .collect(Collectors.toMap(</span><br><span class="line">                        Function.identity(),</span><br><span class="line">                        String::length</span><br><span class="line">                ));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集到字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">joined</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;长单词: &quot;</span> + longWords);</span><br><span class="line">        System.out.println(<span class="string">&quot;唯一单词: &quot;</span> + uniqueWords);</span><br><span class="line">        System.out.println(<span class="string">&quot;单词长度映射: &quot;</span> + wordLengthMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;连接字符串: &quot;</span> + joined);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔍-查找操作"><a href="#🔍-查找操作" class="headerlink" title="🔍 查找操作"></a>🔍 查找操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamSearch</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// findFirst - 查找第一个元素</span></span><br><span class="line">        Optional&lt;Integer&gt; first = numbers.stream()</span><br><span class="line">                .filter(n -&gt; n &gt; <span class="number">5</span>)</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个大于5的数: &quot;</span> + first.orElse(-<span class="number">1</span>)); <span class="comment">// 6</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// findAny - 查找任意一个元素（并行流中更有效）</span></span><br><span class="line">        Optional&lt;Integer&gt; any = numbers.stream()</span><br><span class="line">                .filter(n -&gt; n &gt; <span class="number">5</span>)</span><br><span class="line">                .findAny();</span><br><span class="line">        System.out.println(<span class="string">&quot;任意一个大于5的数: &quot;</span> + any.orElse(-<span class="number">1</span>)); <span class="comment">// 6</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 并行流中的findAny</span></span><br><span class="line">        Optional&lt;Integer&gt; parallelAny = numbers.parallelStream()</span><br><span class="line">                .filter(n -&gt; n &gt; <span class="number">5</span>)</span><br><span class="line">                .findAny();</span><br><span class="line">        System.out.println(<span class="string">&quot;并行流中任意一个: &quot;</span> + parallelAny.orElse(-<span class="number">1</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 空流的情况</span></span><br><span class="line">        Optional&lt;Integer&gt; empty = Stream.&lt;Integer&gt;empty()</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;空流查找: &quot;</span> + empty.isPresent()); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="✅-匹配操作"><a href="#✅-匹配操作" class="headerlink" title="✅ 匹配操作"></a>✅ 匹配操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamMatching</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// anyMatch - 是否有任意一个满足条件</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasEven</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .anyMatch(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否有偶数: &quot;</span> + hasEven); <span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// allMatch - 是否所有元素都满足条件</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allPositive</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .allMatch(n -&gt; n &gt; <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否都为正数: &quot;</span> + allPositive); <span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// noneMatch - 是否没有元素满足条件</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">noneNegative</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .noneMatch(n -&gt; n &lt; <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否没有负数: &quot;</span> + noneNegative); <span class="comment">// true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 短路特性演示</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">shortCircuit</span> <span class="operator">=</span> Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">                .peek(n -&gt; System.out.println(<span class="string">&quot;检查: &quot;</span> + n))</span><br><span class="line">                .anyMatch(n -&gt; n &gt; <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;短路结果: &quot;</span> + shortCircuit);</span><br><span class="line">        <span class="comment">// 输出：检查: 1, 检查: 2, 检查: 3, 检查: 4, 短路结果: true</span></span><br><span class="line">        <span class="comment">// 注意：不会检查5，因为4已经满足条件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🎯-聚合操作"><a href="#🎯-聚合操作" class="headerlink" title="🎯 聚合操作"></a>🎯 聚合操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamAggregation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// count - 计数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数个数: &quot;</span> + count); <span class="comment">// 2</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// min - 最小值</span></span><br><span class="line">        Optional&lt;Integer&gt; min = numbers.stream()</span><br><span class="line">                .min(Integer::compareTo);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小值: &quot;</span> + min.orElse(-<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// max - 最大值</span></span><br><span class="line">        Optional&lt;Integer&gt; max = numbers.stream()</span><br><span class="line">                .max(Integer::compareTo);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值: &quot;</span> + max.orElse(-<span class="number">1</span>)); <span class="comment">// 5</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自定义比较器</span></span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>);</span><br><span class="line">        Optional&lt;String&gt; shortest = words.stream()</span><br><span class="line">                .min(Comparator.comparing(String::length));</span><br><span class="line">        System.out.println(<span class="string">&quot;最短单词: &quot;</span> + shortest.orElse(<span class="string">&quot;&quot;</span>)); <span class="comment">// apple</span></span><br><span class="line">        </span><br><span class="line">        Optional&lt;String&gt; longest = words.stream()</span><br><span class="line">                .max(Comparator.comparing(String::length));</span><br><span class="line">        System.out.println(<span class="string">&quot;最长单词: &quot;</span> + longest.orElse(<span class="string">&quot;&quot;</span>)); <span class="comment">// banana</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔄-归约（Reduce）"><a href="#🔄-归约（Reduce）" class="headerlink" title="🔄 归约（Reduce）"></a>🔄 归约（Reduce）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamReduce</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求最大值</span></span><br><span class="line">        Optional&lt;Integer&gt; max = numbers.stream()</span><br><span class="line">                .reduce(Integer::max);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求最小值</span></span><br><span class="line">        Optional&lt;Integer&gt; min = numbers.stream()</span><br><span class="line">                .reduce(Integer::min);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符串连接</span></span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .reduce(<span class="string">&quot;&quot;</span>, (a, b) -&gt; a + <span class="string">&quot; &quot;</span> + b);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;求和: &quot;</span> + sum);           <span class="comment">// 15</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值: &quot;</span> + max.get());   <span class="comment">// 5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小值: &quot;</span> + min.get());   <span class="comment">// 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;连接: &quot;</span> + result.trim()); <span class="comment">// Hello World Java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="📦-高级收集器"><a href="#📦-高级收集器" class="headerlink" title="📦 高级收集器"></a>📦 高级收集器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedCollectors</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;elderberry&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分组收集</span></span><br><span class="line">        Map&lt;Integer, List&lt;String&gt;&gt; groupedByLength = words.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(String::length));</span><br><span class="line">        System.out.println(<span class="string">&quot;按长度分组: &quot;</span> + groupedByLength);</span><br><span class="line">        <span class="comment">// &#123;5=[apple, cherry], 6=[banana], 4=[date], 10=[elderberry]&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分区收集</span></span><br><span class="line">        Map&lt;Boolean, List&lt;String&gt;&gt; partitioned = words.stream()</span><br><span class="line">                .collect(Collectors.partitioningBy(s -&gt; s.length() &gt; <span class="number">5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;按长度分区: &quot;</span> + partitioned);</span><br><span class="line">        <span class="comment">// &#123;false=[apple, cherry, date], true=[banana, elderberry]&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 统计收集</span></span><br><span class="line">        <span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .collect(Collectors.summarizingInt(String::length));</span><br><span class="line">        System.out.println(<span class="string">&quot;长度统计: &quot;</span> + stats);</span><br><span class="line">        <span class="comment">// IntSummaryStatistics&#123;count=5, sum=31, min=4, average=6.200000, max=10&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 连接收集</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">joined</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;连接结果: &quot;</span> + joined);</span><br><span class="line">        <span class="comment">// [apple, banana, cherry, date, elderberry]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 映射收集</span></span><br><span class="line">        Map&lt;String, Integer&gt; wordToLength = words.stream()</span><br><span class="line">                .collect(Collectors.toMap(</span><br><span class="line">                        Function.identity(),</span><br><span class="line">                        String::length,</span><br><span class="line">                        (existing, replacement) -&gt; existing <span class="comment">// 处理重复键</span></span><br><span class="line">                ));</span><br><span class="line">        System.out.println(<span class="string">&quot;单词到长度映射: &quot;</span> + wordToLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔄-自定义收集器"><a href="#🔄-自定义收集器" class="headerlink" title="🔄 自定义收集器"></a>🔄 自定义收集器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCollector</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义收集器：收集为自定义对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StringStats</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> count;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> totalLength;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String longest;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String shortest;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StringStats</span><span class="params">(<span class="type">int</span> count, <span class="type">int</span> totalLength, String longest, String shortest)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.count = count;</span><br><span class="line">            <span class="built_in">this</span>.totalLength = totalLength;</span><br><span class="line">            <span class="built_in">this</span>.longest = longest;</span><br><span class="line">            <span class="built_in">this</span>.shortest = shortest;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;StringStats&#123;count=%d, totalLength=%d, longest=&#x27;%s&#x27;, shortest=&#x27;%s&#x27;&#125;&quot;</span>, </span><br><span class="line">                    count, totalLength, longest, shortest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用自定义收集器</span></span><br><span class="line">        <span class="type">StringStats</span> <span class="variable">stats</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .collect(Collector.of(</span><br><span class="line">                        () -&gt; <span class="keyword">new</span> <span class="title class_">StringStats</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">                        (acc, word) -&gt; &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">newCount</span> <span class="operator">=</span> acc.count + <span class="number">1</span>;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">newTotalLength</span> <span class="operator">=</span> acc.totalLength + word.length();</span><br><span class="line">                            <span class="type">String</span> <span class="variable">newLongest</span> <span class="operator">=</span> acc.longest.isEmpty() || word.length() &gt; acc.longest.length() ? word : acc.longest;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">newShortest</span> <span class="operator">=</span> acc.shortest.isEmpty() || word.length() &lt; acc.shortest.length() ? word : acc.shortest;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringStats</span>(newCount, newTotalLength, newLongest, newShortest);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        (acc1, acc2) -&gt; <span class="keyword">new</span> <span class="title class_">StringStats</span>(</span><br><span class="line">                                acc1.count + acc2.count,</span><br><span class="line">                                acc1.totalLength + acc2.totalLength,</span><br><span class="line">                                acc1.longest.length() &gt; acc2.longest.length() ? acc1.longest : acc2.longest,</span><br><span class="line">                                acc1.shortest.length() &lt; acc2.shortest.length() ? acc1.shortest : acc2.shortest</span><br><span class="line">                        )</span><br><span class="line">                ));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;自定义统计: &quot;</span> + stats);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🎓-Stream实际应用示例"><a href="#🎓-Stream实际应用示例" class="headerlink" title="🎓 Stream实际应用示例"></a>🎓 Stream实际应用示例</h2><h3 id="📊-学生成绩处理"><a href="#📊-学生成绩处理" class="headerlink" title="📊 学生成绩处理"></a>📊 学生成绩处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentGradeProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Integer&gt; grades;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, List&lt;Integer&gt; grades)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.grades = grades;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">        <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getGrades</span><span class="params">()</span> &#123; <span class="keyword">return</span> grades; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAverageGrade</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> grades.stream()</span><br><span class="line">                    .mapToInt(Integer::intValue)</span><br><span class="line">                    .average()</span><br><span class="line">                    .orElse(<span class="number">0.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;Student&#123;name=&#x27;%s&#x27;, age=%d, avgGrade=%.2f&#125;&quot;</span>, </span><br><span class="line">                    name, age, getAverageGrade());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, Arrays.asList(<span class="number">85</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">92</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">19</span>, Arrays.asList(<span class="number">76</span>, <span class="number">88</span>, <span class="number">82</span>, <span class="number">90</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">21</span>, Arrays.asList(<span class="number">92</span>, <span class="number">95</span>, <span class="number">88</span>, <span class="number">94</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">20</span>, Arrays.asList(<span class="number">68</span>, <span class="number">75</span>, <span class="number">72</span>, <span class="number">80</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;钱七&quot;</span>, <span class="number">22</span>, Arrays.asList(<span class="number">88</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">90</span>))</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 找出平均分大于85的学生</span></span><br><span class="line">        List&lt;Student&gt; excellentStudents = students.stream()</span><br><span class="line">                .filter(s -&gt; s.getAverageGrade() &gt; <span class="number">85</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;优秀学生:&quot;</span>);</span><br><span class="line">        excellentStudents.forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 按年龄分组</span></span><br><span class="line">        Map&lt;Integer, List&lt;Student&gt;&gt; studentsByAge = students.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n按年龄分组:&quot;</span>);</span><br><span class="line">        studentsByAge.forEach((age, studentList) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄 &quot;</span> + age + <span class="string">&quot;: &quot;</span> + studentList.size() + <span class="string">&quot; 人&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 计算每个年龄段的平均分</span></span><br><span class="line">        Map&lt;Integer, Double&gt; averageByAge = students.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(</span><br><span class="line">                        Student::getAge,</span><br><span class="line">                        Collectors.averagingDouble(Student::getAverageGrade)</span><br><span class="line">                ));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n各年龄段平均分:&quot;</span>);</span><br><span class="line">        averageByAge.forEach((age, avg) -&gt; </span><br><span class="line">                System.out.printf(<span class="string">&quot;年龄 %d: %.2f%n&quot;</span>, age, avg));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 找出最高分的学生</span></span><br><span class="line">        Optional&lt;Student&gt; topStudent = students.stream()</span><br><span class="line">                .max(Comparator.comparing(Student::getAverageGrade));</span><br><span class="line">        </span><br><span class="line">        topStudent.ifPresent(s -&gt; System.out.println(<span class="string">&quot;\n最高分学生: &quot;</span> + s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="⚡-Stream性能优化"><a href="#⚡-Stream性能优化" class="headerlink" title="⚡ Stream性能优化"></a>⚡ Stream性能优化</h2><blockquote><p>🔧 <strong>性能优化参考</strong>：更多Stream性能优化技巧和最佳实践，请参考<a href="/stream.html" target="_blank">Stream API速查表</a>中的性能优化部分。</p></blockquote><h3 id="1️⃣-使用原始类型流"><a href="#1️⃣-使用原始类型流" class="headerlink" title="1️⃣ 使用原始类型流"></a>1️⃣ 使用原始类型流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamPerformance</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">                .boxed()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用IntStream（推荐）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .mapToInt(Integer::intValue)</span><br><span class="line">                .sum();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用Stream&lt;Integer&gt;（较慢）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;IntStream耗时: &quot;</span> + (end1 - start1) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Stream&lt;Integer&gt;耗时: &quot;</span> + (end2 - start2) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2️⃣-并行流的使用"><a href="#2️⃣-并行流的使用" class="headerlink" title="2️⃣ 并行流的使用"></a>2️⃣ 并行流的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParallelStreamExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10000000</span>)</span><br><span class="line">                .boxed()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 串行流</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">count1</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .count();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 并行流</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">count2</span> <span class="operator">=</span> numbers.parallelStream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .count();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;串行流结果: &quot;</span> + count1 + <span class="string">&quot;, 耗时: &quot;</span> + (end1 - start1) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;并行流结果: &quot;</span> + count2 + <span class="string">&quot;, 耗时: &quot;</span> + (end2 - start2) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>Stream最佳实践</strong>：</p><ol><li>优先使用原始类型流（IntStream, LongStream, DoubleStream）</li><li>大数据量时考虑并行流</li><li>避免在Stream中进行复杂计算</li><li>合理使用中间操作，避免不必要的操作</li></ol></blockquote><h1 id="🎉-总结与最佳实践"><a href="#🎉-总结与最佳实践" class="headerlink" title="🎉 总结与最佳实践"></a>🎉 总结与最佳实践</h1><h2 id="🔄-函数式编程核心概念回顾"><a href="#🔄-函数式编程核心概念回顾" class="headerlink" title="🔄 函数式编程核心概念回顾"></a>🔄 函数式编程核心概念回顾</h2><p>通过本文的学习，我们深入了解了Java函数式编程的核心概念。</p><h3 id="1️⃣-函数式编程基础"><a href="#1️⃣-函数式编程基础" class="headerlink" title="1️⃣ 函数式编程基础"></a>1️⃣ 函数式编程基础</h3><ul><li><strong>函数即规则</strong>：确定性、无副作用、不变性</li><li><strong>Lambda表达式</strong>：简洁的函数表示法</li><li><strong>函数式接口</strong>：只包含一个抽象方法的接口</li></ul><h3 id="2️⃣-核心特性"><a href="#2️⃣-核心特性" class="headerlink" title="2️⃣ 核心特性"></a>2️⃣ 核心特性</h3><ul><li><strong>闭包</strong>：函数对象与外部变量的绑定</li><li><strong>柯里化</strong>：多参数函数的分步执行</li><li><strong>方法引用</strong>：Lambda表达式的简化形式</li><li><strong>Stream API</strong>：声明式数据处理</li></ul><h2 id="🚀-性能优化建议"><a href="#🚀-性能优化建议" class="headerlink" title="🚀 性能优化建议"></a>🚀 性能优化建议</h2><h3 id="1️⃣-选择合适的函数式接口"><a href="#1️⃣-选择合适的函数式接口" class="headerlink" title="1️⃣ 选择合适的函数式接口"></a>1️⃣ 选择合适的函数式接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐：使用内置接口</span></span><br><span class="line">Predicate&lt;String&gt; isLong = s -&gt; s.length() &gt; <span class="number">5</span>;</span><br><span class="line">Function&lt;String, Integer&gt; getLength = String::length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免：重复定义相似接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StringPredicate</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2️⃣-Stream性能优化"><a href="#2️⃣-Stream性能优化" class="headerlink" title="2️⃣ Stream性能优化"></a>2️⃣ Stream性能优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐：使用原始类型流</span></span><br><span class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">    .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    .sum();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免：不必要的装箱拆箱</span></span><br><span class="line">Stream&lt;Integer&gt; boxedStream = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">    .boxed()</span><br><span class="line">    .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    .mapToInt(Integer::intValue)</span><br><span class="line">    .sum();</span><br></pre></td></tr></table></figure><h3 id="3️⃣-并行流使用原则"><a href="#3️⃣-并行流使用原则" class="headerlink" title="3️⃣ 并行流使用原则"></a>3️⃣ 并行流使用原则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大数据量时使用并行流</span></span><br><span class="line">List&lt;Integer&gt; largeList = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10000000</span>)</span><br><span class="line">    .boxed()</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据量小时使用串行流</span></span><br><span class="line">List&lt;Integer&gt; smallList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="🎯-实际应用场景"><a href="#🎯-实际应用场景" class="headerlink" title="🎯 实际应用场景"></a>🎯 实际应用场景</h2><h3 id="1️⃣-数据处理"><a href="#1️⃣-数据处理" class="headerlink" title="1️⃣ 数据处理"></a>1️⃣ 数据处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生成绩统计</span></span><br><span class="line">students.stream()</span><br><span class="line">    .filter(s -&gt; s.getAverageGrade() &gt; <span class="number">85</span>)</span><br><span class="line">    .collect(Collectors.groupingBy(Student::getAge))</span><br><span class="line">    .forEach((age, list) -&gt; System.out.println(<span class="string">&quot;年龄&quot;</span> + age + <span class="string">&quot;: &quot;</span> + list.size() + <span class="string">&quot;人&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="2️⃣-异步编程"><a href="#2️⃣-异步编程" class="headerlink" title="2️⃣ 异步编程"></a>2️⃣ 异步编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步任务处理</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; fetchData())</span><br><span class="line">    .thenApply(<span class="built_in">this</span>::processData)</span><br><span class="line">    .thenAccept(<span class="built_in">this</span>::saveResult)</span><br><span class="line">    .exceptionally(<span class="built_in">this</span>::handleError);</span><br></pre></td></tr></table></figure><h3 id="3️⃣-配置管理"><a href="#3️⃣-配置管理" class="headerlink" title="3️⃣ 配置管理"></a>3️⃣ 配置管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置验证</span></span><br><span class="line">Predicate&lt;String&gt; isValidConfig = config -&gt; </span><br><span class="line">    config != <span class="literal">null</span> &amp;&amp; !config.trim().isEmpty() &amp;&amp; config.length() &gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; validConfig = Optional.ofNullable(inputConfig)</span><br><span class="line">    .filter(isValidConfig)</span><br><span class="line">    .map(String::trim);</span><br></pre></td></tr></table></figure><h2 id="⚠️-常见陷阱与避免方法"><a href="#⚠️-常见陷阱与避免方法" class="headerlink" title="⚠️ 常见陷阱与避免方法"></a>⚠️ 常见陷阱与避免方法</h2><h3 id="1️⃣-闭包变量修改"><a href="#1️⃣-闭包变量修改" class="headerlink" title="1️⃣ 闭包变量修改"></a>1️⃣ 闭包变量修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：修改闭包变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).forEach(n -&gt; counter++); <span class="comment">// 编译错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：使用原子类或数组</span></span><br><span class="line"><span class="type">AtomicInteger</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).forEach(n -&gt; counter.incrementAndGet());</span><br></pre></td></tr></table></figure><h3 id="2️⃣-Stream重复使用"><a href="#2️⃣-Stream重复使用" class="headerlink" title="2️⃣ Stream重复使用"></a>2️⃣ Stream重复使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：重复使用Stream</span></span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">stream.filter(s -&gt; s.length() &gt; <span class="number">3</span>);</span><br><span class="line">stream.map(String::toUpperCase); <span class="comment">// 运行时异常</span></span><br><span class="line"><span class="comment">// 正确：每次创建新的Stream</span></span><br><span class="line">list.stream().filter(s -&gt; s.length() &gt; <span class="number">3</span>);</span><br><span class="line">list.stream().map(String::toUpperCase);</span><br></pre></td></tr></table></figure><h3 id="3️⃣-过度使用函数式编程"><a href="#3️⃣-过度使用函数式编程" class="headerlink" title="3️⃣ 过度使用函数式编程"></a>3️⃣ 过度使用函数式编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：过度复杂化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> list.stream()</span><br><span class="line">    .filter(s -&gt; s != <span class="literal">null</span>)</span><br><span class="line">    .filter(s -&gt; !s.isEmpty())</span><br><span class="line">    .map(s -&gt; s.trim())</span><br><span class="line">    .filter(s -&gt; s.length() &gt; <span class="number">0</span>)</span><br><span class="line">    .map(s -&gt; s.toUpperCase())</span><br><span class="line">    .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：保持简洁</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> list.stream()</span><br><span class="line">    .filter(Objects::nonNull)</span><br><span class="line">    .map(String::trim)</span><br><span class="line">    .filter(s -&gt; !s.isEmpty())</span><br><span class="line">    .map(String::toUpperCase)</span><br><span class="line">    .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="📚-学习建议"><a href="#📚-学习建议" class="headerlink" title="📚 学习建议"></a>📚 学习建议</h2><ol><li><strong>循序渐进</strong>：从简单的Lambda表达式开始，逐步学习高级特性</li><li><strong>实践为主</strong>：多写代码，多练习，在实际项目中应用</li><li><strong>性能意识</strong>：了解性能影响，合理选择使用场景</li><li><strong>代码可读性</strong>：函数式编程应该提高代码可读性，而不是相反</li></ol><h2 id="🎊-结语"><a href="#🎊-结语" class="headerlink" title="🎊 结语"></a>🎊 结语</h2><p>Java函数式编程为我们提供了一种全新的编程范式，它强调不可变性、声明式编程和函数组合。通过合理使用Lambda表达式、Stream API等特性，我们可以写出更简洁、更易维护的代码。<br>记住，函数式编程不是银弹，它应该与传统面向对象编程相结合，在合适的场景下发挥其优势。掌握函数式编程的核心概念和最佳实践，将大大提升我们的编程能力和代码质量。</p><blockquote><p>📚 <strong>延伸阅读</strong>：</p><ul><li><a href="https://www.oreilly.com/library/view/java-8-in/9781449333071/">Java 8函数式编程</a></li><li><a href="https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/">Effective Java 第三版</a></li><li><a href="https://www.oreilly.com/library/view/functional-thinking/9781449365519/">函数式编程思维</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
          <category> 编程思想 </category>
          
          <category> Lambda </category>
          
          <category> Stream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> Lambda </tag>
            
            <tag> Stream </tag>
            
            <tag> 编程范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora学习</title>
      <link href="/2025/10/02/typora%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/10/02/typora%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2025年10月学习规划</title>
      <link href="//october-learning-plan/"/>
      <url>//october-learning-plan/</url>
      
        <content type="html"><![CDATA[<h1 id="📅-2025年10月学习规划"><a href="#📅-2025年10月学习规划" class="headerlink" title="📅 2025年10月学习规划"></a>📅 2025年10月学习规划</h1><h2 id="🎯-学习目标"><a href="#🎯-学习目标" class="headerlink" title="🎯 学习目标"></a>🎯 学习目标</h2><p>国庆假期期间，为自己制定一些简单的学习目标，在放松的同时充实技术知识。</p><hr><h2 id="📚-技术学习"><a href="#📚-技术学习" class="headerlink" title="📚 技术学习"></a>📚 技术学习</h2><h3 id="🔧-编程技能复习"><a href="#🔧-编程技能复习" class="headerlink" title="🔧 编程技能复习"></a>🔧 编程技能复习</h3><ul><li><input checked="" disabled="" type="checkbox"> <strong>函数式编程复习</strong> - 整理学习笔记到博客(相关lambda原理需要更新，具体的应用需要在今后的实践中补充)</li><li><input disabled="" type="checkbox"> <strong>Git操作实践</strong> - 系统梳理Git工作流程并整理博客</li><li><input disabled="" type="checkbox"> <strong>Linux系统学习</strong> - 掌握常用命令并整理学习笔记</li><li><input disabled="" type="checkbox"> <strong>未完成项目整理</strong> - 梳理并规划项目完成计划</li></ul><hr><h2 id="🚀-个人技能提升"><a href="#🚀-个人技能提升" class="headerlink" title="🚀 个人技能提升"></a>🚀 个人技能提升</h2><h3 id="🤖-AI工具学习"><a href="#🤖-AI工具学习" class="headerlink" title="🤖 AI工具学习"></a>🤖 AI工具学习</h3><ul><li><input disabled="" type="checkbox"> <strong>AI Cursor使用总结</strong> - 整理使用经验和最佳实践</li><li><input disabled="" type="checkbox"> <strong>MCP协议学习</strong> - 了解Model Context Protocol的基本概念和应用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习规划 </tag>
            
            <tag> 技术提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片处理示例</title>
      <link href="//image-handling-example/"/>
      <url>//image-handling-example/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客图片处理最佳实践"><a href="#Hexo博客图片处理最佳实践" class="headerlink" title="Hexo博客图片处理最佳实践"></a>Hexo博客图片处理最佳实践</h1><h2 id="🎯-方案对比"><a href="#🎯-方案对比" class="headerlink" title="🎯 方案对比"></a>🎯 方案对比</h2><h3 id="方案1-使用source-images文件夹-推荐"><a href="#方案1-使用source-images文件夹-推荐" class="headerlink" title="方案1: 使用source&#x2F;images文件夹 (推荐)"></a>方案1: 使用source&#x2F;images文件夹 (推荐)</h3><p>这是最简单可靠的方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">技术架构图</span>](<span class="link">/images/tech-architecture.png</span>)</span><br></pre></td></tr></table></figure><p><strong>优点:</strong></p><ul><li>✅ 图片自动部署到GitHub</li><li>✅ 路径简单，不易出错</li><li>✅ 本地和线上路径一致</li></ul><h3 id="方案2-使用CDN加速"><a href="#方案2-使用CDN加速" class="headerlink" title="方案2: 使用CDN加速"></a>方案2: 使用CDN加速</h3><h4 id="jsDelivr-GitHub"><a href="#jsDelivr-GitHub" class="headerlink" title="jsDelivr + GitHub"></a>jsDelivr + GitHub</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">https://cdn.jsdelivr.net/gh/suoChina/suoChina.github.io@main/images/图片名.jpg</span>)</span><br></pre></td></tr></table></figure><h4 id="GitHub-Raw"><a href="#GitHub-Raw" class="headerlink" title="GitHub Raw"></a>GitHub Raw</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">https://raw.githubusercontent.com/suoChina/suoChina.github.io/main/images/图片名.jpg</span>)</span><br></pre></td></tr></table></figure><p><strong>优点:</strong></p><ul><li>✅ 加载速度快</li><li>✅ 减少GitHub仓库大小</li><li>✅ 支持图片压缩</li></ul><h3 id="方案3-文章资源文件夹"><a href="#方案3-文章资源文件夹" class="headerlink" title="方案3: 文章资源文件夹"></a>方案3: 文章资源文件夹</h3><p>创建与文章同名的文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source/_posts/</span><br><span class="line">├── 图片处理示例.md</span><br><span class="line">└── 图片处理示例/</span><br><span class="line">    ├── example1.png</span><br><span class="line">    └── example2.jpg</span><br></pre></td></tr></table></figure><p>在markdown中使用：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">示例图片1</span>](<span class="link">图片处理示例/example1.png</span>)</span><br><span class="line">![<span class="string">示例图片2</span>](<span class="link">图片处理示例/example2.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="🛠️-实际操作步骤"><a href="#🛠️-实际操作步骤" class="headerlink" title="🛠️ 实际操作步骤"></a>🛠️ 实际操作步骤</h2><h3 id="1-创建图片文件夹"><a href="#1-创建图片文件夹" class="headerlink" title="1. 创建图片文件夹"></a>1. 创建图片文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">source</span>/images</span><br></pre></td></tr></table></figure><h3 id="2-放置图片文件"><a href="#2-放置图片文件" class="headerlink" title="2. 放置图片文件"></a>2. 放置图片文件</h3><p>将图片文件放在 <code>source/images/</code> 目录下</p><h3 id="3-在文章中使用"><a href="#3-在文章中使用" class="headerlink" title="3. 在文章中使用"></a>3. 在文章中使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">/images/图片文件名.jpg</span>)</span><br></pre></td></tr></table></figure><h3 id="4-重新生成和部署"><a href="#4-重新生成和部署" class="headerlink" title="4. 重新生成和部署"></a>4. 重新生成和部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo generate</span><br><span class="line">npx hexo deploy</span><br></pre></td></tr></table></figure><h2 id="📝-最佳实践建议"><a href="#📝-最佳实践建议" class="headerlink" title="📝 最佳实践建议"></a>📝 最佳实践建议</h2><h3 id="图片命名规范"><a href="#图片命名规范" class="headerlink" title="图片命名规范"></a>图片命名规范</h3><ul><li>使用英文和数字</li><li>避免特殊字符和中文</li><li>使用描述性名称</li></ul><h3 id="图片格式选择"><a href="#图片格式选择" class="headerlink" title="图片格式选择"></a>图片格式选择</h3><ul><li><strong>PNG</strong>: 适合图标、截图、透明背景</li><li><strong>JPG</strong>: 适合照片、复杂图片</li><li><strong>WebP</strong>: 现代格式，体积小，质量高</li><li><strong>SVG</strong>: 矢量图，适合图标和简单图形</li></ul><h3 id="图片SEO优化"><a href="#图片SEO优化" class="headerlink" title="图片SEO优化"></a>图片SEO优化</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Vue.js组件生命周期图 - 详细展示了Vue组件的创建、更新和销毁过程</span>](<span class="link">/images/vue-lifecycle.png</span>)</span><br></pre></td></tr></table></figure><h2 id="🔍-常见问题排查"><a href="#🔍-常见问题排查" class="headerlink" title="🔍 常见问题排查"></a>🔍 常见问题排查</h2><h3 id="问题1-图片显示为链接"><a href="#问题1-图片显示为链接" class="headerlink" title="问题1: 图片显示为链接"></a>问题1: 图片显示为链接</h3><p><strong>原因</strong>: 图片路径错误或文件不存在<br><strong>解决</strong>: 检查文件路径和文件名</p><h3 id="问题2-本地显示正常，线上不显示"><a href="#问题2-本地显示正常，线上不显示" class="headerlink" title="问题2: 本地显示正常，线上不显示"></a>问题2: 本地显示正常，线上不显示</h3><p><strong>原因</strong>: 图片文件未部署到GitHub<br><strong>解决</strong>: 确保图片在source目录下</p><h3 id="问题3-图片加载慢"><a href="#问题3-图片加载慢" class="headerlink" title="问题3: 图片加载慢"></a>问题3: 图片加载慢</h3><p><strong>原因</strong>: 图片文件过大或网络问题<br><strong>解决</strong>: 压缩图片或使用CDN</p><h2 id="🎯-推荐实施步骤"><a href="#🎯-推荐实施步骤" class="headerlink" title="🎯 推荐实施步骤"></a>🎯 推荐实施步骤</h2><ol><li><strong>立即</strong>: 使用source&#x2F;images方案解决当前问题</li><li><strong>短期</strong>: 优化图片大小和格式</li><li><strong>长期</strong>: 考虑使用CDN加速</li><li><strong>持续</strong>: 建立图片管理规范</li></ol><hr><h2 id="💡-总结"><a href="#💡-总结" class="headerlink" title="💡 总结"></a>💡 总结</h2><p>选择合适的图片处理方案对于博客的加载速度和用户体验非常重要。建议从简单的source&#x2F;images方案开始，随着博客内容增加再考虑使用CDN加速。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 图片处理 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/10/02/hello-world/"/>
      <url>/2025/10/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git操作指南 - 从入门到精通</title>
      <link href="//git-operation-guide/"/>
      <url>//git-operation-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="Git操作指南-从入门到精通-🚀"><a href="#Git操作指南-从入门到精通-🚀" class="headerlink" title="Git操作指南 - 从入门到精通 🚀"></a>Git操作指南 - 从入门到精通 🚀</h1><blockquote><p>本文基于 <a href="https://liaoxuefeng.com/books/git/introduction/index.html">廖雪峰Git教程</a> 和 <a href="https://mofan212.github.io/posts/Git/">Mofan的Git理论与使用</a> 整理，旨在提供一份实用且全面的Git操作指南。📚</p></blockquote><h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><ul><li><a href="#1-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">1. 版本控制</a></li><li><a href="#2-git%E7%9A%84%E5%8E%86%E5%8F%B2">2. Git的历史</a></li><li><a href="#3-git%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">3. Git环境配置</a></li><li><a href="#4-git%E5%9F%BA%E6%9C%AC%E7%90%86%E8%AE%BA">4. Git基本理论</a></li><li><a href="#5-git%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA">5. Git项目搭建</a></li><li><a href="#6-git%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C">6. Git文件操作</a></li><li><a href="#7-github%E7%9A%84%E4%BD%BF%E7%94%A8">7. GitHub的使用</a></li><li><a href="#8-idea%E4%B8%AD%E9%9B%86%E6%88%90git">8. IDEA中集成Git</a></li><li><a href="#9-git%E5%88%86%E6%94%AF">9. Git分支</a></li><li><a href="#10-%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C">10. 团队协作</a></li><li><a href="#11-%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">11. 其他常用命令</a></li><li><a href="#12-%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B">12. 其他操作流程</a></li><li><a href="#13-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98">13. 遇到的问题</a></li><li><a href="#14-%E5%85%B6%E4%BB%96%E8%A1%A5%E5%85%85%E4%BF%A1%E6%81%AF">14. 其他补充信息</a></li><li><a href="#15-%E5%8F%AF%E8%83%BD%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7">15. 可能有用的小工具</a></li></ul><h2 id="1-版本控制-📚"><a href="#1-版本控制-📚" class="headerlink" title="1. 版本控制 📚"></a>1. 版本控制 📚</h2><h3 id="1-1-版本控制含义-📖"><a href="#1-1-版本控制含义-📖" class="headerlink" title="1.1 版本控制含义 📖"></a>1.1 版本控制含义 📖</h3><p>版本控制（Revision Control）是一种在开发过程中对文件、目录或工程等内容的修改历史进行管理的软件工程技术，使用版本控制后可以通过查看历史修改记录，更方便地恢复到先前的版本。</p><p>版本控制可以：</p><ul><li>🌍 实现跨区域多人协同开发</li><li>📝 追踪和记载一个或者多个文件的历史记录</li><li>🗂️ 组织和保护你的源代码和文档</li><li>📊 统计工作量</li><li>⚡ 并行开发、提高开发效率</li><li>📈 跟踪记录整个软件的开发过程</li><li>🛡️ 减轻开发人员的负担，节省时间，同时降低人为错误</li></ul><p>简单来说就是 <strong>用于管理多人协同开发项目的技术</strong>。</p><h3 id="1-2-版本控制工具-🛠️"><a href="#1-2-版本控制工具-🛠️" class="headerlink" title="1.2 版本控制工具 🛠️"></a>1.2 版本控制工具 🛠️</h3><p>主流的版本控制软件有：</p><ul><li><strong>Git</strong> 🐙</li><li><strong>SVN</strong>（Subversion）📁</li><li><strong>CVS</strong>（Concurrent Versions System）</li><li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li><li><strong>TFS</strong>（Team Foundation Server）</li><li>Visual Studio Online</li></ul><p>使用最广泛的是 Git 与 SVN。</p><h3 id="1-3-版本控制分类-📋"><a href="#1-3-版本控制分类-📋" class="headerlink" title="1.3 版本控制分类 📋"></a>1.3 版本控制分类 📋</h3><h4 id="1-3-1-本地版本控制系统-💻"><a href="#1-3-1-本地版本控制系统-💻" class="headerlink" title="1.3.1 本地版本控制系统 💻"></a>1.3.1 本地版本控制系统 💻</h4><p>记录文件每次的更新，对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS。它是在一台机器上，记录版本的不同变化，保证内容不会丢失。但在多人开发的情况下，每个人都在不同的系统和电脑上开发，没办法协同工作。</p><h4 id="1-3-2-集中版本控制系统-🏢"><a href="#1-3-2-集中版本控制系统-🏢" class="headerlink" title="1.3.2 集中版本控制系统 🏢"></a>1.3.2 集中版本控制系统 🏢</h4><p>所有的版本数据都保存在中央服务器上，协同开发者从服务器上同步更新或上传自己的修改，用户只有自己以前所同步的版本，如果不连网，用户就看不到历史版本，也无法切换版本验证，或在不同分支工作。所有数据都保存在单一的服务器上，当服务器损坏时，可能会丢失所有数据，代表产品有 SVN、CVS、VSS 等。</p><h4 id="1-3-3-分布式版本控制系统-🌐"><a href="#1-3-3-分布式版本控制系统-🌐" class="headerlink" title="1.3.3 分布式版本控制系统 🌐"></a>1.3.3 分布式版本控制系统 🌐</h4><p>需要一台服务器作为远程代码仓库，所有版本信息同步到每个用户的本地。用户可以本地离线提交，只需在联网时将修改推送到远程代码仓库即可。每个用户的电脑都是代码仓库，是远程代码仓库的镜像，用户修改和获取代码都是在自己的本地仓库中进行操作。</p><p>由于每个用户都保存了所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，不会因为服务器损坏或者网络问题，出现不能工作的情况。</p><h3 id="1-4-Git-与-SVN-的区别-⚖️"><a href="#1-4-Git-与-SVN-的区别-⚖️" class="headerlink" title="1.4 Git 与 SVN 的区别 ⚖️"></a>1.4 Git 与 SVN 的区别 ⚖️</h3><table><thead><tr><th>特性</th><th>Git 🐙</th><th>SVN 📁</th></tr></thead><tbody><tr><td>架构</td><td>分布式 🌐</td><td>集中式 🏢</td></tr><tr><td>网络依赖</td><td>支持离线操作 📱</td><td>必须联网 🌐</td></tr><tr><td>分支操作</td><td>轻量级，成本低 ⚡</td><td>重量级，成本高 🐌</td></tr><tr><td>存储方式</td><td>元数据存储 💾</td><td>原始文件存储 📄</td></tr><tr><td>安全性</td><td>每个用户都有完整副本 🔒</td><td>依赖中央服务器 ⚠️</td></tr><tr><td>常用场景</td><td>维护代码 💻</td><td>维护文档 📄</td></tr></tbody></table><h2 id="2-Git的历史-📜"><a href="#2-Git的历史-📜" class="headerlink" title="2. Git的历史 📜"></a>2. Git的历史 📜</h2><p><strong>2002年</strong> 📅：Linux内核开源社区开始启用分布式版本控制系统BitKeeper来管理和维护代码。</p><p><strong>2005年</strong> 🎯：开发BitKeeper的BitMover公司结束与Linux内核开源社区的合作关系，并收回Linux内核开源社区的免费使用权。</p><p><strong>两周后</strong> ⚡：Linux的缔造者<strong>Linus Torvalds</strong>使用两周开发出自己的版本系统，也就是如今的Git！</p><p><img src="https://via.placeholder.com/200x200/4CAF50/FFFFFF?text=Linus+Torvalds" alt="Linus Torvalds"><br><em>Linux和Git之父李纳斯·托沃兹（Linus Benedic Torvalds）1969、芬兰</em></p><blockquote><p>🏆 <strong>成就</strong>: 一个改变整个软件开发世界的工具，竟然只用了两周时间开发！</p></blockquote><h2 id="3-Git环境配置-⚙️"><a href="#3-Git环境配置-⚙️" class="headerlink" title="3. Git环境配置 ⚙️"></a>3. Git环境配置 ⚙️</h2><h3 id="3-1-安装与卸载Git-💻"><a href="#3-1-安装与卸载Git-💻" class="headerlink" title="3.1 安装与卸载Git 💻"></a>3.1 安装与卸载Git 💻</h3><h4 id="Windows系统-🪟"><a href="#Windows系统-🪟" class="headerlink" title="Windows系统 🪟"></a>Windows系统 🪟</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载并安装Git for Windows</span></span><br><span class="line"><span class="comment"># https://git-scm.com/download/win</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">git --version</span><br><span class="line"></span><br><span class="line">$ git --version</span><br><span class="line">git version 2.47.0.windows.1</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>推荐</strong>: 如果官网下载太慢，可以使用<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">淘宝镜像</a>下载！</p></blockquote><h4 id="macOS系统-🍎"><a href="#macOS系统-🍎" class="headerlink" title="macOS系统 🍎"></a>macOS系统 🍎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Homebrew安装</span></span><br><span class="line">brew install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用Xcode Command Line Tools</span></span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h4 id="Linux系统-🐧"><a href="#Linux系统-🐧" class="headerlink" title="Linux系统 🐧"></a>Linux系统 🐧</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line"><span class="built_in">sudo</span> yum install git</span><br></pre></td></tr></table></figure><h3 id="3-2-Linux常用命令-🐧"><a href="#3-2-Linux常用命令-🐧" class="headerlink" title="3.2 Linux常用命令 🐧"></a>3.2 Linux常用命令 🐧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后续慢慢补充</span></span><br><span class="line"><span class="comment"># 目录操作</span></span><br><span class="line"><span class="built_in">pwd</span>                     <span class="comment"># 显示当前目录</span></span><br><span class="line"><span class="built_in">ls</span> -la                  <span class="comment"># 显示所有文件（包括隐藏文件）</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/directory   <span class="comment"># 切换到指定目录</span></span><br><span class="line"><span class="built_in">mkdir</span> directory_name    <span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf directory_name   <span class="comment"># 删除目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line"><span class="built_in">touch</span> file_name         <span class="comment"># 创建文件</span></span><br><span class="line"><span class="built_in">cat</span> file_name          <span class="comment"># 查看文件内容</span></span><br><span class="line">vim file_name          <span class="comment"># 编辑文件</span></span><br><span class="line"><span class="built_in">rm</span> file_name           <span class="comment"># 删除文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限操作</span></span><br><span class="line"><span class="built_in">chmod</span> 755 file_name    <span class="comment"># 修改文件权限</span></span><br><span class="line"><span class="built_in">chown</span> user:group file  <span class="comment"># 修改文件所有者</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Git的配置-🔧"><a href="#3-3-Git的配置-🔧" class="headerlink" title="3.3 Git的配置 🔧"></a>3.3 Git的配置 🔧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户信息 👤</span></span><br><span class="line">git config --global user.name <span class="string">&quot;你的姓名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认编辑器 ✏️</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置 📋</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line">$ git config --list</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">filter.lfs.clean=git-lfs clean -- %f</span><br><span class="line">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class="line">filter.lfs.process=git-lfs filter-process</span><br><span class="line">filter.lfs.required=<span class="literal">true</span></span><br><span class="line">http.sslbackend=openssl</span><br><span class="line">http.sslcainfo=D:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt</span><br><span class="line">core.autocrlf=<span class="literal">true</span></span><br><span class="line">core.fscache=<span class="literal">true</span></span><br><span class="line">core.symlinks=<span class="literal">false</span></span><br><span class="line">pull.rebase=<span class="literal">false</span></span><br><span class="line">credential.helper=manager</span><br><span class="line">credential.https://dev.azure.com.usehttppath=<span class="literal">true</span></span><br><span class="line">init.defaultbranch=master</span><br><span class="line">color.ui=<span class="literal">true</span></span><br><span class="line">user.name=chad.suo</span><br><span class="line">user.email=xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以使用以下命令，查看不同级别的配置信息：</span></span><br><span class="line"><span class="comment"># 查看系统 config</span></span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line"><span class="comment"># 查看当前用户（global）配置</span></span><br><span class="line">git config --global  --list</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意</strong>: 安装时还可以修改默认编辑器，默认是Vim编辑器。比如将默认编辑器修改为NotePad3，找到NotePad3的exe文件并选择即可。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Git 相关的本地配置文件位置：</span><br><span class="line"></span><br><span class="line">​Git 安装目录 \etc\gitconfig：Git 安装目录下的 gitconfig --system 系统级配置文件</span><br><span class="line"></span><br><span class="line">​C:\Users\你的用户名\ .gitconfig：只适用于当前登录用户的配置 --global 全局配置文件</span><br></pre></td></tr></table></figure><h3 id="2-3-多账号配置（这里需要补充）"><a href="#2-3-多账号配置（这里需要补充）" class="headerlink" title="2.3 多账号配置（这里需要补充）"></a>2.3 多账号配置（这里需要补充）</h3><h4 id="SSH密钥方式"><a href="#SSH密钥方式" class="headerlink" title="SSH密钥方式"></a>SSH密钥方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Personal-Access-Token方式"><a href="#Personal-Access-Token方式" class="headerlink" title="Personal Access Token方式"></a>Personal Access Token方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-Git基本理论-🧠"><a href="#4-Git基本理论-🧠" class="headerlink" title="4. Git基本理论 🧠"></a>4. Git基本理论 🧠</h2><h3 id="4-1-Git的三个区域-🏗️"><a href="#4-1-Git的三个区域-🏗️" class="headerlink" title="4.1 Git的三个区域 🏗️"></a>4.1 Git的三个区域 🏗️</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">工作区 (Working Directory) 📁</span><br><span class="line">    ↓ git add</span><br><span class="line">暂存区 (Staging Area) 📦</span><br><span class="line">    ↓ git commit</span><br><span class="line">本地仓库 (Local Repository) 💾</span><br><span class="line">    ↓ git push</span><br><span class="line">远程仓库 (Remote Repository) ☁️</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>小贴士</strong>: 理解这三个区域是掌握Git的关键！工作区是你编辑文件的地方，暂存区是准备提交的文件的临时存储，本地仓库是项目的完整历史记录。</p></blockquote><h3 id="4-2-Git对象模型-🔍"><a href="#4-2-Git对象模型-🔍" class="headerlink" title="4.2 Git对象模型 🔍"></a>4.2 Git对象模型 🔍</h3><p>Git使用四种主要对象类型：</p><ul><li><strong>Blob对象</strong> 📄：存储文件内容</li><li><strong>Tree对象</strong> 🌳：存储目录结构和文件名</li><li><strong>Commit对象</strong> 📝：存储提交信息</li><li><strong>Tag对象</strong> 🏷️：存储标签信息</li></ul><h3 id="4-3-Git的哈希机制-🔐"><a href="#4-3-Git的哈希机制-🔐" class="headerlink" title="4.3 Git的哈希机制 🔐"></a>4.3 Git的哈希机制 🔐</h3><p>Git使用SHA-1哈希算法为每个对象生成唯一的40位十六进制标识符，确保数据的完整性和唯一性。</p><h2 id="5-Git项目搭建-🚀"><a href="#5-Git项目搭建-🚀" class="headerlink" title="5. Git项目搭建 🚀"></a>5. Git项目搭建 🚀</h2><h3 id="5-1-仓库初始化-🏁"><a href="#5-1-仓库初始化-🏁" class="headerlink" title="5.1 仓库初始化 🏁"></a>5.1 仓库初始化 🏁</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆指定分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b 分支名 https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure><h2 id="6-Git文件操作-📁"><a href="#6-Git文件操作-📁" class="headerlink" title="6. Git文件操作 📁"></a>6. Git文件操作 📁</h2><h3 id="6-1-基本文件操作-📄"><a href="#6-1-基本文件操作-📄" class="headerlink" title="6.1 基本文件操作 📄"></a>6.1 基本文件操作 📄</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件的四种状态</span></span><br><span class="line">版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前是什么状态。</span><br><span class="line"></span><br><span class="line">1、Untracked：未跟踪，此文件在文件夹中，但没有加入到 Git 库，不参与版本控制。可以通过 git add 状态变为 Staged。</span><br><span class="line"></span><br><span class="line">2、Unmodify：文件已经入库，且未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，变为 Modified；如果使用 git <span class="built_in">rm</span> 移出版本库，则变为 Untracked。</span><br><span class="line"></span><br><span class="line">3、Modified：文件已修改， 仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 变为暂存 Staged 状态；使用 git checkout 丢弃修改， 返回到 Unmodify 状态。git checkout 表示从库中取出文件，覆盖当前修改，即丢弃当前修改。</span><br><span class="line"></span><br><span class="line">4、Staged：暂存状态。通过 git commit 将修改提交到本地仓库， 文件变为 Unmodify 状态。执行 git reset HEAD filename 取消暂存， 变为 Modified 状态。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态 👀</span></span><br><span class="line">git status</span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区 ➕</span></span><br><span class="line">git add 文件名                    <span class="comment"># 添加单个文件</span></span><br><span class="line">git add .                        <span class="comment"># 添加所有文件</span></span><br><span class="line">git add *.js                     <span class="comment"># 添加所有js文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到本地仓库 💾</span></span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br><span class="line">git commit -am <span class="string">&quot;提交信息&quot;</span>         <span class="comment"># 添加并提交已跟踪的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史 📜</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline               <span class="comment"># 简洁显示</span></span><br><span class="line">git <span class="built_in">log</span> --graph                 <span class="comment"># 图形化显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略文件</span></span><br><span class="line">有时不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等，要求忽略这些文件的修改。</span><br><span class="line"></span><br><span class="line">在根目录下建立 .gitignore 文件，将需要被忽略的文件名添加到此文件中。</span><br><span class="line"></span><br><span class="line">.gitignore 文件内容解析：</span><br><span class="line"></span><br><span class="line">1、以井号 <span class="comment"># 开始的行表示注释；</span></span><br><span class="line"></span><br><span class="line">2、可以使用 Linux 通配符。例如：星号 * 代表任意多个字符，问号 ? 代表一个字符，方括号 [] 代表可选字符范围，大括号 &#123;&#125; 代表可选的字符串等；</span><br><span class="line"></span><br><span class="line">3、如果名称的最前面有一个感叹号 !，表示例外规则，满足条件的文件不会被忽略；</span><br><span class="line"></span><br><span class="line">4、如果名称的最前面是一个路径分隔符 /，表示要忽略的文件在根目录下；</span><br><span class="line"></span><br><span class="line">5、如果名称的最后面是一个路径分隔符 /，表示要忽略的是此目录下的文件。</span><br><span class="line"></span><br><span class="line">*.txt        <span class="comment"># 忽略所有 .txt 结尾的文件</span></span><br><span class="line">!lib.txt     <span class="comment"># lib.txt 除外</span></span><br><span class="line">/temp        <span class="comment"># 忽略项目根目录下的 temp 文件</span></span><br><span class="line">build/       <span class="comment"># 忽略 build 目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment"># 忽略 doc 目录下的所有 txt 文件，不包括子目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IDEA 中常用的 .gitignore 文件内容：</span></span><br><span class="line"><span class="comment"># Compiled class file</span></span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log file</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BlueJ files</span></span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mobile Tools for Java (J2ME)</span></span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"><span class="comment"># virtual machine crash logs</span></span><br><span class="line">hs_err_pid*</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-文件管理-📂"><a href="#6-2-文件管理-📂" class="headerlink" title="6.2 文件管理 📂"></a>6.2 文件管理 📂</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">git <span class="built_in">rm</span> 文件名                    <span class="comment"># 删除文件并添加到暂存区</span></span><br><span class="line">git <span class="built_in">rm</span> --cached 文件名           <span class="comment"># 只从暂存区删除，保留工作区文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件</span></span><br><span class="line">git <span class="built_in">mv</span> 旧文件名 新文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略文件</span></span><br><span class="line"><span class="comment"># 创建.gitignore文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;node_modules/&quot;</span> &gt;&gt; .gitignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*.log&quot;</span> &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure><h3 id="6-3-撤销操作-↩️"><a href="#6-3-撤销操作-↩️" class="headerlink" title="6.3 撤销操作 ↩️"></a>6.3 撤销操作 ↩️</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销工作区修改</span></span><br><span class="line">git checkout -- 文件名</span><br><span class="line">git restore 文件名               <span class="comment"># Git 2.23+新命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销暂存区修改</span></span><br><span class="line">git reset HEAD 文件名</span><br><span class="line">git restore --staged 文件名      <span class="comment"># Git 2.23+新命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销最近一次提交</span></span><br><span class="line">git reset --soft HEAD~1         <span class="comment"># 保留修改在暂存区</span></span><br><span class="line">git reset --mixed HEAD~1        <span class="comment"># 保留修改在工作区</span></span><br><span class="line">git reset --hard HEAD~1         <span class="comment"># 完全删除修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改最近一次提交</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;新的提交信息&quot;</span></span><br></pre></td></tr></table></figure><h2 id="7-GitHub的使用-🌐"><a href="#7-GitHub的使用-🌐" class="headerlink" title="7. GitHub的使用 🌐"></a>7. GitHub的使用 🌐</h2><h3 id="7-1-GitHub基础操作-🚀"><a href="#7-1-GitHub基础操作-🚀" class="headerlink" title="7.1 GitHub基础操作 🚀"></a>7.1 GitHub基础操作 🚀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建GitHub仓库</span></span><br><span class="line"><span class="comment"># 1. 在GitHub网站上创建新仓库</span></span><br><span class="line"><span class="comment"># 2. 克隆到本地</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/用户名/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送代码到GitHub</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="7-2-GitHub功能特性-✨"><a href="#7-2-GitHub功能特性-✨" class="headerlink" title="7.2 GitHub功能特性 ✨"></a>7.2 GitHub功能特性 ✨</h3><ul><li><strong>Issues</strong> 🐛：问题跟踪和讨论</li><li><strong>Pull Requests</strong> 🔄：代码审查和合并</li><li><strong>Actions</strong> ⚙️：CI&#x2F;CD自动化</li><li><strong>Pages</strong> 📄：静态网站托管</li><li><strong>Wiki</strong> 📚：项目文档</li><li><strong>Releases</strong> 🏷️：版本发布</li></ul><h3 id="7-3-GitHub协作流程-🤝"><a href="#7-3-GitHub协作流程-🤝" class="headerlink" title="7.3 GitHub协作流程 🤝"></a>7.3 GitHub协作流程 🤝</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. Fork仓库</span></span><br><span class="line"><span class="comment"># 2. 克隆Fork的仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/你的用户名/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加上游仓库</span></span><br><span class="line">git remote add upstream https://github.com/原作者/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 创建功能分支</span></span><br><span class="line">git checkout -b feature/新功能</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 提交更改</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: 添加新功能&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 推送到Fork仓库</span></span><br><span class="line">git push origin feature/新功能</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 创建Pull Request</span></span><br></pre></td></tr></table></figure><h3 id="本机绑定-SSH-公钥"><a href="#本机绑定-SSH-公钥" class="headerlink" title="本机绑定 SSH 公钥"></a>本机绑定 SSH 公钥</h3><h2 id="8-IDEA中集成Git-💻"><a href="#8-IDEA中集成Git-💻" class="headerlink" title="8. IDEA中集成Git 💻"></a>8. IDEA中集成Git 💻</h2><h3 id="8-1-配置Git-🔧"><a href="#8-1-配置Git-🔧" class="headerlink" title="8.1 配置Git 🔧"></a>8.1 配置Git 🔧</h3><ol><li><strong>设置Git路径</strong>：File → Settings → Version Control → Git</li><li><strong>配置用户信息</strong>：File → Settings → Version Control → Git → User</li><li><strong>启用Git集成</strong>：VCS → Enable Version Control Integration</li></ol><h3 id="8-2-常用操作-🛠️"><a href="#8-2-常用操作-🛠️" class="headerlink" title="8.2 常用操作 🛠️"></a>8.2 常用操作 🛠️</h3><ul><li><strong>提交更改</strong>：Ctrl+K 或 VCS → Commit</li><li><strong>推送代码</strong>：Ctrl+Shift+K 或 VCS → Git → Push</li><li><strong>拉取代码</strong>：Ctrl+T 或 VCS → Git → Pull</li><li><strong>查看历史</strong>：VCS → Git → Show History</li><li><strong>分支管理</strong>：VCS → Git → Branches</li></ul><h2 id="9-Git分支-🌿"><a href="#9-Git分支-🌿" class="headerlink" title="9. Git分支 🌿"></a>9. Git分支 🌿</h2><h3 id="9-1-分支基础操作-🔀"><a href="#9-1-分支基础操作-🔀" class="headerlink" title="9.1 分支基础操作 🔀"></a>9.1 分支基础操作 🔀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch                      <span class="comment"># 查看本地分支</span></span><br><span class="line">git branch -r                   <span class="comment"># 查看远程分支</span></span><br><span class="line">git branch -a                   <span class="comment"># 查看所有分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch 分支名</span><br><span class="line">git checkout -b 分支名           <span class="comment"># 创建并切换到新分支</span></span><br><span class="line">git switch -c 分支名            <span class="comment"># Git 2.23+新命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line">git switch 分支名               <span class="comment"># Git 2.23+新命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d 分支名            <span class="comment"># 删除已合并的分支</span></span><br><span class="line">git branch -D 分支名            <span class="comment"># 强制删除分支</span></span><br></pre></td></tr></table></figure><h3 id="9-2-分支合并-🔀"><a href="#9-2-分支合并-🔀" class="headerlink" title="9.2 分支合并 🔀"></a>9.2 分支合并 🔀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge 分支名                <span class="comment"># 快进合并</span></span><br><span class="line">git merge --no-ff 分支名        <span class="comment"># 非快进合并，保留分支历史</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变基合并</span></span><br><span class="line">git rebase 目标分支</span><br><span class="line">git rebase -i HEAD~3           <span class="comment"># 交互式变基</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决合并冲突</span></span><br><span class="line"><span class="comment"># 1. 编辑冲突文件</span></span><br><span class="line"><span class="comment"># 2. 添加解决后的文件</span></span><br><span class="line">git add 文件名</span><br><span class="line"><span class="comment"># 3. 完成合并</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h3 id="9-3-分支策略-📋"><a href="#9-3-分支策略-📋" class="headerlink" title="9.3 分支策略 📋"></a>9.3 分支策略 📋</h3><h4 id="Git-Flow模型"><a href="#Git-Flow模型" class="headerlink" title="Git Flow模型"></a>Git Flow模型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main (生产环境)</span><br><span class="line">├── develop (开发环境)</span><br><span class="line">│   ├── feature/新功能1</span><br><span class="line">│   ├── feature/新功能2</span><br><span class="line">│   └── hotfix/紧急修复</span><br><span class="line">└── release/版本号</span><br></pre></td></tr></table></figure><h4 id="GitHub-Flow模型"><a href="#GitHub-Flow模型" class="headerlink" title="GitHub Flow模型"></a>GitHub Flow模型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main (主分支)</span><br><span class="line">├── feature/新功能1</span><br><span class="line">├── feature/新功能2</span><br><span class="line">└── hotfix/紧急修复</span><br></pre></td></tr></table></figure><h2 id="10-团队协作-👥"><a href="#10-团队协作-👥" class="headerlink" title="10. 团队协作 👥"></a>10. 团队协作 👥</h2><h3 id="10-1-团队内协作-🤝"><a href="#10-1-团队内协作-🤝" class="headerlink" title="10.1 团队内协作 🤝"></a>10.1 团队内协作 🤝</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add origin https://github.com/用户名/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库地址</span></span><br><span class="line">git remote set-url origin 新的仓库地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程仓库</span></span><br><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure><h3 id="5-2-推送和拉取"><a href="#5-2-推送和拉取" class="headerlink" title="5.2 推送和拉取"></a>5.2 推送和拉取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推送到远程仓库</span></span><br><span class="line">git push origin 分支名</span><br><span class="line">git push -u origin 分支名       <span class="comment"># 设置上游分支</span></span><br><span class="line">git push --all                  <span class="comment"># 推送所有分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程仓库拉取</span></span><br><span class="line">git pull origin 分支名</span><br><span class="line">git fetch origin                <span class="comment"># 只拉取不合并</span></span><br><span class="line">git merge origin/分支名         <span class="comment"># 手动合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制推送（谨慎使用）</span></span><br><span class="line">git push --force origin 分支名</span><br></pre></td></tr></table></figure><h3 id="5-3-标签管理"><a href="#5-3-标签管理" class="headerlink" title="5.3 标签管理"></a>5.3 标签管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建标签</span></span><br><span class="line">git tag 标签名                  <span class="comment"># 轻量标签</span></span><br><span class="line">git tag -a 标签名 -m <span class="string">&quot;标签说明&quot;</span>  <span class="comment"># 附注标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签</span></span><br><span class="line">git tag</span><br><span class="line">git show 标签名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送标签</span></span><br><span class="line">git push origin 标签名</span><br><span class="line">git push origin --tags          <span class="comment"># 推送所有标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除标签</span></span><br><span class="line">git tag -d 标签名               <span class="comment"># 删除本地标签</span></span><br><span class="line">git push origin :refs/tags/标签名 <span class="comment"># 删除远程标签</span></span><br></pre></td></tr></table></figure><h2 id="11-其他常用命令-⚡"><a href="#11-其他常用命令-⚡" class="headerlink" title="11. 其他常用命令 ⚡"></a>11. 其他常用命令 ⚡</h2><h3 id="11-1-其他常用命令一览-📋"><a href="#11-1-其他常用命令一览-📋" class="headerlink" title="11.1 其他常用命令一览 📋"></a>11.1 其他常用命令一览 📋</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph --all    <span class="comment"># 图形化显示所有分支</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>                     <span class="comment"># 显示文件修改统计</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&quot;%h %s&quot;</span>    <span class="comment"># 自定义格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件差异</span></span><br><span class="line">git diff                           <span class="comment"># 工作区与暂存区差异</span></span><br><span class="line">git diff --cached                  <span class="comment"># 暂存区与仓库差异</span></span><br><span class="line">git diff HEAD                      <span class="comment"># 工作区与仓库差异</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看操作历史</span></span><br><span class="line">git reflog                         <span class="comment"># 查看所有操作记录</span></span><br><span class="line">git reflog --oneline               <span class="comment"># 简洁显示操作记录</span></span><br></pre></td></tr></table></figure><h3 id="11-2-log与reflog区别-🔍"><a href="#11-2-log与reflog区别-🔍" class="headerlink" title="11.2 log与reflog区别 🔍"></a>11.2 log与reflog区别 🔍</h3><table><thead><tr><th>命令</th><th>作用</th><th>范围</th></tr></thead><tbody><tr><td><code>git log</code></td><td>查看提交历史</td><td>当前分支的提交记录</td></tr><tr><td><code>git reflog</code></td><td>查看操作历史</td><td>所有操作记录（包括reset、rebase等）</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令作用</span></span><br><span class="line">git <span class="built_in">log</span> --oneline<span class="comment"># 查看变更列表信息</span></span><br><span class="line">git <span class="built_in">log</span> -n2 --oneline<span class="comment"># 查看最近 2 次变更信息</span></span><br><span class="line">git <span class="built_in">log</span><span class="comment"># 查看当前分支版本信息</span></span><br><span class="line">git <span class="built_in">log</span> --all<span class="comment"># 查看全部分支变更历史</span></span><br><span class="line">git <span class="built_in">log</span> --graph<span class="comment"># 以图谱的方式显示当前分支版本信息</span></span><br></pre></td></tr></table></figure><h3 id="11-3-git-stash-💾"><a href="#11-3-git-stash-💾" class="headerlink" title="11.3 git stash 💾"></a>11.3 git stash 💾</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂存当前工作</span></span><br><span class="line">git stash                          <span class="comment"># 暂存所有修改</span></span><br><span class="line">git stash save <span class="string">&quot;暂存说明&quot;</span>           <span class="comment"># 带说明的暂存</span></span><br><span class="line">git stash -u                       <span class="comment"># 包括未跟踪文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存列表</span></span><br><span class="line">git stash list                     <span class="comment"># 查看所有暂存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存</span></span><br><span class="line">git stash pop                      <span class="comment"># 恢复并删除最新暂存</span></span><br><span class="line">git stash apply                    <span class="comment"># 恢复但保留暂存</span></span><br><span class="line">git stash apply stash@&#123;0&#125;          <span class="comment"># 恢复指定暂存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除暂存</span></span><br><span class="line">git stash drop stash@&#123;0&#125;           <span class="comment"># 删除指定暂存</span></span><br><span class="line">git stash clear                    <span class="comment"># 清空所有暂存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只保存部分内容到堆栈</span></span><br><span class="line">git stash 会将所有未提交的修改（工作区和暂存区）保存至堆栈中，那么如果只保存部分内容呢？</span><br><span class="line"></span><br><span class="line">1、将不想存储的文件保存至暂存区，比如 git add a.java, b.java；</span><br><span class="line"></span><br><span class="line">2、使用 git stash –keep-index 保存那些未被提交至暂存区的文件到堆栈；</span><br><span class="line"></span><br><span class="line">3、使用 git reset 将暂存处的文件移动到工作区。</span><br></pre></td></tr></table></figure><h3 id="11-4-cherry-pick-🍒"><a href="#11-4-cherry-pick-🍒" class="headerlink" title="11.4 cherry-pick 🍒"></a>11.4 cherry-pick 🍒</h3><blockquote><p>cherry-pick 是Git中一个非常实用的命令，用于将指定的提交应用到当前分支上，就像”挑选樱桃”一样，选择性地应用某些提交。</p></blockquote><h4 id="11-4-1-基本语法-📝"><a href="#11-4-1-基本语法-📝" class="headerlink" title="11.4.1 基本语法 📝"></a>11.4.1 基本语法 📝</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拣选单个提交</span></span><br><span class="line">git cherry-pick 提交哈希</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拣选多个提交（不连续）</span></span><br><span class="line">git cherry-pick 提交1 提交2 提交3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拣选提交范围（连续）</span></span><br><span class="line">git cherry-pick 提交1..提交2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拣选提交范围（不包含起始提交）</span></span><br><span class="line">git cherry-pick 提交1^..提交2</span><br></pre></td></tr></table></figure><h4 id="11-4-2-使用场景-🎯"><a href="#11-4-2-使用场景-🎯" class="headerlink" title="11.4.2 使用场景 🎯"></a>11.4.2 使用场景 🎯</h4><p><strong>场景1：修复bug到多个分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在main分支修复了一个bug</span></span><br><span class="line">git checkout main</span><br><span class="line">git commit -m <span class="string">&quot;fix: 修复登录bug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要将这个修复应用到release分支</span></span><br><span class="line">git checkout release</span><br><span class="line">git cherry-pick main分支的提交哈希</span><br></pre></td></tr></table></figure><p><strong>场景2：从其他分支获取特定功能</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从feature分支获取某个特定提交</span></span><br><span class="line">git checkout main</span><br><span class="line">git cherry-pick feature分支的提交哈希</span><br></pre></td></tr></table></figure><p><strong>场景3：撤销错误的合并</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果某个合并有问题，可以cherry-pick其他提交来修复</span></span><br><span class="line">git cherry-pick 修复提交的哈希</span><br></pre></td></tr></table></figure><h4 id="11-4-3-详细示例-📚"><a href="#11-4-3-详细示例-📚" class="headerlink" title="11.4.3 详细示例 📚"></a>11.4.3 详细示例 📚</h4><p><strong>示例1：基本cherry-pick操作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># a1b2c3d (HEAD -&gt; main) 添加新功能</span></span><br><span class="line"><span class="comment"># e4f5g6h 修复bug</span></span><br><span class="line"><span class="comment"># i7j8k9l 更新文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拣选特定提交到当前分支</span></span><br><span class="line">git cherry-pick e4f5g6h</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># [main 1a2b3c4] 修复bug</span></span><br><span class="line"><span class="comment"># 1 file changed, 2 insertions(+), 1 deletion(-)</span></span><br></pre></td></tr></table></figure><p><strong>示例2：拣选多个提交</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拣选多个不连续的提交</span></span><br><span class="line">git cherry-pick e4f5g6h i7j8k9l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拣选连续的提交范围</span></span><br><span class="line">git cherry-pick e4f5g6h..i7j8k9l</span><br></pre></td></tr></table></figure><p><strong>示例3：从其他分支拣选</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到目标分支</span></span><br><span class="line">git checkout feature-branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从main分支拣选提交</span></span><br><span class="line">git cherry-pick main分支的提交哈希</span><br></pre></td></tr></table></figure><h4 id="11-4-4-常用选项-⚙️"><a href="#11-4-4-常用选项-⚙️" class="headerlink" title="11.4.4 常用选项 ⚙️"></a>11.4.4 常用选项 ⚙️</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只应用更改，不自动提交</span></span><br><span class="line">git cherry-pick --no-commit 提交哈希</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑提交信息</span></span><br><span class="line">git cherry-pick --edit 提交哈希</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定作者信息</span></span><br><span class="line">git cherry-pick --author=<span class="string">&quot;新作者 &lt;email@example.com&gt;&quot;</span> 提交哈希</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续cherry-pick（解决冲突后）</span></span><br><span class="line">git cherry-pick --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳过当前cherry-pick</span></span><br><span class="line">git cherry-pick --skip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 终止cherry-pick</span></span><br><span class="line">git cherry-pick --abort</span><br></pre></td></tr></table></figure><h4 id="11-4-5-处理冲突-🔧"><a href="#11-4-5-处理冲突-🔧" class="headerlink" title="11.4.5 处理冲突 🔧"></a>11.4.5 处理冲突 🔧</h4><p><strong>当cherry-pick遇到冲突时：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查看冲突文件</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 手动解决冲突</span></span><br><span class="line"><span class="comment"># 编辑冲突文件，选择要保留的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加解决后的文件</span></span><br><span class="line">git add 冲突文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 继续cherry-pick</span></span><br><span class="line">git cherry-pick --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者跳过这个提交</span></span><br><span class="line">git cherry-pick --skip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者终止整个操作</span></span><br><span class="line">git cherry-pick --abort</span><br></pre></td></tr></table></figure><h4 id="11-4-6-实际工作流程-🔄"><a href="#11-4-6-实际工作流程-🔄" class="headerlink" title="11.4.6 实际工作流程 🔄"></a>11.4.6 实际工作流程 🔄</h4><p><strong>完整的cherry-pick工作流程：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查看可用的提交</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 选择要拣选的提交</span></span><br><span class="line">git cherry-pick 提交哈希</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 如果有冲突，解决冲突</span></span><br><span class="line"><span class="comment"># 编辑冲突文件...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 添加解决后的文件</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 继续cherry-pick</span></span><br><span class="line">git cherry-pick --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 推送到远程仓库</span></span><br><span class="line">git push origin 分支名</span><br></pre></td></tr></table></figure><h4 id="11-4-7-注意事项-⚠️"><a href="#11-4-7-注意事项-⚠️" class="headerlink" title="11.4.7 注意事项 ⚠️"></a>11.4.7 注意事项 ⚠️</h4><ol><li><strong>提交哈希会改变</strong>：cherry-pick会创建新的提交，哈希值会不同</li><li><strong>可能产生冲突</strong>：如果目标分支有相关修改，可能产生冲突</li><li><strong>提交历史</strong>：cherry-pick会保留原始提交的提交信息</li><li><strong>分支关系</strong>：cherry-pick不会建立分支间的直接关系</li></ol><h4 id="11-4-8-与其他命令的区别-🔍"><a href="#11-4-8-与其他命令的区别-🔍" class="headerlink" title="11.4.8 与其他命令的区别 🔍"></a>11.4.8 与其他命令的区别 🔍</h4><table><thead><tr><th>命令</th><th>作用</th><th>提交历史</th><th>适用场景</th></tr></thead><tbody><tr><td><code>git merge</code></td><td>合并分支</td><td>保留分支结构</td><td>合并整个分支</td></tr><tr><td><code>git rebase</code></td><td>变基</td><td>线性历史</td><td>整理提交历史</td></tr><tr><td><code>git cherry-pick</code></td><td>拣选提交</td><td>复制提交</td><td>选择性应用提交</td></tr></tbody></table><h4 id="11-4-9-高级用法-🚀"><a href="#11-4-9-高级用法-🚀" class="headerlink" title="11.4.9 高级用法 🚀"></a>11.4.9 高级用法 🚀</h4><p><strong>批量cherry-pick：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从某个分支拣选多个提交</span></span><br><span class="line">git cherry-pick 提交1^..提交2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拣选所有提交（从某个点开始）</span></span><br><span class="line">git cherry-pick 起始提交^..HEAD</span><br></pre></td></tr></table></figure><p><strong>交互式cherry-pick：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用rebase进行交互式cherry-pick</span></span><br><span class="line">git rebase -i 起始提交</span><br><span class="line"><span class="comment"># 在编辑器中标记要拣选的提交</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>小贴士</strong>: cherry-pick是Git协作开发中非常实用的工具，特别适合需要将特定修复或功能应用到多个分支的场景。记住，它创建的是新的提交，而不是移动原有的提交。</p></blockquote><h3 id="11-5-git-diff-🔍"><a href="#11-5-git-diff-🔍" class="headerlink" title="11.5 git diff 🔍"></a>11.5 git diff 🔍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看差异</span></span><br><span class="line">git diff                           <span class="comment"># 工作区与暂存区</span></span><br><span class="line">git diff --cached                  <span class="comment"># 暂存区与仓库</span></span><br><span class="line">git diff HEAD                      <span class="comment"># 工作区与仓库</span></span><br><span class="line">git diff 分支1 分支2               <span class="comment"># 两个分支差异</span></span><br><span class="line">git diff 提交1 提交2               <span class="comment"># 两个提交差异</span></span><br></pre></td></tr></table></figure><h3 id="11-6-重写历史-📝"><a href="#11-6-重写历史-📝" class="headerlink" title="11.6 重写历史 📝"></a>11.6 重写历史 📝</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交互式变基</span></span><br><span class="line">git rebase -i HEAD~3               <span class="comment"># 修改最近3个提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;新信息&quot;</span>     <span class="comment"># 修改最近一次提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并提交</span></span><br><span class="line">git rebase -i HEAD~3</span><br><span class="line"><span class="comment"># 在编辑器中修改pick为squash</span></span><br></pre></td></tr></table></figure><h3 id="11-7-回滚与撤销-↩️"><a href="#11-7-回滚与撤销-↩️" class="headerlink" title="11.7 回滚与撤销 ↩️"></a>11.7 回滚与撤销 ↩️</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销工作区修改</span></span><br><span class="line">git checkout -- 文件名</span><br><span class="line">git restore 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销暂存区修改</span></span><br><span class="line">git reset HEAD 文件名</span><br><span class="line">git restore --staged 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退提交</span></span><br><span class="line">git reset --soft HEAD~1            <span class="comment"># 保留修改在暂存区</span></span><br><span class="line">git reset --mixed HEAD~1           <span class="comment"># 保留修改在工作区</span></span><br><span class="line">git reset --hard HEAD~1            <span class="comment"># 完全删除修改</span></span><br></pre></td></tr></table></figure><h3 id="11-8-其他后悔药-💊"><a href="#11-8-其他后悔药-💊" class="headerlink" title="11.8 其他后悔药 💊"></a>11.8 其他后悔药 💊</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销已推送的提交</span></span><br><span class="line">git revert 提交哈希                <span class="comment"># 创建新提交撤销指定提交</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改历史提交</span></span><br><span class="line">git rebase -i HEAD~3</span><br><span class="line"><span class="comment"># 在编辑器中修改pick为edit</span></span><br><span class="line"><span class="comment"># 修改文件后</span></span><br><span class="line">git add .</span><br><span class="line">git commit --amend</span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="11-9-abort终止-🛑"><a href="#11-9-abort终止-🛑" class="headerlink" title="11.9 abort终止 🛑"></a>11.9 abort终止 🛑</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终止各种操作</span></span><br><span class="line">git merge --abort                  <span class="comment"># 终止合并</span></span><br><span class="line">git rebase --abort                 <span class="comment"># 终止变基</span></span><br><span class="line">git cherry-pick --abort            <span class="comment"># 终止拣选</span></span><br></pre></td></tr></table></figure><h3 id="11-10-合并commit-🔀"><a href="#11-10-合并commit-🔀" class="headerlink" title="11.10 合并commit 🔀"></a>11.10 合并commit 🔀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交互式变基合并提交</span></span><br><span class="line">git rebase -i HEAD~3</span><br><span class="line"><span class="comment"># 在编辑器中修改pick为squash或s</span></span><br></pre></td></tr></table></figure><h3 id="11-11-指定当前工作分支与远程分支的链接关系-🔗"><a href="#11-11-指定当前工作分支与远程分支的链接关系-🔗" class="headerlink" title="11.11 指定当前工作分支与远程分支的链接关系 🔗"></a>11.11 指定当前工作分支与远程分支的链接关系 🔗</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置上游分支</span></span><br><span class="line">git branch --set-upstream-to=origin/分支名 本地分支名</span><br><span class="line">git push -u origin 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支跟踪关系</span></span><br><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h3 id="11-12-更安全的强制推送-🚀"><a href="#11-12-更安全的强制推送-🚀" class="headerlink" title="11.12 更安全的强制推送 🚀"></a>11.12 更安全的强制推送 🚀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安全的强制推送</span></span><br><span class="line">git push --force-with-lease origin 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制推送（谨慎使用）</span></span><br><span class="line">git push --force origin 分支名</span><br></pre></td></tr></table></figure><h2 id="12-其他操作流程-🔄"><a href="#12-其他操作流程-🔄" class="headerlink" title="12. 其他操作流程 🔄"></a>12. 其他操作流程 🔄</h2><h3 id="12-1-推送到远程仓库-📤"><a href="#12-1-推送到远程仓库-📤" class="headerlink" title="12.1 推送到远程仓库 📤"></a>12.1 推送到远程仓库 📤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准推送流程</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span></span><br><span class="line">git push origin 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次推送</span></span><br><span class="line">git push -u origin 分支名</span><br></pre></td></tr></table></figure><h3 id="12-2-拉取远程分支到本地-📥"><a href="#12-2-拉取远程分支到本地-📥" class="headerlink" title="12.2 拉取远程分支到本地 📥"></a>12.2 拉取远程分支到本地 📥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取并合并</span></span><br><span class="line">git pull origin 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只拉取不合并</span></span><br><span class="line">git fetch origin</span><br><span class="line">git merge origin/分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远程分支到本地</span></span><br><span class="line">git checkout -b 本地分支名 origin/远程分支名</span><br></pre></td></tr></table></figure><h3 id="12-3-GitHub的默认分支-🌿"><a href="#12-3-GitHub的默认分支-🌿" class="headerlink" title="12.3 GitHub的默认分支 🌿"></a>12.3 GitHub的默认分支 🌿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看默认分支</span></span><br><span class="line">git symbolic-ref refs/remotes/origin/HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认分支</span></span><br><span class="line">git remote set-head origin main</span><br></pre></td></tr></table></figure><h3 id="12-4-修改远程仓库地址-🔄"><a href="#12-4-修改远程仓库地址-🔄" class="headerlink" title="12.4 修改远程仓库地址 🔄"></a>12.4 修改远程仓库地址 🔄</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库地址</span></span><br><span class="line">git remote set-url origin 新地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新的远程仓库</span></span><br><span class="line">git remote add upstream 新地址</span><br></pre></td></tr></table></figure><h3 id="12-5-修改历史commit用户名和邮箱-👤"><a href="#12-5-修改历史commit用户名和邮箱-👤" class="headerlink" title="12.5 修改历史commit用户名和邮箱 👤"></a>12.5 修改历史commit用户名和邮箱 👤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改最近一次提交</span></span><br><span class="line">git commit --amend --author=<span class="string">&quot;新用户名 &lt;新邮箱&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改多个提交</span></span><br><span class="line">git rebase -i HEAD~3</span><br><span class="line"><span class="comment"># 在编辑器中修改pick为edit</span></span><br><span class="line"><span class="comment"># 修改后</span></span><br><span class="line">git commit --amend --author=<span class="string">&quot;新用户名 &lt;新邮箱&gt;&quot;</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="12-6-删除某次提交-🗑️"><a href="#12-6-删除某次提交-🗑️" class="headerlink" title="12.6 删除某次提交 🗑️"></a>12.6 删除某次提交 🗑️</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用revert（推荐）</span></span><br><span class="line">git revert 提交哈希</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用reset（危险）</span></span><br><span class="line">git reset --hard 提交哈希</span><br><span class="line">git push --force origin 分支名</span><br></pre></td></tr></table></figure><h3 id="12-7-修改历史提交内容-✏️"><a href="#12-7-修改历史提交内容-✏️" class="headerlink" title="12.7 修改历史提交内容 ✏️"></a>12.7 修改历史提交内容 ✏️</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交互式变基</span></span><br><span class="line">git rebase -i HEAD~3</span><br><span class="line"><span class="comment"># 在编辑器中修改pick为edit</span></span><br><span class="line"><span class="comment"># 修改文件后</span></span><br><span class="line">git add .</span><br><span class="line">git commit --amend</span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="12-8-merge的回退-↩️"><a href="#12-8-merge的回退-↩️" class="headerlink" title="12.8 merge的回退 ↩️"></a>12.8 merge的回退 ↩️</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退合并</span></span><br><span class="line">git reset --hard HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用revert</span></span><br><span class="line">git revert -m 1 合并提交哈希</span><br></pre></td></tr></table></figure><h3 id="12-9-修改最近一次的commit时间-⏰"><a href="#12-9-修改最近一次的commit时间-⏰" class="headerlink" title="12.9 修改最近一次的commit时间 ⏰"></a>12.9 修改最近一次的commit时间 ⏰</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改提交时间</span></span><br><span class="line">git commit --amend --<span class="built_in">date</span>=<span class="string">&quot;2025-01-02 12:00:00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改作者时间</span></span><br><span class="line">git commit --amend --<span class="built_in">date</span>=<span class="string">&quot;2025-01-02 12:00:00&quot;</span> --no-edit</span><br></pre></td></tr></table></figure><h3 id="12-10-将其他分支完全覆盖到当前分支-🔄"><a href="#12-10-将其他分支完全覆盖到当前分支-🔄" class="headerlink" title="12.10 将其他分支完全覆盖到当前分支 🔄"></a>12.10 将其他分支完全覆盖到当前分支 🔄</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置到指定分支</span></span><br><span class="line">git reset --hard 其他分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制推送（谨慎使用）</span></span><br><span class="line">git push --force origin 当前分支名</span><br></pre></td></tr></table></figure><h3 id="13-1-IDEA-Git出现Line-Separators-Warning-⚠️"><a href="#13-1-IDEA-Git出现Line-Separators-Warning-⚠️" class="headerlink" title="13.1 IDEA Git出现Line Separators Warning ⚠️"></a>13.1 IDEA Git出现Line Separators Warning ⚠️</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决换行符警告</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="13-2-LF-will-be-replaced-by-CRLF-🔄"><a href="#13-2-LF-will-be-replaced-by-CRLF-🔄" class="headerlink" title="13.2 LF will be replaced by CRLF 🔄"></a>13.2 LF will be replaced by CRLF 🔄</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows系统换行符问题</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="13-3-git-reset-–hard-HEAD-后显示-more-🤔"><a href="#13-3-git-reset-–hard-HEAD-后显示-more-🤔" class="headerlink" title="13.3 git reset –hard HEAD^ 后显示 more? 🤔"></a>13.3 git reset –hard HEAD^ 后显示 more? 🤔</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Windows CMD中，^ 是特殊字符，需要使用引号</span></span><br><span class="line">git reset --hard <span class="string">&quot;HEAD^&quot;</span></span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure><h3 id="13-4-git-pull-提示-warning-ignoring-broken-ref-refs-remotes-origin-HEAD-⚠️"><a href="#13-4-git-pull-提示-warning-ignoring-broken-ref-refs-remotes-origin-HEAD-⚠️" class="headerlink" title="13.4 git pull 提示 warning: ignoring broken ref refs&#x2F;remotes&#x2F;origin&#x2F;HEAD ⚠️"></a>13.4 git pull 提示 warning: ignoring broken ref refs&#x2F;remotes&#x2F;origin&#x2F;HEAD ⚠️</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修复损坏的远程HEAD引用</span></span><br><span class="line">git remote set-head origin main</span><br></pre></td></tr></table></figure><h3 id="13-5-unable-to-get-local-issuer-certificate-🔐"><a href="#13-5-unable-to-get-local-issuer-certificate-🔐" class="headerlink" title="13.5 unable to get local issuer certificate 🔐"></a>13.5 unable to get local issuer certificate 🔐</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决SSL证书问题</span></span><br><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="13-6-git-status-中文文件名乱码-🔤"><a href="#13-6-git-status-中文文件名乱码-🔤" class="headerlink" title="13.6 git status 中文文件名乱码 🔤"></a>13.6 git status 中文文件名乱码 🔤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决中文文件名显示问题</span></span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="13-7-右键菜单没有-Git-Bash-here-📁"><a href="#13-7-右键菜单没有-Git-Bash-here-📁" class="headerlink" title="13.7 右键菜单没有 Git Bash here 📁"></a>13.7 右键菜单没有 Git Bash here 📁</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新安装Git时选择&quot;Git Bash Here&quot;选项</span></span><br><span class="line"><span class="comment"># 或手动添加到注册表</span></span><br></pre></td></tr></table></figure><h3 id="13-8-fatal-detected-dubious-ownership-in-repository-🚫"><a href="#13-8-fatal-detected-dubious-ownership-in-repository-🚫" class="headerlink" title="13.8 fatal: detected dubious ownership in repository 🚫"></a>13.8 fatal: detected dubious ownership in repository 🚫</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决仓库所有权问题</span></span><br><span class="line">git config --global --add safe.directory /path/to/your/repo</span><br></pre></td></tr></table></figure><h3 id="13-9-能访问GitHub但不能进行Git相关操作-🌐"><a href="#13-9-能访问GitHub但不能进行Git相关操作-🌐" class="headerlink" title="13.9 能访问GitHub但不能进行Git相关操作 🌐"></a>13.9 能访问GitHub但不能进行Git相关操作 🌐</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查网络代理设置</span></span><br><span class="line">git config --global http.proxy http://proxy:port</span><br><span class="line">git config --global https.proxy https://proxy:port</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除代理设置</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h3 id="13-10-查看Git远程仓库信息完整指南-🔍"><a href="#13-10-查看Git远程仓库信息完整指南-🔍" class="headerlink" title="13.10 查看Git远程仓库信息完整指南 🔍"></a>13.10 查看Git远程仓库信息完整指南 🔍</h3><h4 id="13-10-1-基本查看命令-📋"><a href="#13-10-1-基本查看命令-📋" class="headerlink" title="13.10.1 基本查看命令 📋"></a>13.10.1 基本查看命令 📋</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有远程仓库（简洁版）</span></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有远程仓库（详细版）</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看特定远程仓库的详细信息</span></span><br><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h4 id="13-10-2-git-remote-命令详解-🔍"><a href="#13-10-2-git-remote-命令详解-🔍" class="headerlink" title="13.10.2 git remote 命令详解 🔍"></a>13.10.2 git remote 命令详解 🔍</h4><h5 id="git-remote（简洁版）"><a href="#git-remote（简洁版）" class="headerlink" title="git remote（简洁版）"></a><strong>git remote（简洁版）</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># origin</span></span><br><span class="line"><span class="comment"># upstream</span></span><br></pre></td></tr></table></figure><h5 id="git-remote-v（详细版）"><a href="#git-remote-v（详细版）" class="headerlink" title="git remote -v（详细版）"></a><strong>git remote -v（详细版）</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># origin    https://github.com/用户名/仓库名.git (fetch)</span></span><br><span class="line"><span class="comment"># origin    https://github.com/用户名/仓库名.git (push)</span></span><br><span class="line"><span class="comment"># upstream  https://github.com/原作者/仓库名.git (fetch)</span></span><br><span class="line"><span class="comment"># upstream  https://github.com/原作者/仓库名.git (push)</span></span><br></pre></td></tr></table></figure><h5 id="git-remote-show（详细信息）"><a href="#git-remote-show（详细信息）" class="headerlink" title="git remote show（详细信息）"></a><strong>git remote show（详细信息）</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># * remote origin</span></span><br><span class="line"><span class="comment">#   Fetch URL: https://github.com/用户名/仓库名.git</span></span><br><span class="line"><span class="comment">#   Push  URL: https://github.com/用户名/仓库名.git</span></span><br><span class="line"><span class="comment">#   HEAD branch: main</span></span><br><span class="line"><span class="comment">#   Remote branches:</span></span><br><span class="line"><span class="comment">#     main tracked</span></span><br><span class="line"><span class="comment">#     dev  tracked</span></span><br><span class="line"><span class="comment">#   Local branch configured for &#x27;git pull&#x27;:</span></span><br><span class="line"><span class="comment">#     main merges with remote main</span></span><br><span class="line"><span class="comment">#   Local ref configured for &#x27;git push&#x27;:</span></span><br><span class="line"><span class="comment">#     main pushes to main (up to date)</span></span><br></pre></td></tr></table></figure><h4 id="13-10-3-远程仓库信息解读-📖"><a href="#13-10-3-远程仓库信息解读-📖" class="headerlink" title="13.10.3 远程仓库信息解读 📖"></a>13.10.3 远程仓库信息解读 📖</h4><h5 id="远程仓库名称"><a href="#远程仓库名称" class="headerlink" title="远程仓库名称"></a><strong>远程仓库名称</strong></h5><ul><li><strong>origin</strong>：默认的远程仓库名称</li><li><strong>upstream</strong>：上游仓库（通常用于Fork项目）</li><li><strong>其他名称</strong>：自定义的远程仓库名称</li></ul><h5 id="URL类型"><a href="#URL类型" class="headerlink" title="URL类型"></a><strong>URL类型</strong></h5><ul><li><strong>HTTPS</strong>：<code>https://github.com/用户名/仓库名.git</code></li><li><strong>SSH</strong>：<code>git@github.com:用户名/仓库名.git</code></li></ul><h5 id="操作类型"><a href="#操作类型" class="headerlink" title="操作类型"></a><strong>操作类型</strong></h5><ul><li><strong>fetch</strong>：拉取操作对应的URL</li><li><strong>push</strong>：推送操作对应的URL</li></ul><h4 id="13-10-4-查看分支跟踪关系-🌿"><a href="#13-10-4-查看分支跟踪关系-🌿" class="headerlink" title="13.10.4 查看分支跟踪关系 🌿"></a>13.10.4 查看分支跟踪关系 🌿</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支与远程分支的跟踪关系</span></span><br><span class="line">git branch -vv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># * main    a1b2c3d [origin/main] 最新提交信息</span></span><br><span class="line"><span class="comment">#   dev     e4f5g6h [origin/dev] 开发分支</span></span><br><span class="line"><span class="comment">#   feature f7g8h9i 功能分支（无跟踪关系）</span></span><br></pre></td></tr></table></figure><h4 id="13-10-5-查看远程分支信息-📡"><a href="#13-10-5-查看远程分支信息-📡" class="headerlink" title="13.10.5 查看远程分支信息 📡"></a>13.10.5 查看远程分支信息 📡</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># origin/main</span></span><br><span class="line"><span class="comment"># origin/dev</span></span><br><span class="line"><span class="comment"># origin/feature</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支（本地+远程）</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># * main</span></span><br><span class="line"><span class="comment">#   dev</span></span><br><span class="line"><span class="comment">#   feature</span></span><br><span class="line"><span class="comment">#   remotes/origin/main</span></span><br><span class="line"><span class="comment">#   remotes/origin/dev</span></span><br><span class="line"><span class="comment">#   remotes/origin/feature</span></span><br></pre></td></tr></table></figure><h4 id="13-10-6-查看远程仓库状态-📊"><a href="#13-10-6-查看远程仓库状态-📊" class="headerlink" title="13.10.6 查看远程仓库状态 📊"></a>13.10.6 查看远程仓库状态 📊</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库的详细信息</span></span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出包含：</span></span><br><span class="line"><span class="comment"># - 远程仓库URL</span></span><br><span class="line"><span class="comment"># - HEAD分支</span></span><br><span class="line"><span class="comment"># - 远程分支列表</span></span><br><span class="line"><span class="comment"># - 本地分支配置</span></span><br><span class="line"><span class="comment"># - 推送/拉取配置</span></span><br></pre></td></tr></table></figure><h4 id="13-10-7-实际使用场景-🎯"><a href="#13-10-7-实际使用场景-🎯" class="headerlink" title="13.10.7 实际使用场景 🎯"></a>13.10.7 实际使用场景 🎯</h4><h5 id="场景1：检查仓库配置"><a href="#场景1：检查仓库配置" class="headerlink" title="场景1：检查仓库配置"></a><strong>场景1：检查仓库配置</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> 你的项目</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查分支跟踪关系</span></span><br><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h5 id="场景2：Fork项目协作"><a href="#场景2：Fork项目协作" class="headerlink" title="场景2：Fork项目协作"></a><strong>场景2：Fork项目协作</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看Fork项目的远程配置</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># origin    https://github.com/你的用户名/仓库名.git (fetch)</span></span><br><span class="line"><span class="comment"># origin    https://github.com/你的用户名/仓库名.git (push)</span></span><br><span class="line"><span class="comment"># upstream  https://github.com/原作者/仓库名.git (fetch)</span></span><br><span class="line"><span class="comment"># upstream  https://github.com/原作者/仓库名.git (push)</span></span><br></pre></td></tr></table></figure><h5 id="场景3：多远程仓库管理"><a href="#场景3：多远程仓库管理" class="headerlink" title="场景3：多远程仓库管理"></a><strong>场景3：多远程仓库管理</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有远程仓库</span></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看特定远程仓库详情</span></span><br><span class="line">git remote show upstream</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支跟踪关系</span></span><br><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h4 id="13-10-8-常见问题解决-🔧"><a href="#13-10-8-常见问题解决-🔧" class="headerlink" title="13.10.8 常见问题解决 🔧"></a>13.10.8 常见问题解决 🔧</h4><h5 id="问题1：没有远程仓库"><a href="#问题1：没有远程仓库" class="headerlink" title="问题1：没有远程仓库"></a><strong>问题1：没有远程仓库</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果显示没有远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 输出：空（没有远程仓库）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git remote add origin https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure><h5 id="问题2：远程仓库地址错误"><a href="#问题2：远程仓库地址错误" class="headerlink" title="问题2：远程仓库地址错误"></a><strong>问题2：远程仓库地址错误</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前地址</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库地址</span></span><br><span class="line">git remote set-url origin 新的仓库地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证修改</span></span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h5 id="问题3：分支跟踪关系丢失"><a href="#问题3：分支跟踪关系丢失" class="headerlink" title="问题3：分支跟踪关系丢失"></a><strong>问题3：分支跟踪关系丢失</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支状态</span></span><br><span class="line">git branch -vv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新设置跟踪关系</span></span><br><span class="line">git branch --set-upstream-to=origin/main main</span><br></pre></td></tr></table></figure><h4 id="13-10-9-高级用法-🚀"><a href="#13-10-9-高级用法-🚀" class="headerlink" title="13.10.9 高级用法 🚀"></a>13.10.9 高级用法 🚀</h4><h5 id="查看远程仓库的完整信息"><a href="#查看远程仓库的完整信息" class="headerlink" title="查看远程仓库的完整信息"></a><strong>查看远程仓库的完整信息</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取远程仓库的详细信息</span></span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含内容：</span></span><br><span class="line"><span class="comment"># - 远程仓库URL</span></span><br><span class="line"><span class="comment"># - HEAD分支</span></span><br><span class="line"><span class="comment"># - 远程分支列表</span></span><br><span class="line"><span class="comment"># - 本地分支配置</span></span><br><span class="line"><span class="comment"># - 推送/拉取配置</span></span><br><span class="line"><span class="comment"># - 过时的分支信息</span></span><br></pre></td></tr></table></figure><h5 id="检查远程仓库连接"><a href="#检查远程仓库连接" class="headerlink" title="检查远程仓库连接"></a><strong>检查远程仓库连接</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试远程仓库连接</span></span><br><span class="line">git ls-remote origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># a1b2c3d4e5f6... refs/heads/main</span></span><br><span class="line"><span class="comment"># e7f8g9h0i1j2... refs/heads/dev</span></span><br><span class="line"><span class="comment"># k3l4m5n6o7p8... refs/tags/v1.0.0</span></span><br></pre></td></tr></table></figure><h5 id="查看远程仓库的标签"><a href="#查看远程仓库的标签" class="headerlink" title="查看远程仓库的标签"></a><strong>查看远程仓库的标签</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程标签</span></span><br><span class="line">git ls-remote --tags origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># a1b2c3d4e5f6... refs/tags/v1.0.0</span></span><br><span class="line"><span class="comment"># e7f8g9h0i1j2... refs/tags/v1.1.0</span></span><br></pre></td></tr></table></figure><h4 id="13-10-10-最佳实践建议-💡"><a href="#13-10-10-最佳实践建议-💡" class="headerlink" title="13.10.10 最佳实践建议 💡"></a>13.10.10 最佳实践建议 💡</h4><h5 id="1-定期检查远程仓库状态"><a href="#1-定期检查远程仓库状态" class="headerlink" title="1. 定期检查远程仓库状态"></a><strong>1. 定期检查远程仓库状态</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定期执行</span></span><br><span class="line">git remote -v</span><br><span class="line">git branch -vv</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h5 id="2-使用SSH密钥（推荐）"><a href="#2-使用SSH密钥（推荐）" class="headerlink" title="2. 使用SSH密钥（推荐）"></a><strong>2. 使用SSH密钥（推荐）</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查是否使用SSH</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 应该显示：git@github.com:用户名/仓库名.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不是SSH，可以修改</span></span><br><span class="line">git remote set-url origin git@github.com:用户名/仓库名.git</span><br></pre></td></tr></table></figure><h5 id="3-验证远程仓库权限"><a href="#3-验证远程仓库权限" class="headerlink" title="3. 验证远程仓库权限"></a><strong>3. 验证远程仓库权限</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试推送权限</span></span><br><span class="line">git push origin main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试拉取权限</span></span><br><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>小贴士</strong>: 定期检查远程仓库信息是Git协作开发的重要习惯，确保你的本地仓库与远程仓库保持正确的连接关系！</p></blockquote><h3 id="13-11-新建GitHub仓库本地推送完整指南-🚀"><a href="#13-11-新建GitHub仓库本地推送完整指南-🚀" class="headerlink" title="13.11 新建GitHub仓库本地推送完整指南 🚀"></a>13.11 新建GitHub仓库本地推送完整指南 🚀</h3><h4 id="13-10-1-在GitHub上创建新仓库-🌐"><a href="#13-10-1-在GitHub上创建新仓库-🌐" class="headerlink" title="13.10.1 在GitHub上创建新仓库 🌐"></a>13.10.1 在GitHub上创建新仓库 🌐</h4><ol><li><strong>登录GitHub</strong>：访问 <a href="https://github.com/">https://github.com</a></li><li><strong>点击”New repository”</strong>：右上角的”+”按钮 → “New repository”</li><li><strong>填写仓库信息</strong>：<ul><li>Repository name: <code>test_create_repo</code>（你的仓库名）</li><li>Description: <code>测试仓库</code>（可选）</li><li>Public&#x2F;Private: 选择可见性</li><li><strong>不要勾选</strong> “Add a README file”</li><li><strong>不要勾选</strong> “Add .gitignore”</li><li><strong>不要勾选</strong> “Choose a license”</li></ul></li><li><strong>点击”Create repository”</strong></li></ol><h4 id="13-10-2-本地操作完整流程-💻"><a href="#13-10-2-本地操作完整流程-💻" class="headerlink" title="13.10.2 本地操作完整流程 💻"></a>13.10.2 本地操作完整流程 💻</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 进入你的项目目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/Desktop/归档材料/test_create_repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 初始化Git仓库（如果还没做）</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加远程仓库（替换为你的实际仓库地址）</span></span><br><span class="line">git remote add origin https://github.com/你的用户名/test_create_repo.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 创建第一个文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# 测试仓库&quot;</span> &gt; README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 添加文件到暂存区</span></span><br><span class="line">git add README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 提交到本地仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;Initial commit: 添加README文件&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 推送到远程仓库</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="13-10-3-git-push命令详解-🔍"><a href="#13-10-3-git-push命令详解-🔍" class="headerlink" title="13.10.3 git push命令详解 🔍"></a>13.10.3 git push命令详解 🔍</h4><h5 id="命令结构"><a href="#命令结构" class="headerlink" title="命令结构"></a><strong>命令结构</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line"><span class="comment">#     ↑    ↑      ↑</span></span><br><span class="line"><span class="comment">#     │    │      └── 本地分支名</span></span><br><span class="line"><span class="comment">#     │    └────────── 远程仓库名</span></span><br><span class="line"><span class="comment">#     └─────────────── 设置上游分支</span></span><br></pre></td></tr></table></figure><h5 id="分支关系说明"><a href="#分支关系说明" class="headerlink" title="分支关系说明"></a><strong>分支关系说明</strong></h5><ul><li><strong>本地分支</strong>：<code>master</code>（命令最后的参数）</li><li><strong>远程分支</strong>：<code>origin/master</code>（远程仓库名 + “&#x2F;“ + 分支名）</li></ul><h5 id="分支关系图"><a href="#分支关系图" class="headerlink" title="分支关系图"></a><strong>分支关系图</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">本地仓库                   远程仓库(origin)</span><br><span class="line">┌─────────────┐           ┌─────────────┐</span><br><span class="line">│   master    │ ──────→   │   master    │</span><br><span class="line">│  (本地分支)  │           │ (远程分支)   │</span><br><span class="line">└─────────────┘           └─────────────┘</span><br></pre></td></tr></table></figure><h4 id="13-10-4-推送过程详解-🔄"><a href="#13-10-4-推送过程详解-🔄" class="headerlink" title="13.10.4 推送过程详解 🔄"></a>13.10.4 推送过程详解 🔄</h4><p><strong>推送前状态</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本地仓库: master (有新的提交)</span><br><span class="line">远程仓库: origin/master (没有新提交)</span><br></pre></td></tr></table></figure><p><strong>执行命令</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><strong>推送后状态</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本地仓库: master (与远程同步)</span><br><span class="line">远程仓库: origin/master (有了新提交)</span><br></pre></td></tr></table></figure><h4 id="13-10-5-不同分支名推送示例-🛠️"><a href="#13-10-5-不同分支名推送示例-🛠️" class="headerlink" title="13.10.5 不同分支名推送示例 🛠️"></a>13.10.5 不同分支名推送示例 🛠️</h4><h5 id="推送到不同分支名"><a href="#推送到不同分支名" class="headerlink" title="推送到不同分支名"></a><strong>推送到不同分支名</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地master推送到远程main分支</span></span><br><span class="line">git push -u origin master:main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地feature推送到远程develop分支</span></span><br><span class="line">git push -u origin feature:develop</span><br></pre></td></tr></table></figure><h5 id="本地分支4055推送到远程4056"><a href="#本地分支4055推送到远程4056" class="headerlink" title="本地分支4055推送到远程4056"></a><strong>本地分支4055推送到远程4056</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin 4055:4056</span><br><span class="line"><span class="comment">#     ↑    ↑      ↑    ↑</span></span><br><span class="line"><span class="comment">#     │    │      │    └── 远程分支名</span></span><br><span class="line"><span class="comment">#     │    │      └─────── 本地分支名</span></span><br><span class="line"><span class="comment">#     │    └────────────── 远程仓库名</span></span><br><span class="line"><span class="comment">#     └─────────────────── 设置上游分支</span></span><br></pre></td></tr></table></figure><p><strong>分支关系图</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">本地仓库                   远程仓库(origin)</span><br><span class="line">┌─────────────┐           ┌─────────────┐</span><br><span class="line">│     4055    │ ──────→   │     4056    │</span><br><span class="line">│  (本地分支)  │           │ (远程分支)   │</span><br><span class="line">└─────────────┘           └─────────────┘</span><br></pre></td></tr></table></figure><h4 id="13-10-6-u参数详解-⚙️"><a href="#13-10-6-u参数详解-⚙️" class="headerlink" title="13.10.6 -u参数详解 ⚙️"></a>13.10.6 -u参数详解 ⚙️</h4><h5 id="u参数的作用"><a href="#u参数的作用" class="headerlink" title="-u参数的作用"></a><strong>-u参数的作用</strong></h5><ul><li><strong>全称</strong>：<code>--set-upstream</code></li><li><strong>作用</strong>：设置上游分支（upstream branch）</li><li><strong>效果</strong>：建立本地分支与远程分支的跟踪关系</li></ul><h5 id="使用-u的好处"><a href="#使用-u的好处" class="headerlink" title="使用-u的好处"></a><strong>使用-u的好处</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置了上游分支后，可以直接使用</span></span><br><span class="line">git push                    <span class="comment"># 等同于 git push origin master</span></span><br><span class="line">git pull                    <span class="comment"># 等同于 git pull origin master</span></span><br><span class="line">git status                  <span class="comment"># 会显示与远程分支的关系</span></span><br></pre></td></tr></table></figure><h5 id="对比：有-u和没有-u"><a href="#对比：有-u和没有-u" class="headerlink" title="对比：有-u和没有-u"></a><strong>对比：有-u和没有-u</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用-u参数</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># 结果：本地master分支跟踪远程origin/master分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用-u参数</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment"># 结果：没有建立跟踪关系</span></span><br></pre></td></tr></table></figure><h4 id="13-10-7-常见问题解决-🔧"><a href="#13-10-7-常见问题解决-🔧" class="headerlink" title="13.10.7 常见问题解决 🔧"></a>13.10.7 常见问题解决 🔧</h4><h5 id="问题1：分支名称不匹配"><a href="#问题1：分支名称不匹配" class="headerlink" title="问题1：分支名称不匹配"></a><strong>问题1：分支名称不匹配</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果GitHub默认分支是main，而本地是master</span></span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h5 id="问题2：权限问题"><a href="#问题2：权限问题" class="headerlink" title="问题2：权限问题"></a><strong>问题2：权限问题</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Personal Access Token</span></span><br><span class="line">git remote set-url origin https://你的用户名:你的Token@github.com/你的用户名/test_create_repo.git</span><br></pre></td></tr></table></figure><h5 id="问题3：SSH密钥问题"><a href="#问题3：SSH密钥问题" class="headerlink" title="问题3：SSH密钥问题"></a><strong>问题3：SSH密钥问题</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用SSH地址</span></span><br><span class="line">git remote set-url origin git@github.com:你的用户名/test_create_repo.git</span><br></pre></td></tr></table></figure><h4 id="13-10-8-验证推送结果-✅"><a href="#13-10-8-验证推送结果-✅" class="headerlink" title="13.10.8 验证推送结果 ✅"></a>13.10.8 验证推送结果 ✅</h4><h5 id="检查本地状态"><a href="#检查本地状态" class="headerlink" title="检查本地状态"></a><strong>检查本地状态</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支跟踪关系</span></span><br><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h5 id="检查远程仓库"><a href="#检查远程仓库" class="headerlink" title="检查远程仓库"></a><strong>检查远程仓库</strong></h5><ul><li>访问你的GitHub仓库页面</li><li>确认README.md文件已上传</li><li>确认提交历史显示正确</li></ul><h4 id="13-10-9-最佳实践建议-💡"><a href="#13-10-9-最佳实践建议-💡" class="headerlink" title="13.10.9 最佳实践建议 💡"></a>13.10.9 最佳实践建议 💡</h4><h5 id="1-使用SSH密钥（推荐）"><a href="#1-使用SSH密钥（推荐）" class="headerlink" title="1. 使用SSH密钥（推荐）"></a><strong>1. 使用SSH密钥（推荐）</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成SSH密钥</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;你的邮箱@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到GitHub</span></span><br><span class="line"><span class="comment"># 1. 复制公钥内容</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># 2. 在GitHub Settings → SSH and GPG keys 中添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用SSH地址</span></span><br><span class="line">git remote add origin git@github.com:你的用户名/test_create_repo.git</span><br></pre></td></tr></table></figure><h5 id="2-统一分支名称"><a href="#2-统一分支名称" class="headerlink" title="2. 统一分支名称"></a><strong>2. 统一分支名称</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置默认分支为main</span></span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h5 id="3-添加-gitignore文件"><a href="#3-添加-gitignore文件" class="headerlink" title="3. 添加.gitignore文件"></a><strong>3. 添加.gitignore文件</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建.gitignore文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;node_modules/&quot;</span> &gt; .gitignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*.log&quot;</span> &gt;&gt; .gitignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加并提交</span></span><br><span class="line">git add .gitignore</span><br><span class="line">git commit -m <span class="string">&quot;feat: 添加.gitignore文件&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>小贴士</strong>: 新建GitHub仓库的推送操作是Git协作开发的基础，理解每个参数的作用和分支关系对于掌握Git非常重要！</p></blockquote><h2 id="14-其他补充信息-📚"><a href="#14-其他补充信息-📚" class="headerlink" title="14. 其他补充信息 📚"></a>14. 其他补充信息 📚</h2><h3 id="14-1-Commit-Type-类别-📋"><a href="#14-1-Commit-Type-类别-📋" class="headerlink" title="14.1 Commit Type 类别 📋"></a>14.1 Commit Type 类别 📋</h3><table><thead><tr><th>类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>feat</code></td><td>新功能</td><td><code>feat: 添加用户登录功能</code></td></tr><tr><td><code>fix</code></td><td>修复bug</td><td><code>fix: 修复登录验证bug</code></td></tr><tr><td><code>docs</code></td><td>文档更新</td><td><code>docs: 更新API文档</code></td></tr><tr><td><code>style</code></td><td>代码格式调整</td><td><code>style: 调整代码缩进</code></td></tr><tr><td><code>refactor</code></td><td>代码重构</td><td><code>refactor: 重构用户模块</code></td></tr><tr><td><code>test</code></td><td>测试相关</td><td><code>test: 添加单元测试</code></td></tr><tr><td><code>chore</code></td><td>构建过程或辅助工具的变动</td><td><code>chore: 更新依赖版本</code></td></tr></tbody></table><h3 id="14-2-管理多个用户信息-👥"><a href="#14-2-管理多个用户信息-👥" class="headerlink" title="14.2 管理多个用户信息 👥"></a>14.2 管理多个用户信息 👥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">git config --global user.name <span class="string">&quot;全局用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;全局邮箱@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目级配置</span></span><br><span class="line">git config user.name <span class="string">&quot;项目用户名&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;项目邮箱@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">git config --list</span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><h2 id="15-可能有用的小工具-🛠️"><a href="#15-可能有用的小工具-🛠️" class="headerlink" title="15. 可能有用的小工具 🛠️"></a>15. 可能有用的小工具 🛠️</h2><h3 id="15-1-push-sh-智能推送脚本-🤖"><a href="#15-1-push-sh-智能推送脚本-🤖" class="headerlink" title="15.1 push.sh - 智能推送脚本 🤖"></a>15.1 push.sh - 智能推送脚本 🤖</h3><blockquote><p>根据<a href="https://mofan212.github.io/posts/Git/">Mofan的Git理论与使用</a>文章整理</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 自动完成以下操作：</span></span><br><span class="line"><span class="comment"># 1. 检查当前分支</span></span><br><span class="line"><span class="comment"># 2. 拉取最新代码</span></span><br><span class="line"><span class="comment"># 3. 合并到目标分支</span></span><br><span class="line"><span class="comment"># 4. 推送到远端</span></span><br><span class="line"><span class="comment"># 5. 检出到原分支</span></span><br><span class="line"><span class="comment"># 6. cherry-pick到原分支并推送</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本地址：my-tools/git/push.sh</span></span><br></pre></td></tr></table></figure><h3 id="15-2-pull-sh-批量拉取脚本-📥"><a href="#15-2-pull-sh-批量拉取脚本-📥" class="headerlink" title="15.2 pull.sh - 批量拉取脚本 📥"></a>15.2 pull.sh - 批量拉取脚本 📥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 通过项目名称在GitHub、Gitee上拉取代码</span></span><br><span class="line"><span class="comment"># 适用场景：知道项目名但不知道用户名的情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本地址：my-tools/git/pull.sh</span></span><br></pre></td></tr></table></figure><h3 id="15-3-常用别名配置-⚡"><a href="#15-3-常用别名配置-⚡" class="headerlink" title="15.3 常用别名配置 ⚡"></a>15.3 常用别名配置 ⚡</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置常用Git别名</span></span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.unstage <span class="string">&#x27;reset HEAD --&#x27;</span></span><br><span class="line">git config --global alias.last <span class="string">&#x27;log -1 HEAD&#x27;</span></span><br><span class="line">git config --global alias.visual <span class="string">&#x27;!gitk&#x27;</span></span><br><span class="line">git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure><h2 id="🔗-参考资源"><a href="#🔗-参考资源" class="headerlink" title="🔗 参考资源"></a>🔗 参考资源</h2><ul><li><a href="https://liaoxuefeng.com/books/git/introduction/index.html">廖雪峰Git教程</a> - 中文Git教程经典 📚</li><li><a href="https://mofan212.github.io/posts/Git/">Mofan的Git理论与使用</a> - 详细的Git理论讲解 🎯</li><li><a href="https://git-scm.com/book">Pro Git Book</a> - Git官方文档 📖</li><li><a href="https://docs.github.com/">GitHub官方文档</a> - GitHub使用指南 🌐</li></ul><h2 id="📝-总结"><a href="#📝-总结" class="headerlink" title="📝 总结"></a>📝 总结</h2><p>Git作为现代软件开发的核心工具，掌握其基本操作和最佳实践对于开发者来说至关重要。本文涵盖了从基础概念到高级应用的完整Git操作指南，希望能够帮助你在日常开发中更好地使用Git进行版本控制和团队协作。</p><p>记住，Git是一个强大的工具，但更重要的是理解其背后的设计理念和工作原理。通过不断的实践和学习，你将能够熟练运用Git的各种功能，提高开发效率。</p><hr><p><strong>最后更新</strong>: 2025-01-02<br><strong>作者</strong>: suoChina<br><strong>标签</strong>: Git, 版本控制, 开发工具, 协作开发</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
            <tag> 开发工具 </tag>
            
            <tag> 协作开发 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
