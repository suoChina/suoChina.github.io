<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java函数式编程详解：从Lambda到Stream的完整指南</title>
      <link href="//java-functional-programming-guide/"/>
      <url>//java-functional-programming-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="🚀-函数式编程基础"><a href="#🚀-函数式编程基础" class="headerlink" title="🚀 函数式编程基础"></a>🚀 函数式编程基础</h1><h2 id="📖-什么是函数"><a href="#📖-什么是函数" class="headerlink" title="📖 什么是函数"></a>📖 什么是函数</h2><p>函数即规则。在数学上，函数是一种映射关系，将输入值映射到输出值。</p><h3 id="🔢-数学函数示例"><a href="#🔢-数学函数示例" class="headerlink" title="🔢 数学函数示例"></a>🔢 数学函数示例</h3><p>考虑函数 $f(x) &#x3D; x^2$：</p><table><thead><tr><th>INPUT</th><th>f(x) &#x3D; x²</th><th>OUTPUT</th></tr></thead><tbody><tr><td>1</td><td>1²</td><td>1</td></tr><tr><td>2</td><td>2²</td><td>4</td></tr><tr><td>3</td><td>3²</td><td>9</td></tr><tr><td>4</td><td>4²</td><td>16</td></tr><tr><td>5</td><td>5²</td><td>25</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="函数的核心特性"><a href="#函数的核心特性" class="headerlink" title="函数的核心特性"></a>函数的核心特性</h3><ol><li><strong>确定性</strong>：相同的输入总是产生相同的输出</li><li><strong>无副作用</strong>：函数执行不会改变外部状态</li><li><strong>不变性</strong>：函数的执行规则永远不变</li></ol><blockquote><p>💡 <strong>编程启示</strong>：在Java中，方法本质上也是函数，但绑定在对象之上。函数式编程强调不变性，这在多线程编程中意味着线程安全。</p></blockquote><h1 id="🎯-Lambda表达式与函数式接口"><a href="#🎯-Lambda表达式与函数式接口" class="headerlink" title="🎯 Lambda表达式与函数式接口"></a>🎯 Lambda表达式与函数式接口</h1><h2 id="📝-Lambda表达式基础"><a href="#📝-Lambda表达式基础" class="headerlink" title="📝 Lambda表达式基础"></a>📝 Lambda表达式基础</h2><p>在Java中，Lambda表达式是函数式编程的核心语法，它允许我们将函数作为参数传递。</p><h3 id="🔄-Lambda表达式的两种形式"><a href="#🔄-Lambda表达式的两种形式" class="headerlink" title="🔄 Lambda表达式的两种形式"></a>🔄 Lambda表达式的两种形式</h3><ol><li><strong>Lambda表达式</strong>：<code>(参数) -&gt; 表达式</code></li><li><strong>方法引用</strong>：<code>类名::方法名</code> 或 <code>对象::方法名</code></li></ol><h3 id="📋-Lambda表达式语法规则"><a href="#📋-Lambda表达式语法规则" class="headerlink" title="📋 Lambda表达式语法规则"></a>📋 Lambda表达式语法规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 单行表达式，可以省略大括号和return</span></span><br><span class="line">(<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 多行代码，必须使用大括号和return</span></span><br><span class="line">(<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 参数类型可以省略（类型推断）</span></span><br><span class="line">(a, b) -&gt; a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 单个参数可以省略括号</span></span><br><span class="line">a -&gt; a * <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="🔌-函数式接口"><a href="#🔌-函数式接口" class="headerlink" title="🔌 函数式接口"></a>🔌 函数式接口</h3><p>Lambda表达式的类型由<strong>函数式接口</strong>决定。函数式接口是只包含一个抽象方法的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="💻-实际代码示例"><a href="#💻-实际代码示例" class="headerlink" title="💻 实际代码示例"></a>💻 实际代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaExamples</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义函数式接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntCalculator</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DoubleCalculator</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 明确指定参数类型</span></span><br><span class="line">        <span class="type">IntCalculator</span> <span class="variable">lambda1</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 使用类型推断（推荐）</span></span><br><span class="line">        <span class="type">IntCalculator</span> <span class="variable">lambda2</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 多行代码</span></span><br><span class="line">        <span class="type">IntCalculator</span> <span class="variable">lambda3</span> <span class="operator">=</span> (a, b) -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">        <span class="keyword">return</span> c + <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 不同返回类型</span></span><br><span class="line">        <span class="type">DoubleCalculator</span> <span class="variable">lambda4</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(lambda1.calculate(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 8</span></span><br><span class="line">        System.out.println(lambda2.calculate(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 8</span></span><br><span class="line">        System.out.println(lambda3.calculate(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 9</span></span><br><span class="line">        System.out.println(lambda4.calculate(<span class="number">5.5</span>, <span class="number">3.2</span>)); <span class="comment">// 输出: 8.7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🔗-方法引用"><a href="#🔗-方法引用" class="headerlink" title="🔗 方法引用"></a>🔗 方法引用</h2><p>方法引用是Lambda表达式的简化写法，当Lambda表达式只是调用一个已存在的方法时，可以使用方法引用。</p><h3 id="📚-方法引用的四种类型"><a href="#📚-方法引用的四种类型" class="headerlink" title="📚 方法引用的四种类型"></a>📚 方法引用的四种类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferenceExamples</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 学生类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String sex;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String sex)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 类名::静态方法</span></span><br><span class="line">        <span class="type">IntBinaryOperator</span> <span class="variable">max</span> <span class="operator">=</span> Math::max;</span><br><span class="line">        System.out.println(max.applyAsInt(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出: 5</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 类名::实例方法</span></span><br><span class="line">        Function&lt;Student, String&gt; getName = Student::getName;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        System.out.println(getName.apply(student)); <span class="comment">// 输出: 张三</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 对象::实例方法</span></span><br><span class="line">        Consumer&lt;String&gt; printer = System.out::println;</span><br><span class="line">        printer.accept(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">// 输出: Hello World</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 类名::new (构造方法引用)</span></span><br><span class="line">        Supplier&lt;Student&gt; studentCreator = Student::<span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">newStudent</span> <span class="operator">=</span> studentCreator.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⚖️-方法引用与Lambda表达式对比"><a href="#⚖️-方法引用与Lambda表达式对比" class="headerlink" title="⚖️ 方法引用与Lambda表达式对比"></a>⚖️ 方法引用与Lambda表达式对比</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferenceComparison</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法引用 vs Lambda表达式对比</span></span><br><span class="line">        <span class="comment">// 1. 静态方法引用</span></span><br><span class="line">        Supplier&lt;Double&gt; random1 = Math::random;           <span class="comment">// 方法引用</span></span><br><span class="line">        Supplier&lt;Double&gt; random2 = () -&gt; Math.random();  <span class="comment">// Lambda表达式</span></span><br><span class="line">        <span class="comment">// 2. 实例方法引用</span></span><br><span class="line">        Function&lt;Student, String&gt; getName1 = Student::getName;           <span class="comment">// 方法引用</span></span><br><span class="line">        Function&lt;Student, String&gt; getName2 = student -&gt; student.getName(); <span class="comment">// Lambda表达式</span></span><br><span class="line">        <span class="comment">// 3. 对象方法引用</span></span><br><span class="line">        Consumer&lt;String&gt; print1 = System.out::println;           <span class="comment">// 方法引用</span></span><br><span class="line">        Consumer&lt;String&gt; print2 = str -&gt; System.out.println(str); <span class="comment">// Lambda表达式</span></span><br><span class="line">        <span class="comment">// 4. 构造方法引用</span></span><br><span class="line">        Supplier&lt;Student&gt; create1 = Student::<span class="keyword">new</span>;           <span class="comment">// 方法引用</span></span><br><span class="line">        Supplier&lt;Student&gt; create2 = () -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>();     <span class="comment">// Lambda表达式        </span></span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(random1.get());</span><br><span class="line">        System.out.println(getName1.apply(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>)));</span><br><span class="line">        print1.accept(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(create1.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>选择建议</strong>：当Lambda表达式只是简单调用一个方法时，使用方法引用更简洁；当需要复杂逻辑时，使用Lambda表达式。</p></blockquote><h1 id="🛠️-Java内置函数式接口"><a href="#🛠️-Java内置函数式接口" class="headerlink" title="🛠️ Java内置函数式接口"></a>🛠️ Java内置函数式接口</h1><h2 id="🎨-自定义函数式接口"><a href="#🎨-自定义函数式接口" class="headerlink" title="🎨 自定义函数式接口"></a>🎨 自定义函数式接口</h2><p>在Java 8之前，我们需要自己定义函数式接口。现在虽然有了内置接口，但了解自定义接口有助于理解函数式编程的本质。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFunctionalInterfaces</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义函数式接口示例</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntPredicate</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IntCalculator</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentExtractor</span>&lt;T&gt; &#123;</span><br><span class="line">        T <span class="title function_">getInfo</span><span class="params">(Student student)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TriFunction</span>&lt;T, U, V, R&gt; &#123;</span><br><span class="line">        R <span class="title function_">apply</span><span class="params">(T t, U u, V v)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IntPredicate</span> <span class="variable">isEven</span> <span class="operator">=</span> a -&gt; (a &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">        <span class="type">IntCalculator</span> <span class="variable">add</span> <span class="operator">=</span> (a, b) -&gt; a + b;</span><br><span class="line">        StudentExtractor&lt;String&gt; getName = Student::getName;</span><br><span class="line">        TriFunction&lt;Integer, Integer, Integer, Integer&gt; addThree = (a, b, c) -&gt; a + b + c;</span><br><span class="line">        </span><br><span class="line">        System.out.println(isEven.test(<span class="number">4</span>));        <span class="comment">// true</span></span><br><span class="line">        System.out.println(add.calculate(<span class="number">3</span>, <span class="number">5</span>));   <span class="comment">// 8</span></span><br><span class="line">        System.out.println(addThree.apply(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🏗️-Java内置函数式接口"><a href="#🏗️-Java内置函数式接口" class="headerlink" title="🏗️ Java内置函数式接口"></a>🏗️ Java内置函数式接口</h2><p>Java 8提供了丰富的内置函数式接口，我们不需要重复造轮子：</p><h3 id="⭐-核心函数式接口"><a href="#⭐-核心函数式接口" class="headerlink" title="⭐ 核心函数式接口"></a>⭐ 核心函数式接口</h3><table><thead><tr><th>接口</th><th>参数</th><th>返回值</th><th>用途</th><th>示例</th></tr></thead><tbody><tr><td><code>Function&lt;T,R&gt;</code></td><td>1个T</td><td>R</td><td>转换</td><td><code>Function&lt;String,Integer&gt; f = Integer::parseInt</code></td></tr><tr><td><code>BiFunction&lt;T,U,R&gt;</code></td><td>2个(T,U)</td><td>R</td><td>二元转换</td><td><code>BiFunction&lt;String,String,Integer&gt; f = (a,b) -&gt; a.length() + b.length()</code></td></tr><tr><td><code>Consumer&lt;T&gt;</code></td><td>1个T</td><td>void</td><td>消费</td><td><code>Consumer&lt;String&gt; c = System.out::println</code></td></tr><tr><td><code>BiConsumer&lt;T,U&gt;</code></td><td>2个(T,U)</td><td>void</td><td>二元消费</td><td><code>BiConsumer&lt;String,Integer&gt; c = (s,i) -&gt; System.out.println(s + i)</code></td></tr><tr><td><code>Predicate&lt;T&gt;</code></td><td>1个T</td><td>boolean</td><td>判断</td><td><code>Predicate&lt;String&gt; p = s -&gt; s.length() &gt; 5</code></td></tr><tr><td><code>BiPredicate&lt;T,U&gt;</code></td><td>2个(T,U)</td><td>boolean</td><td>二元判断</td><td><code>BiPredicate&lt;String,String&gt; p = (a,b) -&gt; a.equals(b)</code></td></tr><tr><td><code>Supplier&lt;T&gt;</code></td><td>无</td><td>T</td><td>提供</td><td><code>Supplier&lt;String&gt; s = () -&gt; &quot;Hello&quot;</code></td></tr></tbody></table><h3 id="🎯-特殊化接口"><a href="#🎯-特殊化接口" class="headerlink" title="🎯 特殊化接口"></a>🎯 特殊化接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuiltInFunctionalInterfaces</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Function系列 - 有参有返回值</span></span><br><span class="line">        Function&lt;String, Integer&gt; stringToInt = Integer::parseInt;</span><br><span class="line">        BiFunction&lt;String, String, Integer&gt; addLengths = (a, b) -&gt; a.length() + b.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. Consumer系列 - 有参无返回值</span></span><br><span class="line">        Consumer&lt;String&gt; printer = System.out::println;</span><br><span class="line">        BiConsumer&lt;String, Integer&gt; printWithNumber = (s, i) -&gt; System.out.println(s + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. Predicate系列 - 有参返回boolean</span></span><br><span class="line">        Predicate&lt;Integer&gt; isEven = n -&gt; n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">        BiPredicate&lt;String, String&gt; isEqual = String::equals;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. Supplier系列 - 无参有返回值</span></span><br><span class="line">        Supplier&lt;String&gt; greeting = () -&gt; <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        Supplier&lt;LocalDateTime&gt; now = LocalDateTime::now;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(stringToInt.apply(<span class="string">&quot;123&quot;</span>));     <span class="comment">// 123</span></span><br><span class="line">        System.out.println(addLengths.apply(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>)); <span class="comment">// 10</span></span><br><span class="line">        printer.accept(<span class="string">&quot;Hello&quot;</span>);                          <span class="comment">// Hello</span></span><br><span class="line">        printWithNumber.accept(<span class="string">&quot;Count&quot;</span>, <span class="number">5</span>);              <span class="comment">// Count: 5</span></span><br><span class="line">        System.out.println(isEven.test(<span class="number">4</span>));               <span class="comment">// true</span></span><br><span class="line">        System.out.println(isEqual.test(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(greeting.get());               <span class="comment">// Hello World</span></span><br><span class="line">        System.out.println(now.get());                   <span class="comment">// 当前时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🚀-原始类型特化接口"><a href="#🚀-原始类型特化接口" class="headerlink" title="🚀 原始类型特化接口"></a>🚀 原始类型特化接口</h3><p>Java还提供了原始类型的特化接口，避免装箱拆箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IntFunction, LongFunction, DoubleFunction</span></span><br><span class="line">IntFunction&lt;String&gt; intToString = String::valueOf;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntConsumer, LongConsumer, DoubleConsumer  </span></span><br><span class="line"><span class="type">IntConsumer</span> <span class="variable">intPrinter</span> <span class="operator">=</span> System.out::println;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntPredicate, LongPredicate, DoublePredicate</span></span><br><span class="line"><span class="type">IntPredicate</span> <span class="variable">isPositive</span> <span class="operator">=</span> n -&gt; n &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IntSupplier, LongSupplier, DoubleSupplier</span></span><br><span class="line"><span class="type">IntSupplier</span> <span class="variable">randomInt</span> <span class="operator">=</span> () -&gt; <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="🎪-实际应用示例"><a href="#🎪-实际应用示例" class="headerlink" title="🎪 实际应用示例"></a>🎪 实际应用示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionalInterfaceExamples</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String sex;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String sex)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Student&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Predicate - 条件判断</span></span><br><span class="line">        Predicate&lt;Integer&gt; isEven = a -&gt; (a &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">        Predicate&lt;Integer&gt; isPrime = a -&gt; BigDecimal.valueOf(a).toBigInteger().isProbablePrime(<span class="number">100</span>);</span><br><span class="line">        Predicate&lt;Student&gt; isAdult = student -&gt; student.getAge() &gt; <span class="number">18</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. Function - 数据转换</span></span><br><span class="line">        Function&lt;Student, String&gt; getName = Student::getName;</span><br><span class="line">        Function&lt;Student, Integer&gt; getAge = Student::getAge;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. BiFunction - 二元操作</span></span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; add = Integer::sum;</span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; subtract = (a, b) -&gt; a - b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. TriFunction - 三元操作（自定义）</span></span><br><span class="line">        TriFunction&lt;Integer, Integer, Integer, Integer&gt; addThree = (a, b, c) -&gt; a + b + c;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. Supplier - 数据提供</span></span><br><span class="line">        Supplier&lt;Student&gt; studentSupplier = () -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        Supplier&lt;List&lt;Student&gt;&gt; studentListSupplier = () -&gt; &#123;</span><br><span class="line">            List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">            students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">            students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">16</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> students;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;偶数判断: &quot;</span> + isEven.test(<span class="number">4</span>));           <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;素数判断: &quot;</span> + isPrime.test(<span class="number">17</span>));         <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加法运算: &quot;</span> + add.apply(<span class="number">3</span>, <span class="number">5</span>));         <span class="comment">// 8</span></span><br><span class="line">        System.out.println(<span class="string">&quot;减法运算: &quot;</span> + subtract.apply(<span class="number">10</span>, <span class="number">3</span>));   <span class="comment">// 7</span></span><br><span class="line">        System.out.println(<span class="string">&quot;三元加法: &quot;</span> + addThree.apply(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentSupplier.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;学生信息: &quot;</span> + student);</span><br><span class="line">        System.out.println(<span class="string">&quot;学生姓名: &quot;</span> + getName.apply(student));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否成年: &quot;</span> + isAdult.test(student));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 高阶函数示例</span></span><br><span class="line">        List&lt;Student&gt; students = studentListSupplier.get();</span><br><span class="line">        students.stream()</span><br><span class="line">                .filter(isAdult)</span><br><span class="line">                .map(getName)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 高阶函数：接受函数作为参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPredicate</span><span class="params">(Student student, Predicate&lt;Student&gt; predicate)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(student)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;条件满足: &quot;</span> + student);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;条件不满足: &quot;</span> + student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 🔍 方法引用详解</span><br><span class="line"></span><br><span class="line">方法引用是Lambda表达式的简化形式，当Lambda表达式只是调用一个已存在的方法时，可以使用方法引用。</span><br><span class="line">## 🎭 六种方法引用类型</span><br><span class="line"></span><br><span class="line">### 1️⃣ 类名::静态方法</span><br><span class="line">调用类的静态方法，参数类型和数量必须匹配。</span><br><span class="line">```java</span><br><span class="line">public class StaticMethodReference &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // Math类的静态方法</span><br><span class="line">        Function&lt;Double, Double&gt; abs = Math::abs;</span><br><span class="line">        BiFunction&lt;Integer, Integer, Integer&gt; max = Math::max;</span><br><span class="line">        </span><br><span class="line">        // 自定义静态方法</span><br><span class="line">        Function&lt;String, String&gt; toUpperCase = StringUtils::toUpperCase;</span><br><span class="line">        </span><br><span class="line">        System.out.println(abs.apply(-5.5));        // 5.5</span><br><span class="line">        System.out.println(max.apply(10, 20));      // 20</span><br><span class="line">        System.out.println(toUpperCase.apply(&quot;hello&quot;)); // HELLO</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static class StringUtils &#123;</span><br><span class="line">        public static String toUpperCase(String str) &#123;</span><br><span class="line">            return str.toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2️⃣-类名-实例方法"><a href="#2️⃣-类名-实例方法" class="headerlink" title="2️⃣ 类名::实例方法"></a>2️⃣ 类名::实例方法</h3><p>调用实例方法，第一个参数作为方法调用的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceMethodReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// String的实例方法</span></span><br><span class="line">        Function&lt;String, Integer&gt; getLength = String::length;</span><br><span class="line">        BiFunction&lt;String, String, String&gt; concat = String::concat;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自定义类的实例方法</span></span><br><span class="line">        Function&lt;Student, String&gt; getName = Student::getName;</span><br><span class="line">        </span><br><span class="line">        System.out.println(getLength.apply(<span class="string">&quot;Hello&quot;</span>));           <span class="comment">// 5</span></span><br><span class="line">        System.out.println(concat.apply(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>));     <span class="comment">// HelloWorld</span></span><br><span class="line">        System.out.println(getName.apply(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>))); <span class="comment">// 张三</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3️⃣-对象-实例方法"><a href="#3️⃣-对象-实例方法" class="headerlink" title="3️⃣ 对象::实例方法"></a>3️⃣ 对象::实例方法</h3><p>调用特定对象的实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectMethodReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// System.out的实例方法</span></span><br><span class="line">        Consumer&lt;String&gt; printer = System.out::println;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自定义对象的实例方法</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Consumer&lt;String&gt; append = sb::append;</span><br><span class="line">        </span><br><span class="line">        printer.accept(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// Hello World</span></span><br><span class="line">        append.accept(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        append.accept(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        append.accept(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString()); <span class="comment">// Hello World</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4️⃣-类名-new-构造方法引用"><a href="#4️⃣-类名-new-构造方法引用" class="headerlink" title="4️⃣ 类名::new (构造方法引用)"></a>4️⃣ 类名::new (构造方法引用)</h3><p>调用构造方法创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 无参构造方法</span></span><br><span class="line">        Supplier&lt;Person&gt; createDefault = Person::<span class="keyword">new</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单参构造方法</span></span><br><span class="line">        Function&lt;String, Person&gt; createWithName = Person::<span class="keyword">new</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 双参构造方法</span></span><br><span class="line">        BiFunction&lt;String, Integer, Person&gt; createWithNameAndAge = Person::<span class="keyword">new</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(createDefault.get());                           <span class="comment">// Person&#123;name=&#x27;Unknown&#x27;, age=0&#125;</span></span><br><span class="line">        System.out.println(createWithName.apply(<span class="string">&quot;张三&quot;</span>));                 <span class="comment">// Person&#123;name=&#x27;张三&#x27;, age=0&#125;</span></span><br><span class="line">        System.out.println(createWithNameAndAge.apply(<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>));        <span class="comment">// Person&#123;name=&#x27;李四&#x27;, age=25&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5️⃣-this-实例方法"><a href="#5️⃣-this-实例方法" class="headerlink" title="5️⃣ this::实例方法"></a>5️⃣ this::实例方法</h3><p>在类内部引用当前对象的实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisMethodReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processStudents</span><span class="params">(List&lt;Student&gt; students)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用this::isAdult作为过滤器</span></span><br><span class="line">        students.stream()</span><br><span class="line">                .filter(<span class="built_in">this</span>::isAdult)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isAdult</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> student.getAge() &gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThisMethodReference</span> <span class="variable">processor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThisMethodReference</span>();</span><br><span class="line">        List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">16</span>, <span class="string">&quot;女&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        processor.processStudents(students);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6️⃣-super-实例方法"><a href="#6️⃣-super-实例方法" class="headerlink" title="6️⃣ super::实例方法"></a>6️⃣ super::实例方法</h3><p>在子类中引用父类的实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMethodReference</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Parent: &quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Child: &quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">(List&lt;String&gt; data)</span> &#123;</span><br><span class="line">            <span class="comment">// 使用super::printInfo调用父类方法</span></span><br><span class="line">            data.forEach(<span class="built_in">super</span>::printInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Child</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        List&lt;String&gt; data = Arrays.asList(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        child.processData(data);</span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">// Parent: Hello</span></span><br><span class="line">        <span class="comment">// Parent: World  </span></span><br><span class="line">        <span class="comment">// Parent: Java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📖-方法引用选择指南"><a href="#📖-方法引用选择指南" class="headerlink" title="📖 方法引用选择指南"></a>📖 方法引用选择指南</h2><table><thead><tr><th>场景</th><th>方法引用类型</th><th>示例</th></tr></thead><tbody><tr><td>调用静态方法</td><td><code>类名::静态方法</code></td><td><code>Math::max</code></td></tr><tr><td>调用实例方法</td><td><code>类名::实例方法</code></td><td><code>String::length</code></td></tr><tr><td>调用对象方法</td><td><code>对象::实例方法</code></td><td><code>System.out::println</code></td></tr><tr><td>创建对象</td><td><code>类名::new</code></td><td><code>ArrayList::new</code></td></tr><tr><td>类内部引用</td><td><code>this::方法</code></td><td><code>this::isValid</code></td></tr><tr><td>子类引用父类</td><td><code>super::方法</code></td><td><code>super::toString</code></td></tr></tbody></table><blockquote><p>💡 <strong>最佳实践</strong>：优先使用方法引用，它比Lambda表达式更简洁，意图更明确。</p></blockquote><h1 id="🔐-闭包与柯里化"><a href="#🔐-闭包与柯里化" class="headerlink" title="🔐 闭包与柯里化"></a>🔐 闭包与柯里化</h1><h2 id="🎪-闭包（Closure）"><a href="#🎪-闭包（Closure）" class="headerlink" title="🎪 闭包（Closure）"></a>🎪 闭包（Closure）</h2><p>闭包是指<strong>函数对象</strong>与<strong>外部变量</strong>绑定在一起形成的整体。在Java中，Lambda表达式可以捕获外部作用域的变量。</p><h3 id="🧩-闭包的基本概念"><a href="#🧩-闭包的基本概念" class="headerlink" title="🧩 闭包的基本概念"></a>🧩 闭包的基本概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 外部变量</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Lambda表达式捕获了外部变量x，形成闭包</span></span><br><span class="line">        Function&lt;Integer, Integer&gt; addX = y -&gt; x + y;</span><br><span class="line">        </span><br><span class="line">        System.out.println(addX.apply(<span class="number">5</span>)); <span class="comment">// 输出: 15</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⚠️-闭包的限制"><a href="#⚠️-闭包的限制" class="headerlink" title="⚠️ 闭包的限制"></a>⚠️ 闭包的限制</h3><p>Java中的闭包变量必须是<strong>final</strong>或<strong>effectively final</strong>的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureLimitations</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 显式final</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        Function&lt;Integer, Integer&gt; addA = y -&gt; a + y;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. effectively final（没有重新赋值）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        Function&lt;Integer, Integer&gt; addB = y -&gt; b + y;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 错误示例：不是effectively final</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="comment">// c = 40; // 如果取消注释，下面的代码会编译错误</span></span><br><span class="line">        <span class="comment">// Function&lt;Integer, Integer&gt; addC = y -&gt; c + y; // 编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎯-闭包的实际应用"><a href="#🎯-闭包的实际应用" class="headerlink" title="🎯 闭包的实际应用"></a>🎯 闭包的实际应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureApplications</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建多个任务，每个任务有不同的编号</span></span><br><span class="line">        List&lt;Runnable&gt; tasks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">taskId</span> <span class="operator">=</span> i + <span class="number">1</span>; <span class="comment">// 每次循环创建新的变量</span></span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; System.out.println(</span><br><span class="line">                Thread.currentThread().getName() + <span class="string">&quot;: 执行任务&quot;</span> + taskId</span><br><span class="line">            );</span><br><span class="line">            tasks.add(task);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用虚拟线程执行任务</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class="line">        <span class="keyword">for</span> (Runnable task : tasks) &#123;</span><br><span class="line">            executor.submit(task);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🏗️-闭包与对象状态"><a href="#🏗️-闭包与对象状态" class="headerlink" title="🏗️ 闭包与对象状态"></a>🏗️ 闭包与对象状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosureWithObjects</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Counter</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counter</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Lambda表达式捕获了counter对象引用</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">incrementTask</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            counter.increment();</span><br><span class="line">            System.out.println(<span class="string">&quot;当前计数: &quot;</span> + counter.getCount());</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行多次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            incrementTask.run();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">// 当前计数: 1</span></span><br><span class="line">        <span class="comment">// 当前计数: 2</span></span><br><span class="line">        <span class="comment">// 当前计数: 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🍛-柯里化（Currying）"><a href="#🍛-柯里化（Currying）" class="headerlink" title="🍛 柯里化（Currying）"></a>🍛 柯里化（Currying）</h2><p>柯里化是将接受多个参数的函数转换为一系列只接受一个参数的函数的技术。</p><h3 id="🔧-柯里化的基本概念"><a href="#🔧-柯里化的基本概念" class="headerlink" title="🔧 柯里化的基本概念"></a>🔧 柯里化的基本概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurryingExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 传统方式：接受两个参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 柯里化方式：返回一个函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Function&lt;Integer, Integer&gt; <span class="title function_">addCurried</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b -&gt; a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 传统调用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> add(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 8</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 柯里化调用</span></span><br><span class="line">        Function&lt;Integer, Integer&gt; add3 = addCurried(<span class="number">3</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> add3.apply(<span class="number">5</span>); <span class="comment">// 8</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;传统方式: &quot;</span> + result1);</span><br><span class="line">        System.out.println(<span class="string">&quot;柯里化方式: &quot;</span> + result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🚀-柯里化的高级应用"><a href="#🚀-柯里化的高级应用" class="headerlink" title="🚀 柯里化的高级应用"></a>🚀 柯里化的高级应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvancedCurrying</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义柯里化接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CurriedFunction</span>&lt;T, U, R&gt; &#123;</span><br><span class="line">        Function&lt;U, R&gt; <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 三元函数的柯里化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CurriedFunction&lt;Integer, Integer, Function&lt;Integer, Integer&gt;&gt; </span><br><span class="line">        <span class="title function_">addThreeCurried</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a -&gt; b -&gt; c -&gt; a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建柯里化函数</span></span><br><span class="line">        CurriedFunction&lt;Integer, Integer, Function&lt;Integer, Integer&gt;&gt; curriedAdd = </span><br><span class="line">            addThreeCurried();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分步应用参数</span></span><br><span class="line">        Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; add5 = curriedAdd.apply(<span class="number">5</span>);</span><br><span class="line">        Function&lt;Integer, Integer&gt; add5And3 = add5.apply(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> add5And3.apply(<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;结果: &quot;</span> + result); <span class="comment">// 10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 链式调用</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result2</span> <span class="operator">=</span> curriedAdd.apply(<span class="number">1</span>).apply(<span class="number">2</span>).apply(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;链式结果: &quot;</span> + result2); <span class="comment">// 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🎪-柯里化的实际应用场景"><a href="#🎪-柯里化的实际应用场景" class="headerlink" title="🎪 柯里化的实际应用场景"></a>🎪 柯里化的实际应用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurryingApplications</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置函数：先设置配置，再处理数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Function&lt;String, String&gt; <span class="title function_">createFormatter</span><span class="params">(String prefix, String suffix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data -&gt; prefix + data + suffix;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证函数：先设置规则，再验证数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Predicate&lt;String&gt; <span class="title function_">createValidator</span><span class="params">(<span class="type">int</span> minLength, <span class="type">int</span> maxLength)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str -&gt; str.length() &gt;= minLength &amp;&amp; str.length() &lt;= maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建格式化器</span></span><br><span class="line">        Function&lt;String, String&gt; formatter = createFormatter(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(formatter.apply(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// [Hello]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建验证器</span></span><br><span class="line">        Predicate&lt;String&gt; validator = createValidator(<span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(validator.test(<span class="string">&quot;Hi&quot;</span>));     <span class="comment">// false</span></span><br><span class="line">        System.out.println(validator.test(<span class="string">&quot;Hello&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(validator.test(<span class="string">&quot;VeryLongString&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在Stream中使用</span></span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        words.stream()</span><br><span class="line">              .filter(validator)</span><br><span class="line">              .map(formatter)</span><br><span class="line">              .forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 输出:</span></span><br><span class="line">        <span class="comment">// [Hello]</span></span><br><span class="line">        <span class="comment">// [World]</span></span><br><span class="line">        <span class="comment">// [Java]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="✨-闭包与柯里化的优势"><a href="#✨-闭包与柯里化的优势" class="headerlink" title="✨ 闭包与柯里化的优势"></a>✨ 闭包与柯里化的优势</h2><h3 id="1️⃣-部分应用（Partial-Application）-java"><a href="#1️⃣-部分应用（Partial-Application）-java" class="headerlink" title="1️⃣ 部分应用（Partial Application）&#96;&#96;&#96;java"></a>1️⃣ 部分应用（Partial Application）&#96;&#96;&#96;java</h3><p>&#x2F;&#x2F; 先固定部分参数，后续再提供其他参数<br>Function&lt;Integer, Integer&gt; add5 &#x3D; addCurried(5);<br>int result &#x3D; add5.apply(3); &#x2F;&#x2F; 8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2️⃣ 函数组合</span><br><span class="line">```java</span><br><span class="line">// 便于创建可复用的函数</span><br><span class="line">Function&lt;Integer, Integer&gt; multiplyBy2 = x -&gt; x * 2;</span><br><span class="line">Function&lt;Integer, Integer&gt; add5AndMultiplyBy2 = addCurried(5).andThen(multiplyBy2);</span><br></pre></td></tr></table></figure><h3 id="3️⃣-延迟计算"><a href="#3️⃣-延迟计算" class="headerlink" title="3️⃣ 延迟计算"></a>3️⃣ 延迟计算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以在需要时才计算最终结果</span></span><br><span class="line">Supplier&lt;Integer&gt; lazyCalculation = () -&gt; addCurried(<span class="number">10</span>).apply(<span class="number">20</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> lazyCalculation.get(); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>总结</strong>：闭包让函数可以携带外部状态，柯里化让函数可以分步执行，两者都是函数式编程的重要特性。</p></blockquote><h1 id="🌊-Stream-API详解"><a href="#🌊-Stream-API详解" class="headerlink" title="🌊 Stream API详解"></a>🌊 Stream API详解</h1><p>Stream API是Java 8引入的函数式编程核心，它提供了一种声明式的方式来处理数据集合。</p><blockquote><p>📋 <strong>Stream API速查表</strong>：为了方便查阅，我为您准备了一个详细的Stream API速查表，包含了所有常用操作的语法和说明：<a href="/stream.html">点击查看Stream API速查表</a></p></blockquote><h2 id="🌊-Stream基础概念"><a href="#🌊-Stream基础概念" class="headerlink" title="🌊 Stream基础概念"></a>🌊 Stream基础概念</h2><p>Stream是一个数据流，它支持顺序和并行聚合操作。Stream不是数据结构，而是对数据源的抽象。</p><h3 id="⚡-Stream的特性"><a href="#⚡-Stream的特性" class="headerlink" title="⚡ Stream的特性"></a>⚡ Stream的特性</h3><ol><li><strong>惰性求值</strong>：中间操作不会立即执行</li><li><strong>一次使用</strong>：Stream只能被消费一次</li><li><strong>函数式风格</strong>：支持链式调用</li><li><strong>并行处理</strong>：支持并行流</li></ol><h2 id="🎯-Stream操作分类"><a href="#🎯-Stream操作分类" class="headerlink" title="🎯 Stream操作分类"></a>🎯 Stream操作分类</h2><blockquote><p>💡 <strong>提示</strong>：如果您需要快速查阅Stream API的所有操作方法，可以参考我们的<a href="/stream.html">Stream API速查表</a>，它包含了完整的操作分类和语法说明。</p></blockquote><h3 id="1️⃣-创建Stream"><a href="#1️⃣-创建Stream" class="headerlink" title="1️⃣ 创建Stream"></a>1️⃣ 创建Stream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCreation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 从集合创建</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 从数组创建</span></span><br><span class="line">        String[] array = &#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream2 = Arrays.stream(array);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 直接创建</span></span><br><span class="line">        Stream&lt;String&gt; stream3 = Stream.of(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 创建空流</span></span><br><span class="line">        Stream&lt;String&gt; emptyStream = Stream.empty();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 创建无限流</span></span><br><span class="line">        Stream&lt;Integer&gt; infiniteStream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 生成流</span></span><br><span class="line">        Stream&lt;Double&gt; randomStream = Stream.generate(Math::random);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 7. 并行流</span></span><br><span class="line">        Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2️⃣-中间操作（Intermediate-Operations）"><a href="#2️⃣-中间操作（Intermediate-Operations）" class="headerlink" title="2️⃣ 中间操作（Intermediate Operations）"></a>2️⃣ 中间操作（Intermediate Operations）</h3><p>中间操作返回新的Stream，支持链式调用。</p><h4 id="🔍-过滤（Filter）"><a href="#🔍-过滤（Filter）" class="headerlink" title="🔍 过滤（Filter）"></a>🔍 过滤（Filter）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamFilter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 过滤偶数</span></span><br><span class="line">        List&lt;Integer&gt; evenNumbers = numbers.stream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;偶数: &quot;</span> + evenNumbers); <span class="comment">// [2, 4, 6, 8, 10]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 过滤大于5的数</span></span><br><span class="line">        List&lt;Integer&gt; greaterThan5 = numbers.stream()</span><br><span class="line">                .filter(n -&gt; n &gt; <span class="number">5</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;大于5的数: &quot;</span> + greaterThan5); <span class="comment">// [6, 7, 8, 9, 10]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 组合条件</span></span><br><span class="line">        List&lt;Integer&gt; result = numbers.stream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .filter(n -&gt; n &gt; <span class="number">5</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;偶数且大于5: &quot;</span> + result); <span class="comment">// [6, 8, 10]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🗺️-映射（Map）"><a href="#🗺️-映射（Map）" class="headerlink" title="🗺️ 映射（Map）"></a>🗺️ 映射（Map）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamMap</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;stream&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 转换为大写</span></span><br><span class="line">        List&lt;String&gt; upperCase = words.stream()</span><br><span class="line">                .map(String::toUpperCase)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;大写: &quot;</span> + upperCase); <span class="comment">// [HELLO, WORLD, JAVA, STREAM]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取长度</span></span><br><span class="line">        List&lt;Integer&gt; lengths = words.stream()</span><br><span class="line">                .map(String::length)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;长度: &quot;</span> + lengths); <span class="comment">// [5, 5, 4, 6]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 复杂映射</span></span><br><span class="line">        List&lt;String&gt; result = words.stream()</span><br><span class="line">                .map(s -&gt; s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + s.substring(<span class="number">1</span>))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;首字母大写: &quot;</span> + result); <span class="comment">// [Hello, World, Java, Stream]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="📦-扁平化（FlatMap）"><a href="#📦-扁平化（FlatMap）" class="headerlink" title="📦 扁平化（FlatMap）"></a>📦 扁平化（FlatMap）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamFlatMap</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; nestedList = Arrays.asList(</span><br><span class="line">                Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>),</span><br><span class="line">                Arrays.asList(<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>),</span><br><span class="line">                Arrays.asList(<span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 扁平化</span></span><br><span class="line">        List&lt;String&gt; flattened = nestedList.stream()</span><br><span class="line">                .flatMap(List::stream)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;扁平化结果: &quot;</span> + flattened); <span class="comment">// [a, b, c, d, e, f, g, h, i]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符串分割示例</span></span><br><span class="line">        List&lt;String&gt; sentences = Arrays.asList(<span class="string">&quot;Hello World&quot;</span>, <span class="string">&quot;Java Stream&quot;</span>, <span class="string">&quot;Functional Programming&quot;</span>);</span><br><span class="line">        List&lt;String&gt; words = sentences.stream()</span><br><span class="line">                .flatMap(sentence -&gt; Arrays.stream(sentence.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;所有单词: &quot;</span> + words); <span class="comment">// [Hello, World, Java, Stream, Functional, Programming]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3️⃣-终结操作（Terminal-Operations）"><a href="#3️⃣-终结操作（Terminal-Operations）" class="headerlink" title="3️⃣ 终结操作（Terminal Operations）"></a>3️⃣ 终结操作（Terminal Operations）</h3><p>终结操作会触发Stream的执行，返回具体的结果。</p><h4 id="📥-收集（Collect）"><a href="#📥-收集（Collect）" class="headerlink" title="📥 收集（Collect）"></a>📥 收集（Collect）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamCollect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;elderberry&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集到List</span></span><br><span class="line">        List&lt;String&gt; longWords = words.stream()</span><br><span class="line">                .filter(s -&gt; s.length() &gt; <span class="number">5</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集到Set</span></span><br><span class="line">        Set&lt;String&gt; uniqueWords = words.stream()</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集到Map</span></span><br><span class="line">        Map&lt;String, Integer&gt; wordLengthMap = words.stream()</span><br><span class="line">                .collect(Collectors.toMap(</span><br><span class="line">                        Function.identity(),</span><br><span class="line">                        String::length</span><br><span class="line">                ));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集到字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">joined</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;, &quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;长单词: &quot;</span> + longWords);</span><br><span class="line">        System.out.println(<span class="string">&quot;唯一单词: &quot;</span> + uniqueWords);</span><br><span class="line">        System.out.println(<span class="string">&quot;单词长度映射: &quot;</span> + wordLengthMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;连接字符串: &quot;</span> + joined);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🔄-归约（Reduce）"><a href="#🔄-归约（Reduce）" class="headerlink" title="🔄 归约（Reduce）"></a>🔄 归约（Reduce）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamReduce</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求最大值</span></span><br><span class="line">        Optional&lt;Integer&gt; max = numbers.stream()</span><br><span class="line">                .reduce(Integer::max);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 求最小值</span></span><br><span class="line">        Optional&lt;Integer&gt; min = numbers.stream()</span><br><span class="line">                .reduce(Integer::min);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符串连接</span></span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> words.stream()</span><br><span class="line">                .reduce(<span class="string">&quot;&quot;</span>, (a, b) -&gt; a + <span class="string">&quot; &quot;</span> + b);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;求和: &quot;</span> + sum);           <span class="comment">// 15</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值: &quot;</span> + max.get());   <span class="comment">// 5</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小值: &quot;</span> + min.get());   <span class="comment">// 1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;连接: &quot;</span> + result.trim()); <span class="comment">// Hello World Java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="🎓-Stream实际应用示例"><a href="#🎓-Stream实际应用示例" class="headerlink" title="🎓 Stream实际应用示例"></a>🎓 Stream实际应用示例</h2><h3 id="📊-学生成绩处理"><a href="#📊-学生成绩处理" class="headerlink" title="📊 学生成绩处理"></a>📊 学生成绩处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentGradeProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> List&lt;Integer&gt; grades;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, List&lt;Integer&gt; grades)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.grades = grades;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">        <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getGrades</span><span class="params">()</span> &#123; <span class="keyword">return</span> grades; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAverageGrade</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> grades.stream()</span><br><span class="line">                    .mapToInt(Integer::intValue)</span><br><span class="line">                    .average()</span><br><span class="line">                    .orElse(<span class="number">0.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;Student&#123;name=&#x27;%s&#x27;, age=%d, avgGrade=%.2f&#125;&quot;</span>, </span><br><span class="line">                    name, age, getAverageGrade());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, Arrays.asList(<span class="number">85</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">92</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">19</span>, Arrays.asList(<span class="number">76</span>, <span class="number">88</span>, <span class="number">82</span>, <span class="number">90</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">21</span>, Arrays.asList(<span class="number">92</span>, <span class="number">95</span>, <span class="number">88</span>, <span class="number">94</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">20</span>, Arrays.asList(<span class="number">68</span>, <span class="number">75</span>, <span class="number">72</span>, <span class="number">80</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;钱七&quot;</span>, <span class="number">22</span>, Arrays.asList(<span class="number">88</span>, <span class="number">92</span>, <span class="number">85</span>, <span class="number">90</span>))</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 找出平均分大于85的学生</span></span><br><span class="line">        List&lt;Student&gt; excellentStudents = students.stream()</span><br><span class="line">                .filter(s -&gt; s.getAverageGrade() &gt; <span class="number">85</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;优秀学生:&quot;</span>);</span><br><span class="line">        excellentStudents.forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 按年龄分组</span></span><br><span class="line">        Map&lt;Integer, List&lt;Student&gt;&gt; studentsByAge = students.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n按年龄分组:&quot;</span>);</span><br><span class="line">        studentsByAge.forEach((age, studentList) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄 &quot;</span> + age + <span class="string">&quot;: &quot;</span> + studentList.size() + <span class="string">&quot; 人&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 计算每个年龄段的平均分</span></span><br><span class="line">        Map&lt;Integer, Double&gt; averageByAge = students.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(</span><br><span class="line">                        Student::getAge,</span><br><span class="line">                        Collectors.averagingDouble(Student::getAverageGrade)</span><br><span class="line">                ));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n各年龄段平均分:&quot;</span>);</span><br><span class="line">        averageByAge.forEach((age, avg) -&gt; </span><br><span class="line">                System.out.printf(<span class="string">&quot;年龄 %d: %.2f%n&quot;</span>, age, avg));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 找出最高分的学生</span></span><br><span class="line">        Optional&lt;Student&gt; topStudent = students.stream()</span><br><span class="line">                .max(Comparator.comparing(Student::getAverageGrade));</span><br><span class="line">        </span><br><span class="line">        topStudent.ifPresent(s -&gt; System.out.println(<span class="string">&quot;\n最高分学生: &quot;</span> + s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="⚡-Stream性能优化"><a href="#⚡-Stream性能优化" class="headerlink" title="⚡ Stream性能优化"></a>⚡ Stream性能优化</h2><blockquote><p>🔧 <strong>性能优化参考</strong>：更多Stream性能优化技巧和最佳实践，请参考<a href="/stream.html">Stream API速查表</a>中的性能优化部分。</p></blockquote><h3 id="1️⃣-使用原始类型流"><a href="#1️⃣-使用原始类型流" class="headerlink" title="1️⃣ 使用原始类型流"></a>1️⃣ 使用原始类型流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamPerformance</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">                .boxed()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用IntStream（推荐）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .mapToInt(Integer::intValue)</span><br><span class="line">                .sum();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用Stream&lt;Integer&gt;（较慢）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;IntStream耗时: &quot;</span> + (end1 - start1) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Stream&lt;Integer&gt;耗时: &quot;</span> + (end2 - start2) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2️⃣-并行流的使用"><a href="#2️⃣-并行流的使用" class="headerlink" title="2️⃣ 并行流的使用"></a>2️⃣ 并行流的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParallelStreamExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10000000</span>)</span><br><span class="line">                .boxed()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 串行流</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">count1</span> <span class="operator">=</span> numbers.stream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .count();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 并行流</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">count2</span> <span class="operator">=</span> numbers.parallelStream()</span><br><span class="line">                .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .count();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;串行流结果: &quot;</span> + count1 + <span class="string">&quot;, 耗时: &quot;</span> + (end1 - start1) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;并行流结果: &quot;</span> + count2 + <span class="string">&quot;, 耗时: &quot;</span> + (end2 - start2) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>Stream最佳实践</strong>：</p><ol><li>优先使用原始类型流（IntStream, LongStream, DoubleStream）</li><li>大数据量时考虑并行流</li><li>避免在Stream中进行复杂计算</li><li>合理使用中间操作，避免不必要的操作</li></ol></blockquote><h1 id="🎉-总结与最佳实践"><a href="#🎉-总结与最佳实践" class="headerlink" title="🎉 总结与最佳实践"></a>🎉 总结与最佳实践</h1><h2 id="🔄-函数式编程核心概念回顾"><a href="#🔄-函数式编程核心概念回顾" class="headerlink" title="🔄 函数式编程核心概念回顾"></a>🔄 函数式编程核心概念回顾</h2><p>通过本文的学习，我们深入了解了Java函数式编程的核心概念。</p><h3 id="1️⃣-函数式编程基础"><a href="#1️⃣-函数式编程基础" class="headerlink" title="1️⃣ 函数式编程基础"></a>1️⃣ 函数式编程基础</h3><ul><li><strong>函数即规则</strong>：确定性、无副作用、不变性</li><li><strong>Lambda表达式</strong>：简洁的函数表示法</li><li><strong>函数式接口</strong>：只包含一个抽象方法的接口</li></ul><h3 id="2️⃣-核心特性"><a href="#2️⃣-核心特性" class="headerlink" title="2️⃣ 核心特性"></a>2️⃣ 核心特性</h3><ul><li><strong>闭包</strong>：函数对象与外部变量的绑定</li><li><strong>柯里化</strong>：多参数函数的分步执行</li><li><strong>方法引用</strong>：Lambda表达式的简化形式</li><li><strong>Stream API</strong>：声明式数据处理</li></ul><h2 id="🚀-性能优化建议"><a href="#🚀-性能优化建议" class="headerlink" title="🚀 性能优化建议"></a>🚀 性能优化建议</h2><h3 id="1️⃣-选择合适的函数式接口-java"><a href="#1️⃣-选择合适的函数式接口-java" class="headerlink" title="1️⃣ 选择合适的函数式接口&#96;&#96;&#96;java"></a>1️⃣ 选择合适的函数式接口&#96;&#96;&#96;java</h3><p>&#x2F;&#x2F; 推荐：使用内置接口<br>Predicate<String> isLong &#x3D; s -&gt; s.length() &gt; 5;<br>Function&lt;String, Integer&gt; getLength &#x3D; String::length;</p><p>&#x2F;&#x2F; 避免：重复定义相似接口<br>@FunctionalInterface<br>public interface StringPredicate {<br>    boolean test(String s);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2️⃣ Stream性能优化</span><br><span class="line">```java</span><br><span class="line">// 推荐：使用原始类型流</span><br><span class="line">IntStream.rangeClosed(1, 1000000)</span><br><span class="line">    .filter(n -&gt; n % 2 == 0)</span><br><span class="line">    .sum();</span><br><span class="line"></span><br><span class="line">// 避免：不必要的装箱拆箱</span><br><span class="line">Stream&lt;Integer&gt; boxedStream = IntStream.rangeClosed(1, 1000000)</span><br><span class="line">    .boxed()</span><br><span class="line">    .filter(n -&gt; n % 2 == 0)</span><br><span class="line">    .mapToInt(Integer::intValue)</span><br><span class="line">    .sum();</span><br></pre></td></tr></table></figure><h3 id="3️⃣-并行流使用原则-java"><a href="#3️⃣-并行流使用原则-java" class="headerlink" title="3️⃣ 并行流使用原则&#96;&#96;&#96;java"></a>3️⃣ 并行流使用原则&#96;&#96;&#96;java</h3><p>&#x2F;&#x2F; 大数据量时使用并行流<br>List<Integer> largeList &#x3D; IntStream.rangeClosed(1, 10000000)<br>    .boxed()<br>    .collect(Collectors.toList());</p><p>&#x2F;&#x2F; 数据量小时使用串行流<br>List<Integer> smallList &#x3D; Arrays.asList(1, 2, 3, 4, 5);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 🎯 实际应用场景</span><br><span class="line"></span><br><span class="line">### 1️⃣ 数据处理</span><br><span class="line">```java</span><br><span class="line">// 学生成绩统计</span><br><span class="line">students.stream()</span><br><span class="line">    .filter(s -&gt; s.getAverageGrade() &gt; 85)</span><br><span class="line">    .collect(Collectors.groupingBy(Student::getAge))</span><br><span class="line">    .forEach((age, list) -&gt; System.out.println(&quot;年龄&quot; + age + &quot;: &quot; + list.size() + &quot;人&quot;));</span><br></pre></td></tr></table></figure><h3 id="2️⃣-异步编程"><a href="#2️⃣-异步编程" class="headerlink" title="2️⃣ 异步编程"></a>2️⃣ 异步编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步任务处理</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; fetchData())</span><br><span class="line">    .thenApply(<span class="built_in">this</span>::processData)</span><br><span class="line">    .thenAccept(<span class="built_in">this</span>::saveResult)</span><br><span class="line">    .exceptionally(<span class="built_in">this</span>::handleError);</span><br></pre></td></tr></table></figure><h3 id="3️⃣-配置管理"><a href="#3️⃣-配置管理" class="headerlink" title="3️⃣ 配置管理"></a>3️⃣ 配置管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置验证</span></span><br><span class="line">Predicate&lt;String&gt; isValidConfig = config -&gt; </span><br><span class="line">    config != <span class="literal">null</span> &amp;&amp; !config.trim().isEmpty() &amp;&amp; config.length() &gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">Optional&lt;String&gt; validConfig = Optional.ofNullable(inputConfig)</span><br><span class="line">    .filter(isValidConfig)</span><br><span class="line">    .map(String::trim);</span><br></pre></td></tr></table></figure><h2 id="⚠️-常见陷阱与避免方法"><a href="#⚠️-常见陷阱与避免方法" class="headerlink" title="⚠️ 常见陷阱与避免方法"></a>⚠️ 常见陷阱与避免方法</h2><h3 id="1️⃣-闭包变量修改"><a href="#1️⃣-闭包变量修改" class="headerlink" title="1️⃣ 闭包变量修改"></a>1️⃣ 闭包变量修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：修改闭包变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).forEach(n -&gt; counter++); <span class="comment">// 编译错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：使用原子类或数组</span></span><br><span class="line"><span class="type">AtomicInteger</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).forEach(n -&gt; counter.incrementAndGet());</span><br></pre></td></tr></table></figure><h3 id="2️⃣-Stream重复使用"><a href="#2️⃣-Stream重复使用" class="headerlink" title="2️⃣ Stream重复使用"></a>2️⃣ Stream重复使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：重复使用Stream</span></span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">stream.filter(s -&gt; s.length() &gt; <span class="number">3</span>);</span><br><span class="line">stream.map(String::toUpperCase); <span class="comment">// 运行时异常</span></span><br><span class="line"><span class="comment">// 正确：每次创建新的Stream</span></span><br><span class="line">list.stream().filter(s -&gt; s.length() &gt; <span class="number">3</span>);</span><br><span class="line">list.stream().map(String::toUpperCase);</span><br></pre></td></tr></table></figure><h3 id="3️⃣-过度使用函数式编程-java"><a href="#3️⃣-过度使用函数式编程-java" class="headerlink" title="3️⃣ 过度使用函数式编程&#96;&#96;&#96;java"></a>3️⃣ 过度使用函数式编程&#96;&#96;&#96;java</h3><p>&#x2F;&#x2F; 错误：过度复杂化<br>String result &#x3D; list.stream()<br>    .filter(s -&gt; s !&#x3D; null)<br>    .filter(s -&gt; !s.isEmpty())<br>    .map(s -&gt; s.trim())<br>    .filter(s -&gt; s.length() &gt; 0)<br>    .map(s -&gt; s.toUpperCase())<br>    .collect(Collectors.joining(“, “));</p><p>&#x2F;&#x2F; 正确：保持简洁<br>String result &#x3D; list.stream()<br>    .filter(Objects::nonNull)<br>    .map(String::trim)<br>    .filter(s -&gt; !s.isEmpty())<br>    .map(String::toUpperCase)<br>    .collect(Collectors.joining(“, “));</p><pre><code>## 📚 学习建议1. **循序渐进**：从简单的Lambda表达式开始，逐步学习高级特性2. **实践为主**：多写代码，多练习，在实际项目中应用3. **性能意识**：了解性能影响，合理选择使用场景4. **代码可读性**：函数式编程应该提高代码可读性，而不是相反## 🎊 结语Java函数式编程为我们提供了一种全新的编程范式，它强调不可变性、声明式编程和函数组合。通过合理使用Lambda表达式、Stream API等特性，我们可以写出更简洁、更易维护的代码。记住，函数式编程不是银弹，它应该与传统面向对象编程相结合，在合适的场景下发挥其优势。掌握函数式编程的核心概念和最佳实践，将大大提升我们的编程能力和代码质量。---&gt; 📚 **延伸阅读**：&gt; - [Java 8函数式编程](https://www.oreilly.com/library/view/java-8-in/9781449333071/)&gt; - [Effective Java 第三版](https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/)&gt; - [函数式编程思维](https://www.oreilly.com/library/view/functional-thinking/9781449365519/)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java技术 </category>
          
          <category> 编程思想 </category>
          
          <category> Lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> Lambda </tag>
            
            <tag> Stream </tag>
            
            <tag> 编程范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora学习</title>
      <link href="/2025/10/02/typora%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/10/02/typora%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2025年10月学习规划</title>
      <link href="//october-learning-plan/"/>
      <url>//october-learning-plan/</url>
      
        <content type="html"><![CDATA[<h1 id="📅-2025年10月学习规划"><a href="#📅-2025年10月学习规划" class="headerlink" title="📅 2025年10月学习规划"></a>📅 2025年10月学习规划</h1><h2 id="🎯-学习目标"><a href="#🎯-学习目标" class="headerlink" title="🎯 学习目标"></a>🎯 学习目标</h2><p>国庆假期期间，为自己制定一些简单的学习目标，在放松的同时充实技术知识。</p><hr><h2 id="📚-技术学习"><a href="#📚-技术学习" class="headerlink" title="📚 技术学习"></a>📚 技术学习</h2><h3 id="🔧-编程技能复习"><a href="#🔧-编程技能复习" class="headerlink" title="🔧 编程技能复习"></a>🔧 编程技能复习</h3><ul><li><input disabled="" type="checkbox"> <strong>函数式编程复习</strong> - 整理学习笔记到博客</li><li><input disabled="" type="checkbox"> <strong>Git操作实践</strong> - 系统梳理Git工作流程并整理博客</li><li><input disabled="" type="checkbox"> <strong>Linux系统学习</strong> - 掌握常用命令并整理学习笔记</li><li><input disabled="" type="checkbox"> <strong>未完成项目整理</strong> - 梳理并规划项目完成计划</li></ul><hr><h2 id="🚀-个人技能提升"><a href="#🚀-个人技能提升" class="headerlink" title="🚀 个人技能提升"></a>🚀 个人技能提升</h2><h3 id="🤖-AI工具学习"><a href="#🤖-AI工具学习" class="headerlink" title="🤖 AI工具学习"></a>🤖 AI工具学习</h3><ul><li><input disabled="" type="checkbox"> <strong>AI Cursor使用总结</strong> - 整理使用经验和最佳实践</li><li><input disabled="" type="checkbox"> <strong>MCP协议学习</strong> - 了解Model Context Protocol的基本概念和应用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习规划 </tag>
            
            <tag> 技术提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片处理示例</title>
      <link href="//image-handling-example/"/>
      <url>//image-handling-example/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客图片处理最佳实践"><a href="#Hexo博客图片处理最佳实践" class="headerlink" title="Hexo博客图片处理最佳实践"></a>Hexo博客图片处理最佳实践</h1><h2 id="🎯-方案对比"><a href="#🎯-方案对比" class="headerlink" title="🎯 方案对比"></a>🎯 方案对比</h2><h3 id="方案1-使用source-images文件夹-推荐"><a href="#方案1-使用source-images文件夹-推荐" class="headerlink" title="方案1: 使用source&#x2F;images文件夹 (推荐)"></a>方案1: 使用source&#x2F;images文件夹 (推荐)</h3><p>这是最简单可靠的方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">技术架构图</span>](<span class="link">/images/tech-architecture.png</span>)</span><br></pre></td></tr></table></figure><p><strong>优点:</strong></p><ul><li>✅ 图片自动部署到GitHub</li><li>✅ 路径简单，不易出错</li><li>✅ 本地和线上路径一致</li></ul><h3 id="方案2-使用CDN加速"><a href="#方案2-使用CDN加速" class="headerlink" title="方案2: 使用CDN加速"></a>方案2: 使用CDN加速</h3><h4 id="jsDelivr-GitHub"><a href="#jsDelivr-GitHub" class="headerlink" title="jsDelivr + GitHub"></a>jsDelivr + GitHub</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">https://cdn.jsdelivr.net/gh/suoChina/suoChina.github.io@main/images/图片名.jpg</span>)</span><br></pre></td></tr></table></figure><h4 id="GitHub-Raw"><a href="#GitHub-Raw" class="headerlink" title="GitHub Raw"></a>GitHub Raw</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">https://raw.githubusercontent.com/suoChina/suoChina.github.io/main/images/图片名.jpg</span>)</span><br></pre></td></tr></table></figure><p><strong>优点:</strong></p><ul><li>✅ 加载速度快</li><li>✅ 减少GitHub仓库大小</li><li>✅ 支持图片压缩</li></ul><h3 id="方案3-文章资源文件夹"><a href="#方案3-文章资源文件夹" class="headerlink" title="方案3: 文章资源文件夹"></a>方案3: 文章资源文件夹</h3><p>创建与文章同名的文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source/_posts/</span><br><span class="line">├── 图片处理示例.md</span><br><span class="line">└── 图片处理示例/</span><br><span class="line">    ├── example1.png</span><br><span class="line">    └── example2.jpg</span><br></pre></td></tr></table></figure><p>在markdown中使用：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">示例图片1</span>](<span class="link">图片处理示例/example1.png</span>)</span><br><span class="line">![<span class="string">示例图片2</span>](<span class="link">图片处理示例/example2.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="🛠️-实际操作步骤"><a href="#🛠️-实际操作步骤" class="headerlink" title="🛠️ 实际操作步骤"></a>🛠️ 实际操作步骤</h2><h3 id="1-创建图片文件夹"><a href="#1-创建图片文件夹" class="headerlink" title="1. 创建图片文件夹"></a>1. 创建图片文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">source</span>/images</span><br></pre></td></tr></table></figure><h3 id="2-放置图片文件"><a href="#2-放置图片文件" class="headerlink" title="2. 放置图片文件"></a>2. 放置图片文件</h3><p>将图片文件放在 <code>source/images/</code> 目录下</p><h3 id="3-在文章中使用"><a href="#3-在文章中使用" class="headerlink" title="3. 在文章中使用"></a>3. 在文章中使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">/images/图片文件名.jpg</span>)</span><br></pre></td></tr></table></figure><h3 id="4-重新生成和部署"><a href="#4-重新生成和部署" class="headerlink" title="4. 重新生成和部署"></a>4. 重新生成和部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo generate</span><br><span class="line">npx hexo deploy</span><br></pre></td></tr></table></figure><h2 id="📝-最佳实践建议"><a href="#📝-最佳实践建议" class="headerlink" title="📝 最佳实践建议"></a>📝 最佳实践建议</h2><h3 id="图片命名规范"><a href="#图片命名规范" class="headerlink" title="图片命名规范"></a>图片命名规范</h3><ul><li>使用英文和数字</li><li>避免特殊字符和中文</li><li>使用描述性名称</li></ul><h3 id="图片格式选择"><a href="#图片格式选择" class="headerlink" title="图片格式选择"></a>图片格式选择</h3><ul><li><strong>PNG</strong>: 适合图标、截图、透明背景</li><li><strong>JPG</strong>: 适合照片、复杂图片</li><li><strong>WebP</strong>: 现代格式，体积小，质量高</li><li><strong>SVG</strong>: 矢量图，适合图标和简单图形</li></ul><h3 id="图片SEO优化"><a href="#图片SEO优化" class="headerlink" title="图片SEO优化"></a>图片SEO优化</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Vue.js组件生命周期图 - 详细展示了Vue组件的创建、更新和销毁过程</span>](<span class="link">/images/vue-lifecycle.png</span>)</span><br></pre></td></tr></table></figure><h2 id="🔍-常见问题排查"><a href="#🔍-常见问题排查" class="headerlink" title="🔍 常见问题排查"></a>🔍 常见问题排查</h2><h3 id="问题1-图片显示为链接"><a href="#问题1-图片显示为链接" class="headerlink" title="问题1: 图片显示为链接"></a>问题1: 图片显示为链接</h3><p><strong>原因</strong>: 图片路径错误或文件不存在<br><strong>解决</strong>: 检查文件路径和文件名</p><h3 id="问题2-本地显示正常，线上不显示"><a href="#问题2-本地显示正常，线上不显示" class="headerlink" title="问题2: 本地显示正常，线上不显示"></a>问题2: 本地显示正常，线上不显示</h3><p><strong>原因</strong>: 图片文件未部署到GitHub<br><strong>解决</strong>: 确保图片在source目录下</p><h3 id="问题3-图片加载慢"><a href="#问题3-图片加载慢" class="headerlink" title="问题3: 图片加载慢"></a>问题3: 图片加载慢</h3><p><strong>原因</strong>: 图片文件过大或网络问题<br><strong>解决</strong>: 压缩图片或使用CDN</p><h2 id="🎯-推荐实施步骤"><a href="#🎯-推荐实施步骤" class="headerlink" title="🎯 推荐实施步骤"></a>🎯 推荐实施步骤</h2><ol><li><strong>立即</strong>: 使用source&#x2F;images方案解决当前问题</li><li><strong>短期</strong>: 优化图片大小和格式</li><li><strong>长期</strong>: 考虑使用CDN加速</li><li><strong>持续</strong>: 建立图片管理规范</li></ol><hr><h2 id="💡-总结"><a href="#💡-总结" class="headerlink" title="💡 总结"></a>💡 总结</h2><p>选择合适的图片处理方案对于博客的加载速度和用户体验非常重要。建议从简单的source&#x2F;images方案开始，随着博客内容增加再考虑使用CDN加速。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 博客优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 图片处理 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/10/02/hello-world/"/>
      <url>/2025/10/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
